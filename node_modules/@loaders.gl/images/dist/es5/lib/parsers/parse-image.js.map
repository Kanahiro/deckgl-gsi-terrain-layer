{"version":3,"sources":["../../../../src/lib/parsers/parse-image.js"],"names":["parseImage","arrayBuffer","options","context","imageOptions","image","imageType","type","url","loadType","getLoadableImageType"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;SAI8BA,U;;;;;gFAAf,iBAA0BC,WAA1B,EAAuCC,OAAvC,EAAgDC,OAAhD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbD,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACME,YAAAA,YAFO,GAEQF,OAAO,CAACG,KAAR,IAAiB,EAFzB;AAKPC,YAAAA,SALO,GAKKF,YAAY,CAACG,IAAb,IAAqB,MAL1B;AAAA,mBAOCJ,OAAO,IAAI,EAPZ,EAONK,GAPM,QAONA,GAPM;AAUPC,YAAAA,QAVO,GAUIC,oBAAoB,CAACJ,SAAD,CAVxB;AAAA,0BAaLG,QAbK;AAAA,4CAcN,aAdM,uBAiBN,OAjBM,wBAoBN,MApBM;AAAA;;AAAA;AAAA;AAAA,mBAeK,oCAAmBR,WAAnB,EAAgCC,OAAhC,EAAyCM,GAAzC,CAfL;;AAAA;AAeTH,YAAAA,KAfS;AAAA;;AAAA;AAAA;AAAA,mBAkBK,8BAAaJ,WAAb,EAA0BC,OAA1B,EAAmCM,GAAnC,CAlBL;;AAAA;AAkBTH,YAAAA,KAlBS;AAAA;;AAAA;AAAA;AAAA,mBAsBK,kCAAiBJ,WAAjB,EAA8BC,OAA9B,CAtBL;;AAAA;AAsBTG,YAAAA,KAtBS;AAAA;;AAAA;AAyBT,oCAAO,KAAP;;AAzBS;AA6Bb,gBAAIC,SAAS,KAAK,MAAlB,EAA0B;AACxBD,cAAAA,KAAK,GAAG,kCAAaA,KAAb,CAAR;AACD;;AA/BY,6CAiCNA,KAjCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqCf,SAASK,oBAAT,CAA8BH,IAA9B,EAAoC;AAClC,UAAQA,IAAR;AACE,SAAK,MAAL;AACA,SAAK,MAAL;AAGE,aAAO,qCAAP;;AACF;AAEE,2CAAqBA,IAArB;AACA,aAAOA,IAAP;AATJ;AAWD","sourcesContent":["import assert from '../utils/assert';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"],"file":"parse-image.js"}