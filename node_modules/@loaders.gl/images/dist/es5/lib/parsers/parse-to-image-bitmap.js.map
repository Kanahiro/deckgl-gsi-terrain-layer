{"version":3,"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.js"],"names":["EMPTY_OBJECT","imagebitmapOptionsSupported","parseToImageBitmap","arrayBuffer","options","url","image","blob","imagebitmapOptions","imagebitmap","safeCreateImageBitmap","isEmptyObject","createImageBitmap","console","warn","object","key"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG,EAArB;AAEA,IAAIC,2BAA2B,GAAG,IAAlC;;SAS8BC,kB;;;;;wFAAf,iBAAkCC,WAAlC,EAA+CC,OAA/C,EAAwDC,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAIT,qBAAMA,GAAN,CAJS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMS,8BAAaF,WAAb,EAA0BC,OAA1B,EAAmCC,GAAnC,CANT;;AAAA;AAMLC,YAAAA,KANK;AAOXC,YAAAA,IAAI,GAAGD,KAAP;AAPW;AAAA;;AAAA;AAUXC,YAAAA,IAAI,GAAG,uBAAQJ,WAAR,EAAqBE,GAArB,CAAP;;AAVW;AAaPG,YAAAA,kBAbO,GAacJ,OAAO,IAAIA,OAAO,CAACK,WAbjC;AAAA;AAAA,mBAeAC,qBAAqB,CAACH,IAAD,EAAOC,kBAAP,CAfrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAwBAE,qB;;;;;2FAAf,kBAAqCH,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2CC,YAAAA,kBAA3C,8DAAgE,IAAhE;;AACE,gBAAIG,aAAa,CAACH,kBAAD,CAAb,IAAqC,CAACP,2BAA1C,EAAuE;AACrEO,cAAAA,kBAAkB,GAAG,IAArB;AACD;;AAHH,iBAKMA,kBALN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAQmBI,iBAAiB,CAACL,IAAD,EAAOC,kBAAP,CARpC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUMK,YAAAA,OAAO,CAACC,IAAR;AACAb,YAAAA,2BAA2B,GAAG,KAA9B;;AAXN;AAAA;AAAA,mBAeeW,iBAAiB,CAACL,IAAD,CAfhC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,SAASI,aAAT,CAAuBI,MAAvB,EAA+B;AAC7B,OAAK,IAAMC,GAAX,IAAkBD,MAAM,IAAIf,YAA5B,EAA0C;AACxC,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["/* global createImageBitmap */\nimport {isSVG, getBlob} from './svg-utils';\nimport parseToImage from './parse-to-image';\n\nconst EMPTY_OBJECT = {};\n\nlet imagebitmapOptionsSupported = true;\n\n/**\n * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n *\n * TODO - createImageBitmap supports source rect (5 param overload), pass through?\n */\nexport default async function parseToImageBitmap(arrayBuffer, options, url) {\n  let blob;\n\n  // Cannot parse SVG directly to ImageBitmap, parse to Image first\n  if (isSVG(url)) {\n    // Note: this only works on main thread\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    // Create blob from the array buffer\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\n/**\n * Safely creates an imageBitmap with options\n * *\n * Firefox crashes if imagebitmapOptions is supplied\n * Avoid supplying if not provided or supported, remember if not supported\n */\nasync function safeCreateImageBitmap(blob, imagebitmapOptions = null) {\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n"],"file":"parse-to-image-bitmap.js"}