{"version":3,"sources":["../../../../src/lib/texture-api/load-image-cube.js"],"names":["parseImage","getImageUrls","deepLoad","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_TEXTURE_CUBE_MAP_NEGATIVE_X","GL_TEXTURE_CUBE_MAP_POSITIVE_Y","GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","GL_TEXTURE_CUBE_MAP_POSITIVE_Z","GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","CUBE_FACES","face","direction","axis","sign","getImageCubeUrls","getUrl","options","urls","promises","index","faceValues","promise","then","url","push","Promise","all","loadImageCube"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,SAAQC,YAAR,QAA2B,cAA3B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAGA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AAEA,MAAMC,UAAU,GAAG,CACjB;AAACC,EAAAA,IAAI,EAAEP,8BAAP;AAAuCQ,EAAAA,SAAS,EAAE,OAAlD;AAA2DC,EAAAA,IAAI,EAAE,GAAjE;AAAsEC,EAAAA,IAAI,EAAE;AAA5E,CADiB,EAEjB;AAACH,EAAAA,IAAI,EAAEN,8BAAP;AAAuCO,EAAAA,SAAS,EAAE,MAAlD;AAA0DC,EAAAA,IAAI,EAAE,GAAhE;AAAqEC,EAAAA,IAAI,EAAE;AAA3E,CAFiB,EAGjB;AAACH,EAAAA,IAAI,EAAEL,8BAAP;AAAuCM,EAAAA,SAAS,EAAE,KAAlD;AAAyDC,EAAAA,IAAI,EAAE,GAA/D;AAAoEC,EAAAA,IAAI,EAAE;AAA1E,CAHiB,EAIjB;AAACH,EAAAA,IAAI,EAAEJ,8BAAP;AAAuCK,EAAAA,SAAS,EAAE,QAAlD;AAA4DC,EAAAA,IAAI,EAAE,GAAlE;AAAuEC,EAAAA,IAAI,EAAE;AAA7E,CAJiB,EAKjB;AAACH,EAAAA,IAAI,EAAEH,8BAAP;AAAuCI,EAAAA,SAAS,EAAE,OAAlD;AAA2DC,EAAAA,IAAI,EAAE,GAAjE;AAAsEC,EAAAA,IAAI,EAAE;AAA5E,CALiB,EAMjB;AAACH,EAAAA,IAAI,EAAEF,8BAAP;AAAuCG,EAAAA,SAAS,EAAE,MAAlD;AAA0DC,EAAAA,IAAI,EAAE,GAAhE;AAAqEC,EAAAA,IAAI,EAAE;AAA3E,CANiB,CAAnB;AAWA,OAAO,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwCC,OAAxC,EAAiD;AAEtD,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,QAAQ,GAAG,EAAjB;AAEA,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,MAAMT,IAAX,IAAmBD,UAAnB,EAA+B;AAC7B,UAAMW,UAAU,GAAGX,UAAU,CAACU,KAAD,CAA7B;AACA,UAAME,OAAO,GAAGpB,YAAY,CAACc,MAAD,EAASC,OAAT,EAAkB,EAAC,GAAGI,UAAJ;AAAgBD,MAAAA,KAAK,EAAEA,KAAK;AAA5B,KAAlB,CAAZ,CAA+DG,IAA/D,CAAoEC,GAAG,IAAI;AACzFN,MAAAA,IAAI,CAACP,IAAD,CAAJ,GAAaa,GAAb;AACD,KAFe,CAAhB;AAGAL,IAAAA,QAAQ,CAACM,IAAT,CAAcH,OAAd;AACD;;AAED,QAAMI,OAAO,CAACC,GAAR,CAAYR,QAAZ,CAAN;AAEA,SAAOD,IAAP;AACD;AAID,OAAO,eAAeU,aAAf,CAA6BZ,MAA7B,EAAqCC,OAAO,GAAG,EAA/C,EAAmD;AACxD,QAAMC,IAAI,GAAG,MAAMH,gBAAgB,CAACC,MAAD,EAASC,OAAT,CAAnC;AACA,SAAO,MAAMd,QAAQ,CAACe,IAAD,EAAOjB,UAAP,EAAmBgB,OAAnB,CAArB;AACD","sourcesContent":["import parseImage from '../parsers/parse-image';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n\nconst CUBE_FACES = [\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_X, direction: 'right', axis: 'x', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X, direction: 'left', axis: 'x', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y, direction: 'top', axis: 'y', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, direction: 'bottom', axis: 'y', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z, direction: 'front', axis: 'z', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, direction: 'back', axis: 'z', sign: 'negative'}\n];\n\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl, options) {\n  // Calculate URLs\n  const urls = {};\n  const promises = [];\n\n  let index = 0;\n  for (const face in CUBE_FACES) {\n    const faceValues = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, {...faceValues, index: index++}).then(url => {\n      urls[face] = url;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return urls;\n}\n\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageCube(getUrl, options = {}) {\n  const urls = await getImageCubeUrls(getUrl, options);\n  return await deepLoad(urls, parseImage, options);\n}\n"],"file":"load-image-cube.js"}