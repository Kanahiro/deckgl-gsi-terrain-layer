{"version":3,"sources":["../../src/image-loader.js"],"names":["parseImage","getBinaryImageMetadata","VERSION","EXTENSIONS","MIME_TYPES","ImageLoader","id","name","version","mimeTypes","extensions","parse","tests","arrayBuffer","Boolean","DataView","options","image","type","decode"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,2BAAvB;AACA,SAAQC,sBAAR,QAAqC,qCAArC;AAKA,MAAMC,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,QAAnE;AAEA,MAAMC,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,CAAnB;AACA,MAAMC,UAAU,GAAG,CACjB,WADiB,EAEjB,YAFiB,EAGjB,WAHiB,EAIjB,YAJiB,EAKjB,WALiB,EAMjB,0BANiB,EAOjB,eAPiB,CAAnB;AAYA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EAAE,OADc;AAElBC,EAAAA,IAAI,EAAE,QAFY;AAGlBC,EAAAA,OAAO,EAAEN,OAHS;AAIlBO,EAAAA,SAAS,EAAEL,UAJO;AAKlBM,EAAAA,UAAU,EAAEP,UALM;AAMlBQ,EAAAA,KAAK,EAAEX,UANW;AAQlBY,EAAAA,KAAK,EAAE,CAACC,WAAW,IAAIC,OAAO,CAACb,sBAAsB,CAAC,IAAIc,QAAJ,CAAaF,WAAb,CAAD,CAAvB,CAAvB,CARW;AASlBG,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,MAAM,EAAE;AAFH;AADA;AATS,CAApB;AAkBA,eAAed,WAAf","sourcesContent":["import parseImage from './lib/parsers/parse-image';\nimport {getBinaryImageMetadata} from './lib/category-api/binary-image-api';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nconst MIME_TYPES = [\n  'image/png',\n  'image/jpeg',\n  'image/gif',\n  'image/webp',\n  'image/bmp',\n  'image/vnd.microsoft.icon',\n  'image/svg+xml'\n];\n\n// Loads a platform-specific image type that can be used as input data to WebGL textures\n/** @type {LoaderObject} */\nconst ImageLoader = {\n  id: 'image',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  // TODO: byteOffset, byteLength;\n  tests: [arrayBuffer => Boolean(getBinaryImageMetadata(new DataView(arrayBuffer)))],\n  options: {\n    image: {\n      type: 'auto',\n      decode: true // if format is HTML\n    }\n    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor\n  }\n};\n\nexport default ImageLoader;\n"],"file":"image-loader.js"}