import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import parseImage from '../parsers/parse-image';
import { getImageUrls } from './load-image';
import { deepLoad } from './deep-load';
export function loadImageArray(_x, _x2) {
  return _loadImageArray.apply(this, arguments);
}

function _loadImageArray() {
  _loadImageArray = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(count, getUrl) {
    var options,
        imageUrls,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            _context.next = 3;
            return getImageArrayUrls(count, getUrl, options);

          case 3:
            imageUrls = _context.sent;
            _context.next = 6;
            return deepLoad(imageUrls, parseImage, options);

          case 6:
            return _context.abrupt("return", _context.sent);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadImageArray.apply(this, arguments);
}

export function getImageArrayUrls(_x3, _x4) {
  return _getImageArrayUrls.apply(this, arguments);
}

function _getImageArrayUrls() {
  _getImageArrayUrls = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(count, getUrl) {
    var options,
        promises,
        index,
        promise,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
            promises = [];

            for (index = 0; index < count; index++) {
              promise = getImageUrls(getUrl, options, {
                index: index
              });
              promises.push(promise);
            }

            _context2.next = 5;
            return Promise.all(promises);

          case 5:
            return _context2.abrupt("return", _context2.sent);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getImageArrayUrls.apply(this, arguments);
}
//# sourceMappingURL=load-image-array.js.map