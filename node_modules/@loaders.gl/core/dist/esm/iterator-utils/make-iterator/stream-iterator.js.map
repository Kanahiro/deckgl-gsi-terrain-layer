{"version":3,"sources":["../../../../src/iterator-utils/make-iterator/stream-iterator.js"],"names":["isBrowser","nodeVersion","toArrayBuffer","makeStreamIterator","stream","Symbol","asyncIterator","makeToArrayBufferIterator","getIterator","makeBrowserStreamIterator","makeNodeStreamIterator","chunk","reader","getReader","read","done","value","releaseLock","data","_readableState","ended","onceReadable","Promise","resolve","once"],"mappings":"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","sourcesContent":["import {isBrowser, nodeVersion, toArrayBuffer} from '@loaders.gl/loader-utils';\n\nexport function makeStreamIterator(stream) {\n  // Hacky test for node version to ensure we don't call bad polyfills\n  if (isBrowser || nodeVersion >= 10) {\n    // NODE 10+: stream is an asyncIterator\n    if (typeof stream[Symbol.asyncIterator] === 'function') {\n      return makeToArrayBufferIterator(stream);\n    }\n\n    // WhatWG: stream is supposed to have a `getIterator` method\n    if (typeof stream.getIterator === 'function') {\n      return stream.getIterator();\n    }\n  }\n\n  return isBrowser ? makeBrowserStreamIterator(stream) : makeNodeStreamIterator(stream);\n}\n\n/** Coerce each chunk to ArrayBuffer */\nasync function* makeToArrayBufferIterator(asyncIterator) {\n  for await (const chunk of asyncIterator) {\n    yield toArrayBuffer(chunk);\n  }\n}\n\n// BROWSER IMPLEMENTATION\n// See https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n\nasync function* makeBrowserStreamIterator(stream) {\n  // In the brower, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Read from the stream\n      // value is a Uint8Array\n      const {done, value} = await reader.read();\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    // TODO - examples makes it look like this should always be called,\n    // but that generates exceptions so only call it if we do not reach the end\n    reader.releaseLock();\n  }\n}\n\n// NODE <10 IMPLEMENTATION\n// See https://github.com/bustle/streaming-iterables, MIT license\n\nasync function* makeNodeStreamIterator(stream) {\n  // Node createStream will return promises to handle http requests\n  stream = await stream;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield toArrayBuffer(data);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n}\n\nasync function onceReadable(stream) {\n  return new Promise(resolve => {\n    stream.once('readable', resolve);\n  });\n}\n"],"file":"stream-iterator.js"}