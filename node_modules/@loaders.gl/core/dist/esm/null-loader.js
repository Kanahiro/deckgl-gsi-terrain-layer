import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/esm/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/esm/awaitAsyncGenerator";
import _asyncIterator from "@babel/runtime/helpers/esm/asyncIterator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/esm/asyncGeneratorDelegate";
var VERSION = typeof "2.3.1" !== 'undefined' ? "2.3.1" : 'latest';
export var NullLoader = {
  id: 'image',
  name: 'Images',
  version: VERSION,
  mimeTypes: ['application/x.empty'],
  extensions: ['null'],
  parse: function () {
    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", arrayBuffer);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function parse(_x, _x2) {
      return _parse.apply(this, arguments);
    }

    return parse;
  }(),
  parseSync: function parseSync(arrayBuffer, options) {
    return arrayBuffer;
  },
  parseInBatches: function () {
    var _parseInBatches2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(asyncIterator, options) {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", function () {
                var _parseInBatches = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee2() {
                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(asyncIterator), _awaitAsyncGenerator), "t0", 1);

                        case 1:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                function parseInBatches() {
                  return _parseInBatches.apply(this, arguments);
                }

                return parseInBatches;
              }()());

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function parseInBatches(_x3, _x4) {
      return _parseInBatches2.apply(this, arguments);
    }

    return parseInBatches;
  }(),
  tests: [function () {
    return false;
  }],
  options: {}
};
//# sourceMappingURL=null-loader.js.map