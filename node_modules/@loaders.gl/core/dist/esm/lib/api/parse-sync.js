import { assert } from '@loaders.gl/loader-utils';
import { selectLoaderSync } from './select-loader';
import { isLoaderObject } from '../loader-utils/normalize-loader';
import { normalizeOptions } from '../loader-utils/option-utils';
import { getArrayBufferOrStringFromDataSync } from '../loader-utils/get-data';
import { getLoaders, getLoaderContext } from '../loader-utils/context-utils';
import { getResourceUrlAndType } from '../utils/resource-utils';
export function parseSync(data, loaders, options, context) {
  assert(!context || typeof context !== 'string', 'parseSync no longer accepts final url');

  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    context = options;
    options = loaders;
    loaders = null;
  }

  options = options || {};
  var candidateLoaders = getLoaders(loaders, context);
  var loader = selectLoaderSync(data, candidateLoaders, options);

  if (!loader) {
    return null;
  }

  options = normalizeOptions(options, loader, candidateLoaders);

  var _getResourceUrlAndTyp = getResourceUrlAndType(data),
      url = _getResourceUrlAndTyp.url;

  context = getLoaderContext({
    url: url,
    parseSync: parseSync,
    loaders: loaders
  }, options);
  return parseWithLoaderSync(loader, data, options, context);
}

function parseWithLoaderSync(loader, data, options, context) {
  data = getArrayBufferOrStringFromDataSync(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    return loader.parseTextSync(data, options, context, loader);
  }

  if (loader.parseSync) {
    return loader.parseSync(data, options, context, loader);
  }

  throw new Error("".concat(loader.name, " loader: 'parseSync' not supported by this loader, use 'parse' instead. ").concat(context.url || ''));
}
//# sourceMappingURL=parse-sync.js.map