import { isBrowser, nodeVersion, toArrayBuffer } from '@loaders.gl/loader-utils';
export function makeStreamIterator(stream) {
  if (isBrowser || nodeVersion >= 10) {
    if (typeof stream[Symbol.asyncIterator] === 'function') {
      return makeToArrayBufferIterator(stream);
    }

    if (typeof stream.getIterator === 'function') {
      return stream.getIterator();
    }
  }

  return isBrowser ? makeBrowserStreamIterator(stream) : makeNodeStreamIterator(stream);
}

async function* makeToArrayBufferIterator(asyncIterator) {
  for await (const chunk of asyncIterator) {
    yield toArrayBuffer(chunk);
  }
}

async function* makeBrowserStreamIterator(stream) {
  const reader = stream.getReader();

  try {
    while (true) {
      const {
        done,
        value
      } = await reader.read();

      if (done) {
        return;
      }

      yield toArrayBuffer(value);
    }
  } catch (error) {
    reader.releaseLock();
  }
}

async function* makeNodeStreamIterator(stream) {
  stream = await stream;

  while (true) {
    const data = stream.read();

    if (data !== null) {
      yield toArrayBuffer(data);
      continue;
    }

    if (stream._readableState.ended) {
      return;
    }

    await onceReadable(stream);
  }
}

async function onceReadable(stream) {
  return new Promise(resolve => {
    stream.once('readable', resolve);
  });
}
//# sourceMappingURL=stream-iterator.js.map