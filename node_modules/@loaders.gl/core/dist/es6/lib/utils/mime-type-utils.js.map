{"version":3,"sources":["../../../../src/lib/utils/mime-type-utils.js"],"names":["DATA_URL_PATTERN","MIME_TYPE_PATTERN","parseMIMEType","mimeString","matches","match","parseMIMETypeFromURL","dataUrl"],"mappings":"AAGA,MAAMA,gBAAgB,GAAG,gCAAzB;AACA,MAAMC,iBAAiB,GAAG,sBAA1B;AAEA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACxC,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAO,EAAP;AACD;;AAGD,QAAMC,OAAO,GAAGD,UAAU,CAACE,KAAX,CAAiBJ,iBAAjB,CAAhB;;AACA,MAAIG,OAAJ,EAAa;AACX,WAAOA,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,SAAOD,UAAP;AACD;AAED,OAAO,SAASG,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAO,EAAP;AACD;;AAGD,QAAMH,OAAO,GAAGG,OAAO,CAACF,KAAR,CAAcL,gBAAd,CAAhB;;AACA,MAAII,OAAJ,EAAa;AACX,WAAOA,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,SAAO,EAAP;AACD","sourcesContent":["// TODO - build/integrate proper MIME type parsing\n// https://mimesniff.spec.whatwg.org/\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\nexport function parseMIMEType(mimeString) {\n  if (typeof mimeString !== 'string') {\n    return '';\n  }\n\n  // If resource is a data url, extract any embedded mime type\n  const matches = mimeString.match(MIME_TYPE_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n\n  return mimeString;\n}\n\nexport function parseMIMETypeFromURL(dataUrl) {\n  if (typeof dataUrl !== 'string') {\n    return '';\n  }\n\n  // If resource is a data URL, extract any embedded mime type\n  const matches = dataUrl.match(DATA_URL_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n\n  return '';\n}\n"],"file":"mime-type-utils.js"}