{"version":3,"sources":["../../../../src/lib/api/parse-sync.js"],"names":["assert","selectLoaderSync","isLoaderObject","normalizeOptions","getArrayBufferOrStringFromDataSync","getLoaders","getLoaderContext","getResourceUrlAndType","parseSync","data","loaders","options","context","Array","isArray","candidateLoaders","loader","url","parseWithLoaderSync","parseTextSync","Error","name"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,0BAArB;AACA,SAAQC,gBAAR,QAA+B,iBAA/B;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AACA,SAAQC,kCAAR,QAAiD,0BAAjD;AACA,SAAQC,UAAR,EAAoBC,gBAApB,QAA2C,+BAA3C;AACA,SAAQC,qBAAR,QAAoC,yBAApC;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;AACzDZ,EAAAA,MAAM,CAAC,CAACY,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAhC,EAA0C,uCAA1C,CAAN;;AAIA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACR,cAAc,CAACQ,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAEDC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAIA,QAAMI,gBAAgB,GAAGV,UAAU,CAACK,OAAD,EAAUE,OAAV,CAAnC;AACA,QAAMI,MAAM,GAAGf,gBAAgB,CAACQ,IAAD,EAAOM,gBAAP,EAAyBJ,OAAzB,CAA/B;;AAEA,MAAI,CAACK,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAGDL,EAAAA,OAAO,GAAGR,gBAAgB,CAACQ,OAAD,EAAUK,MAAV,EAAkBD,gBAAlB,CAA1B;AAGA,QAAM;AAACE,IAAAA;AAAD,MAAQV,qBAAqB,CAACE,IAAD,CAAnC;AAEAG,EAAAA,OAAO,GAAGN,gBAAgB,CAAC;AAACW,IAAAA,GAAD;AAAMT,IAAAA,SAAN;AAAiBE,IAAAA;AAAjB,GAAD,EAA4BC,OAA5B,CAA1B;AAEA,SAAOO,mBAAmB,CAACF,MAAD,EAASP,IAAT,EAAeE,OAAf,EAAwBC,OAAxB,CAA1B;AACD;;AAGD,SAASM,mBAAT,CAA6BF,MAA7B,EAAqCP,IAArC,EAA2CE,OAA3C,EAAoDC,OAApD,EAA6D;AAC3DH,EAAAA,IAAI,GAAGL,kCAAkC,CAACK,IAAD,EAAOO,MAAP,CAAzC;;AAEA,MAAIA,MAAM,CAACG,aAAP,IAAwB,OAAOV,IAAP,KAAgB,QAA5C,EAAsD;AACpD,WAAOO,MAAM,CAACG,aAAP,CAAqBV,IAArB,EAA2BE,OAA3B,EAAoCC,OAApC,EAA6CI,MAA7C,CAAP;AACD;;AAED,MAAIA,MAAM,CAACR,SAAX,EAAsB;AACpB,WAAOQ,MAAM,CAACR,SAAP,CAAiBC,IAAjB,EAAuBE,OAAvB,EAAgCC,OAAhC,EAAyCI,MAAzC,CAAP;AACD;;AAGD,QAAM,IAAII,KAAJ,WAEFJ,MAAM,CAACK,IAFL,qFAGuET,OAAO,CAACK,GAAR,IAAe,EAHtF,EAAN;AAKD","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {selectLoaderSync} from './select-loader';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/context-utils';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\n\nexport function parseSync(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parseSync no longer accepts final url');\n\n  // Signature: parseSync(data, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  options = options || {};\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = selectLoaderSync(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  context = getLoaderContext({url, parseSync, loaders}, options);\n\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(\n    `${\n      loader.name\n    } loader: 'parseSync' not supported by this loader, use 'parse' instead. ${context.url || ''}`\n  );\n}\n"],"file":"parse-sync.js"}