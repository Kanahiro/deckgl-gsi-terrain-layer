{"version":3,"sources":["../../../../src/lib/api/parse.js"],"names":["assert","validateLoaderVersion","isLoaderObject","normalizeOptions","getArrayBufferOrStringFromData","getLoaders","getLoaderContext","parseWithWorker","canParseWithWorker","getResourceUrlAndType","selectLoader","parse","data","loaders","options","context","Array","isArray","url","candidateLoaders","loader","parseWithLoader","parseTextSync","dataType","parseText","parseSync"],"mappings":"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","sourcesContent":["import {assert, validateLoaderVersion} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromData} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/context-utils';\nimport parseWithWorker, {canParseWithWorker} from '../loader-utils/parse-with-worker';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\nexport async function parse(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parse no longer accepts final url');\n\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = await selectLoader(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders, url);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateLoaderVersion(loader);\n\n  data = await getArrayBufferOrStringFromData(data, loader);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, data, options, context)) {\n    return await parseWithWorker(loader, data, options, context);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  return assert(false);\n}\n"],"file":"parse.js"}