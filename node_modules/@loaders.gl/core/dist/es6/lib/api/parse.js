import { assert, validateLoaderVersion } from '@loaders.gl/loader-utils';
import { isLoaderObject } from '../loader-utils/normalize-loader';
import { normalizeOptions } from '../loader-utils/option-utils';
import { getArrayBufferOrStringFromData } from '../loader-utils/get-data';
import { getLoaders, getLoaderContext } from '../loader-utils/context-utils';
import parseWithWorker, { canParseWithWorker } from '../loader-utils/parse-with-worker';
import { getResourceUrlAndType } from '../utils/resource-utils';
import { selectLoader } from './select-loader';
export async function parse(data, loaders, options, context) {
  assert(!context || typeof context !== 'string', 'parse no longer accepts final url');

  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {
    context = options;
    options = loaders;
    loaders = null;
  }

  data = await data;
  options = options || {};
  const {
    url
  } = getResourceUrlAndType(data);
  const candidateLoaders = getLoaders(loaders, context);
  const loader = await selectLoader(data, candidateLoaders, options);

  if (!loader) {
    return null;
  }

  options = normalizeOptions(options, loader, candidateLoaders, url);
  context = getLoaderContext({
    url,
    parse,
    loaders: candidateLoaders
  }, options, context);
  return await parseWithLoader(loader, data, options, context);
}

async function parseWithLoader(loader, data, options, context) {
  validateLoaderVersion(loader);
  data = await getArrayBufferOrStringFromData(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    options.dataType = 'text';
    return loader.parseTextSync(data, options, context, loader);
  }

  if (canParseWithWorker(loader, data, options, context)) {
    return await parseWithWorker(loader, data, options, context);
  }

  if (loader.parseText && typeof data === 'string') {
    return await loader.parseText(data, options, context, loader);
  }

  if (loader.parse) {
    return await loader.parse(data, options, context, loader);
  }

  assert(!loader.parseSync);
  return assert(false);
}
//# sourceMappingURL=parse.js.map