{"version":3,"sources":["../../../../src/lib/api/encode.js"],"names":["concatenateArrayBuffers","resolvePath","isBrowser","writeFile","fetchFile","getTemporaryFilename","filename","encode","data","writer","options","url","encodeSync","encodeText","TextEncoder","encodeInBatches","batches","chunks","batch","push","encodeURLtoURL","tmpInputFilename","tmpOutputFilename","outputFilename","response","arrayBuffer","Error","text","TextDecoder","decode","dataIterator","getIterator","table","start","end","length","inputUrl","outputUrl"],"mappings":"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","sourcesContent":["/* global TextEncoder, TextDecoder */\n/** @typedef {import('./encode')} types */\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\n\n/**\n * @param {string} filename\n * @returns {string}\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename) {\n  return `/tmp/${filename}`;\n}\n\nexport async function encode(data, writer, options, url) {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return await concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\nexport function encodeSync(data, writer, options, url) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\nexport async function encodeText(data, writer, options, url) {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\nexport function encodeInBatches(data, writer, options, url) {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\nfunction getIterator(data) {\n  // TODO - this is an unacceptable hack!!!\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\nexport async function encodeURLtoURL(inputUrl, outputUrl, writer, options) {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n"],"file":"encode.js"}