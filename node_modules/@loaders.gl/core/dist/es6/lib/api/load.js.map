{"version":3,"sources":["../../../../src/lib/api/load.js"],"names":["isBlob","isLoaderObject","getFetchFunction","parse","load","url","loaders","options","Array","isArray","fetch","data"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,gCAArB;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,KAAR,QAAoB,SAApB;AAIA,OAAO,eAAeC,IAAf,CAAoBC,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AAEhD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAD,IAA2B,CAACL,cAAc,CAACK,OAAD,CAA9C,EAAyD;AACvDC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAGD,QAAMI,KAAK,GAAGR,gBAAgB,CAACK,OAAO,IAAI,EAAZ,CAA9B;AAGA,MAAII,IAAI,GAAGN,GAAX;;AAEA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BM,IAAAA,IAAI,GAAG,MAAMD,KAAK,CAACL,GAAD,CAAlB;AACD,GAFD,MAEO;AACLA,IAAAA,GAAG,GAAG,IAAN;AACD;;AAGD,MAAIL,MAAM,CAACK,GAAD,CAAV,EAAiB;AAEfM,IAAAA,IAAI,GAAG,MAAMD,KAAK,CAACL,GAAD,CAAlB;AACAA,IAAAA,GAAG,GAAG,IAAN;AACD;;AAGD,SAAO,MAAMF,KAAK,CAACQ,IAAD,EAAOL,OAAP,EAAgBC,OAAhB,CAAlB;AACD","sourcesContent":["import {isBlob} from '../../javascript-utils/is-type';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parse} from './parse';\n\n// Note: Load does duplicate a lot of parse.\n// it can also call fetchFile on string urls, which `parse` won't do.\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetch(url);\n  } else {\n    url = null;\n  }\n\n  // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  if (isBlob(url)) {\n    // The fetch response object will contain blob.name\n    data = await fetch(url);\n    url = null;\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  return await parse(data, loaders, options);\n}\n"],"file":"load.js"}