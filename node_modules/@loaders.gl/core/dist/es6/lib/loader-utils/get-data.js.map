{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["concatenateChunksAsync","isResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isBlob","isBuffer","makeIterator","checkResponse","makeResponse","ERR_DATA","getArrayBufferOrStringFromDataSync","data","loader","text","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","buffer","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","response","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator","getReadableStream"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {concatenateChunksAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterator-utils/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data) || isBuffer(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    data = makeIterator(data);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateChunksAsync(data);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isResponse(data)) {\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(data);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    return makeIterator(data.body);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\n\nfunction getIteratorFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getReadableStream(data) {\n  if (isReadableStream(data)) {\n    return data;\n  }\n  if (isResponse(data)) {\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  return response.body;\n}\n"],"file":"get-data.js"}