{"version":3,"sources":["../../../../src/lib/fetch/read-file.browser.js"],"names":["assert","DEFAULT_OPTIONS","dataType","nothrow","isDataURL","url","startsWith","readFileSyncBrowser","uri","options","getReadFileOptions","Object","assign","responseType"],"mappings":"AACA,SAAQA,MAAR,QAAqB,0BAArB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE,aADY;AAGtBC,EAAAA,OAAO,EAAE;AAHa,CAAxB;;AAMA,MAAMC,SAAS,GAAGC,GAAG,IAAIA,GAAG,CAACC,UAAJ,CAAe,OAAf,CAAzB;;AAGA,OAAO,SAASC,mBAAT,CAA6BC,GAA7B,EAAkCC,OAAlC,EAA2C;AAChDA,EAAAA,OAAO,GAAGC,kBAAkB,CAACD,OAAD,CAA5B;;AAEA,MAAIL,SAAS,CAACI,GAAD,CAAb,EAAoB,CAGnB;;AAED,MAAI,CAACC,OAAO,CAACN,OAAb,EAAsB;AAEpBH,IAAAA,MAAM,CAAC,KAAD,CAAN;AACD;;AAED,SAAO,IAAP;AACD;;AAID,SAASU,kBAAT,CAA4BD,OAAO,GAAG,EAAtC,EAA0C;AACxCA,EAAAA,OAAO,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,eAAlB,EAAmCQ,OAAnC,CAAV;AACAA,EAAAA,OAAO,CAACI,YAAR,GAAuBJ,OAAO,CAACI,YAAR,IAAwBJ,OAAO,CAACP,QAAvD;AACA,SAAOO,OAAP;AACD","sourcesContent":["// TODO - this file is not tested\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst DEFAULT_OPTIONS = {\n  dataType: 'arraybuffer',\n  // TODO - this was mostly set to true to make test cases work\n  nothrow: true\n};\n\nconst isDataURL = url => url.startsWith('data:');\n\n// In a few cases (data URIs, files under Node) \"files\" can be read synchronously\nexport function readFileSyncBrowser(uri, options) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(uri)) {\n    // TODO - removed until decodeDataUri does not depend on Node.js Buffer\n    //   return decodeDataUri(uri);\n  }\n\n  if (!options.nothrow) {\n    // throw new Error('Cant load URI synchronously');\n    assert(false);\n  }\n\n  return null;\n}\n\n// HELPER FUNCTIONS\n\nfunction getReadFileOptions(options = {}) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  return options;\n}\n"],"file":"read-file.browser.js"}