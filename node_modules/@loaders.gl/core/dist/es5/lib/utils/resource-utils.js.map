{"version":3,"sources":["../../../../src/lib/utils/resource-utils.js"],"names":["QUERY_STRING_PATTERN","getResourceUrlAndType","resource","contentType","headers","get","urlType","url","stripQueryString","type","name","getResourceContentLength","size","length","ArrayBuffer","byteLength","isView","replace"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA,IAAMA,oBAAoB,GAAG,MAA7B;;AAEO,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AAE9C,MAAI,wBAAWA,QAAX,CAAJ,EAA0B;AACxB,QAAMC,WAAW,GAAG,kCAAcD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAd,CAApB;AACA,QAAMC,OAAO,GAAG,yCAAqBJ,QAAQ,CAACK,GAA9B,CAAhB;AACA,WAAO;AACLA,MAAAA,GAAG,EAAEC,gBAAgB,CAACN,QAAQ,CAACK,GAAT,IAAgB,EAAjB,CADhB;AAELE,MAAAA,IAAI,EAAEN,WAAW,IAAIG,OAAf,IAA0B;AAF3B,KAAP;AAID;;AAGD,MAAI,oBAAOJ,QAAP,CAAJ,EAAsB;AACpB,WAAO;AAGLK,MAAAA,GAAG,EAAEC,gBAAgB,CAACN,QAAQ,CAACQ,IAAT,IAAiB,EAAlB,CAHhB;AAILD,MAAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,IAAiB;AAJlB,KAAP;AAMD;;AAED,MAAI,OAAOP,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAO;AAELK,MAAAA,GAAG,EAAEC,gBAAgB,CAACN,QAAD,CAFhB;AAILO,MAAAA,IAAI,EAAE,yCAAqBP,QAArB;AAJD,KAAP;AAMD;;AAGD,SAAO;AACLK,IAAAA,GAAG,EAAE,EADA;AAELE,IAAAA,IAAI,EAAE;AAFD,GAAP;AAID;;AAEM,SAASE,wBAAT,CAAkCT,QAAlC,EAA4C;AACjD,MAAI,wBAAWA,QAAX,CAAJ,EAA0B;AACxB,WAAOA,QAAQ,CAACE,OAAT,CAAiB,gBAAjB,KAAsC,CAAC,CAA9C;AACD;;AACD,MAAI,oBAAOF,QAAP,CAAJ,EAAsB;AACpB,WAAOA,QAAQ,CAACU,IAAhB;AACD;;AACD,MAAI,OAAOV,QAAP,KAAoB,QAAxB,EAAkC;AAEhC,WAAOA,QAAQ,CAACW,MAAhB;AACD;;AACD,MAAIX,QAAQ,YAAYY,WAAxB,EAAqC;AACnC,WAAOZ,QAAQ,CAACa,UAAhB;AACD;;AACD,MAAID,WAAW,CAACE,MAAZ,CAAmBd,QAAnB,CAAJ,EAAkC;AAChC,WAAOA,QAAQ,CAACa,UAAhB;AACD;;AACD,SAAO,CAAC,CAAR;AACD;;AAED,SAASP,gBAAT,CAA0BD,GAA1B,EAA+B;AAC7B,SAAOA,GAAG,CAACU,OAAJ,CAAYjB,oBAAZ,EAAkC,EAAlC,CAAP;AACD","sourcesContent":["import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\nexport function getResourceUrlAndType(resource) {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const contentType = parseMIMEType(resource.headers.get('content-type'));\n    const urlType = parseMIMETypeFromURL(resource.url);\n    return {\n      url: stripQueryString(resource.url || ''),\n      type: contentType || urlType || null\n    };\n  }\n\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    return {\n      // File objects have a \"name\" property. Blob objects don't have any\n      // url (name) information\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n"],"file":"resource-utils.js"}