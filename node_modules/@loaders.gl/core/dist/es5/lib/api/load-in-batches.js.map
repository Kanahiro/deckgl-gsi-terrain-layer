{"version":3,"sources":["../../../../src/lib/api/load-in-batches.js"],"names":["loadInBatches","files","loaders","options","Array","isArray","fetch","loadOneFileInBatches","promises","map","file","url","response"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAGO,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgD;AAErD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAD,IAA2B,CAAC,qCAAeA,OAAf,CAAhC,EAAyD;AACvDC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAGD,MAAMI,KAAK,GAAG,mCAAiBH,OAAO,IAAI,EAA5B,CAAd;;AAGA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAL,EAA2B;AACzB,WAAOM,oBAAoB,CAACN,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BG,KAA1B,CAA3B;AACD;;AAGD,MAAME,QAAQ,GAAGP,KAAK,CAACQ,GAAN,CAAU,UAAAC,IAAI;AAAA,WAAIH,oBAAoB,CAACG,IAAD,EAAOR,OAAP,EAAgBC,OAAhB,EAAyBG,KAAzB,CAAxB;AAAA,GAAd,CAAjB;AAGA,SAAOE,QAAP;AACD;;SAEcD,oB;;;;;0FAAf,iBAAoCG,IAApC,EAA0CR,OAA1C,EAAmDC,OAAnD,EAA4DG,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM,OAAOI,IAAP,KAAgB,QADtB;AAAA;AAAA;AAAA;;AAEUC,YAAAA,GAFV,GAEgBD,IAFhB;AAAA;AAAA,mBAG2BJ,KAAK,CAACK,GAAD,CAHhC;;AAAA;AAGUC,YAAAA,QAHV;AAAA;AAAA,mBAIiB,oCAAeA,QAAf,EAAyBV,OAAzB,EAAkCC,OAAlC,CAJjB;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAMe,oCAAeO,IAAf,EAAqBR,OAArB,EAA8BC,OAA9B,CANf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parseInBatches} from './parse-in-batches';\n\n// Note returns promise or list of promises\nexport function loadInBatches(files, loaders, options) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // Single url/file\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  // Multiple URLs / files\n  const promises = files.map(file => loadOneFileInBatches(file, loaders, options, fetch));\n\n  // No point in waiting here for all responses before starting to stream individual streams?\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n  return await parseInBatches(file, loaders, options);\n}\n"],"file":"load-in-batches.js"}