{"version":3,"sources":["../../../../src/lib/api/select-loader.js"],"names":["EXT_PATTERN","selectLoader","data","loaders","options","context","loader","selectLoaderSync","nothrow","Error","getNoValidLoaderMessage","Array","isArray","normalizeLoaders","url","type","findLoaderByUrl","findLoaderByContentType","findLoaderByExamingInitialData","message","getFirstCharacters","match","extension","findLoaderByExtension","toLowerCase","extensions","loaderExtension","mimeType","mimeTypes","includes","id","testDataAgainstText","ArrayBuffer","isView","testDataAgainstBinary","buffer","byteOffset","testText","tests","some","test","testBinary","byteLength","magic","getMagicString","length","slice","arrayBuffer","dataView","DataView","i","String","fromCharCode","getUint8"],"mappings":"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","sourcesContent":["import {compareArrayBuffers} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {readFileSlice} from '../../iterator-utils/make-iterator/blob-iterator';\nimport {isBlob} from '../../javascript-utils/is-type';\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\nexport async function selectLoader(data, loaders = [], options = {}, context = {}) {\n  // First make a sync attempt, disabling exceptions\n  let loader = selectLoaderSync(data, loaders, {...options, nothrow: true}, context);\n  if (loader) {\n    return loader;\n  }\n\n  // For Blobs and Files, try to asynchronously read a small initial slice and test again with that\n  // to see if we can detect by initial content\n  if (isBlob(data)) {\n    data = await readFileSlice(data, 0, 10);\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  // no loader available\n  if (!loader && !options.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n// eslint-disable-next-line complexity\nexport function selectLoaderSync(data, loaders = [], options = {}, context = {}) {\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behaviour be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    return normalizeLoader(loaders);\n  }\n\n  // Add registered loaders\n  loaders = [...(loaders || []), ...getRegisteredLoaders()];\n  normalizeLoaders(loaders);\n\n  const {url, type} = getResourceUrlAndType(data);\n\n  let loader = findLoaderByUrl(loaders, url || context.url);\n  loader = loader || findLoaderByContentType(loaders, type);\n  // NOTE: Initial data is not always available (e.g. Response, stream, async iterator)\n  loader = loader || findLoaderByExamingInitialData(loaders, data);\n\n  // no loader available\n  if (!loader && !options.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\nfunction getNoValidLoaderMessage(data) {\n  const {url, type} = getResourceUrlAndType(data);\n\n  let message = 'No valid loader found';\n  if (data) {\n    message += ` data: \"${getFirstCharacters(data)}\", contentType: \"${type}\"`;\n  }\n  if (url) {\n    message += ` url: ${url}`;\n  }\n  return message;\n}\n\nfunction normalizeLoaders(loaders) {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders, url) {\n  // Get extension\n  const match = url && url.match(EXT_PATTERN);\n  const extension = match && match[1];\n  return extension && findLoaderByExtension(loaders, extension);\n}\n\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByContentType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    // Support referring to loaders using the \"unregistered tree\"\n    // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n    if (mimeType === `application/x.${loader.id}`) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByExamingInitialData(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testDataAgainstText(data, loader) {\n  return loader.testText && loader.testText(data);\n}\n\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some(test => testBinary(data, byteOffset, loader, test));\n}\n\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n\n    case 'string':\n      // Magic bytes check: If `test` is a string, check if binary data starts with that strings\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"],"file":"select-loader.js"}