{"version":3,"sources":["../../../../src/lib/api/parse.js"],"names":["parse","data","loaders","options","context","Array","isArray","url","candidateLoaders","loader","parseWithLoader","parseTextSync","dataType","parseText","parseSync"],"mappings":"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","sourcesContent":["import {assert, validateLoaderVersion} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromData} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/context-utils';\nimport parseWithWorker, {canParseWithWorker} from '../loader-utils/parse-with-worker';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\nexport async function parse(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parse no longer accepts final url');\n\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = await selectLoader(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders, url);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateLoaderVersion(loader);\n\n  data = await getArrayBufferOrStringFromData(data, loader);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, data, options, context)) {\n    return await parseWithWorker(loader, data, options, context);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  return assert(false);\n}\n"],"file":"parse.js"}