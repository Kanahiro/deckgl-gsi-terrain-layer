{"version":3,"sources":["../../../../src/lib/api/register-loaders.js"],"names":["getGlobalLoaderRegistry","state","loaderRegistry","registerLoaders","loaders","Array","isArray","loader","normalizedLoader","find","registeredLoader","unshift","getRegisteredLoaders","_unregisterLoaders"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;AAIA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,MAAMC,KAAK,GAAG,wCAAd;AACAA,EAAAA,KAAK,CAACC,cAAN,GAAuBD,KAAK,CAACC,cAAN,IAAwB,EAA/C;AACA,SAAOD,KAAK,CAACC,cAAb;AACD,CAJD;;AAMO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,MAAMF,cAAc,GAAGF,uBAAuB,EAA9C;AAEAI,EAAAA,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAA7C;;AAHuC,6CAKlBA,OALkB;AAAA;;AAAA;AAAA;AAAA,UAK5BG,MAL4B;AAMrC,UAAMC,gBAAgB,GAAG,sCAAgBD,MAAhB,CAAzB;;AACA,UAAI,CAACL,cAAc,CAACO,IAAf,CAAoB,UAAAC,gBAAgB;AAAA,eAAIF,gBAAgB,KAAKE,gBAAzB;AAAA,OAApC,CAAL,EAAqF;AAEnFR,QAAAA,cAAc,CAACS,OAAf,CAAuBH,gBAAvB;AACD;AAVoC;;AAKvC,wDAA8B;AAAA;AAM7B;AAXsC;AAAA;AAAA;AAAA;AAAA;AAYxC;;AAEM,SAASI,oBAAT,GAAgC;AACrC,SAAOZ,uBAAuB,EAA9B;AACD;;AAGM,SAASa,kBAAT,GAA8B;AACnC,MAAMZ,KAAK,GAAG,wCAAd;AACAA,EAAAA,KAAK,CAACC,cAAN,GAAuB,EAAvB;AACD","sourcesContent":["import {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getGlobalLoaderState} from '../loader-utils/option-utils';\n\n// Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n// This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find(registeredLoader => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\n\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\n\n// For testing\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n"],"file":"register-loaders.js"}