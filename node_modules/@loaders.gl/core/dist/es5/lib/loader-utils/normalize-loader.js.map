{"version":3,"sources":["../../../../src/lib/loader-utils/normalize-loader.js"],"names":["isLoaderObject","loader","Array","isArray","hasParser","parseTextSync","parseSync","parse","parseStream","parseInBatches","loaderOptions","options","id","workerUrl","normalizeLoader","extension","extensions","length","parseText","text","binary"],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAEO,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AACrC,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,KAAP;AACD;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzBA,IAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AACD;;AAED,MAAIG,SAAS,GACXH,MAAM,CAACI,aAAP,IACAJ,MAAM,CAACK,SADP,IAEAL,MAAM,CAACM,KAFP,IAGAN,MAAM,CAACO,WAHP,IAIAP,MAAM,CAACQ,cALT;AAOA,MAAMC,aAAa,GAAGT,MAAM,CAACU,OAAP,IAAkBV,MAAM,CAACU,OAAP,CAAeV,MAAM,CAACW,EAAtB,CAAxC;AACAR,EAAAA,SAAS,GAAGA,SAAS,IAAKM,aAAa,IAAIA,aAAa,CAACG,SAAzD;AAEA,SAAOT,SAAP;AACD;;AAEM,SAASU,eAAT,CAAyBb,MAAzB,EAAiC;AAItC,2BAAOA,MAAP,EAAe,aAAf;AACA,2BAAOD,cAAc,CAACC,MAAD,CAArB,EAA+B,gBAA/B;AAKA,MAAIU,OAAJ;;AACA,MAAIT,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzBU,IAAAA,OAAO,GAAGV,MAAM,CAAC,CAAD,CAAhB;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AACAA,IAAAA,MAAM,mCACDA,MADC;AAEJU,MAAAA,OAAO,kCAAMV,MAAM,CAACU,OAAb,GAAyBA,OAAzB;AAFH,MAAN;AAID;;AAKD,MAAIV,MAAM,CAACc,SAAX,EAAsB;AACpBd,IAAAA,MAAM,CAACe,UAAP,GAAoBf,MAAM,CAACe,UAAP,IAAqBf,MAAM,CAACc,SAAhD;AACA,WAAOd,MAAM,CAACc,SAAd;AACD;;AAGD,MAAI,CAACb,KAAK,CAACC,OAAN,CAAcF,MAAM,CAACe,UAArB,CAAL,EAAuC;AACrCf,IAAAA,MAAM,CAACe,UAAP,GAAoB,CAACf,MAAM,CAACe,UAAR,CAApB;AACD;;AAED,2BAAOf,MAAM,CAACe,UAAP,IAAqBf,MAAM,CAACe,UAAP,CAAkBC,MAAlB,GAA2B,CAAhD,IAAqDhB,MAAM,CAACe,UAAP,CAAkB,CAAlB,CAA5D;;AAKA,MAAIf,MAAM,CAACI,aAAP,IAAwBJ,MAAM,CAACiB,SAAnC,EAA8C;AAC5CjB,IAAAA,MAAM,CAACkB,IAAP,GAAc,IAAd;AACD;;AAED,MAAI,CAAClB,MAAM,CAACkB,IAAZ,EAAkB;AAChBlB,IAAAA,MAAM,CAACmB,MAAP,GAAgB,IAAhB;AACD;;AAED,SAAOnB,MAAP;AACD","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\n\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n\n  const loaderOptions = loader.options && loader.options[loader.id];\n  hasParser = hasParser || (loaderOptions && loaderOptions.workerUrl);\n\n  return hasParser;\n}\n\nexport function normalizeLoader(loader) {\n  // This error is fairly easy to trigger by mixing up import statments etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE LOADER.EXTENSIONS\n\n  // Remove `extension`` prop, replace with `extensions``\n  if (loader.extension) {\n    loader.extensions = loader.extensions || loader.extension;\n    delete loader.extension;\n  }\n\n  // Ensure loader.extensions is an array\n  if (!Array.isArray(loader.extensions)) {\n    loader.extensions = [loader.extensions];\n  }\n\n  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);\n\n  // NORMALIZE text and binary flags\n\n  // Ensure at least one of text/binary flags are properly set\n  if (loader.parseTextSync || loader.parseText) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}\n"],"file":"normalize-loader.js"}