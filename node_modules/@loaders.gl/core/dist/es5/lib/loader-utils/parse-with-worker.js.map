{"version":3,"sources":["../../../../src/lib/loader-utils/parse-with-worker.js"],"names":["VERSION","canParseWithWorker","loader","data","options","context","WorkerFarm","isSupported","loaderOptions","id","worker","localWorkerUrl","workerUrl","useWorker","parseWithWorker","workerSource","workerName","name","workerFarm","getWorkerFarm","JSON","parse","stringify","warning","version","process","arraybuffer","source","type","_workerFarm","props","maxConcurrency","onDebug","onMessage","onWorkerMessage","setProps","resolve","reject","result","url","postMessage","message"],"mappings":"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","sourcesContent":["import {_WorkerFarm as WorkerFarm, toArrayBuffer, getTransferList} from '@loaders.gl/loader-utils';\nimport {parse} from '../api/parse';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport function canParseWithWorker(loader, data, options, context) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  const loaderOptions = options && options[loader.id];\n  if (\n    (options.worker === 'local' && loaderOptions && loaderOptions.localWorkerUrl) ||\n    (options.worker && loaderOptions && loaderOptions.workerUrl)\n  ) {\n    return loader.useWorker ? loader.useWorker(options) : true;\n  }\n  return false;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createWorker in @loaders.gl/loader-utils.\n */\nexport default function parseWithWorker(loader, data, options, context) {\n  const {worker} = options || {};\n  const loaderOptions = (options && options[loader.id]) || {};\n  const workerUrl = worker === 'local' ? loaderOptions.localWorkerUrl : loaderOptions.workerUrl;\n\n  // Mark as URL\n  const workerSource = `url(${workerUrl})`;\n  const workerName = loader.name;\n\n  const workerFarm = getWorkerFarm(options);\n\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n\n  const warning = loader.version !== VERSION ? `(core version ${VERSION})` : '';\n\n  return workerFarm.process(workerSource, `${workerName}-worker@${loader.version}${warning}`, {\n    arraybuffer: toArrayBuffer(data),\n    options,\n    source: `loaders.gl@${VERSION}`, // Lets worker ignore unrelated messages\n    type: 'parse' // For future extension\n  });\n}\n\nlet _workerFarm = null;\n\n// Create a single instance of a worker farm\nfunction getWorkerFarm(options = {}) {\n  const props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({onMessage: onWorkerMessage});\n  }\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nasync function onWorkerMessage({worker, data, resolve, reject}) {\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'parse':\n      try {\n        const result = await parse(data.arraybuffer, data.options, data.url);\n        worker.postMessage({type: 'parse-done', id: data.id, result}, getTransferList(result));\n      } catch (error) {\n        worker.postMessage({type: 'parse-error', id: data.id, message: error.message});\n      }\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n    // TODO - is this not an error case? Log a warning?\n  }\n}\n"],"file":"parse-with-worker.js"}