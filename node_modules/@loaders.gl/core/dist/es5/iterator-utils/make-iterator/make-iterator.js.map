{"version":3,"sources":["../../../../src/iterator-utils/make-iterator/make-iterator.js"],"names":["makeIterator","data","options","ArrayBuffer","body"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAaO,SAASA,YAAT,CAAsBC,IAAtB,EAA0C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC/C,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAE5B,WAAO,wCAAmBA,IAAnB,EAAyBC,OAAzB,CAAP;AACD;;AACD,MAAID,IAAI,YAAYE,WAApB,EAAiC;AAC/B,WAAO,kDAAwBF,IAAxB,EAA8BC,OAA9B,CAAP;AACD;;AACD,MAAI,oBAAOD,IAAP,CAAJ,EAAkB;AAChB,WAAO,oCAAiBA,IAAjB,EAAuBC,OAAvB,CAAP;AACD;;AACD,MAAI,8BAAiBD,IAAjB,CAAJ,EAA4B;AAC1B,WAAO,wCAAmBA,IAAnB,CAAP;AACD;;AACD,MAAI,wBAAWA,IAAX,CAAJ,EAAsB;AACpB,WAAO,wCAAmBA,IAAI,CAACG,IAAxB,CAAP;AACD;;AACD,SAAO,yBAAO,KAAP,CAAP;AACD","sourcesContent":["import {makeStringIterator} from './string-iterator';\nimport {makeArrayBufferIterator} from './array-buffer-iterator';\nimport {makeBlobIterator} from './blob-iterator';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {makeStreamIterator} from './stream-iterator';\nimport {isBlob, isReadableStream, isResponse} from '../../javascript-utils/is-type';\n\n/**\n * Returns an iterator that breaks its input into chunks and yields them one-by-one.\n *\n * @param data a big `ArrayBuffer`, `Blob` or string, or a stream.\n * @param {object} options\n * @param {number} [options.chunkSize]  max number of bytes per chunk. chunkSize is ignored for streams.\n * @returns iterator or async iterator that yields chunks of specified size.\n *\n * This function can e.g. be used to enable data sources that can only be read atomically\n * (such as `Blob` and `File` via `FileReader`) to still be parsed in batches.\n */\nexport function makeIterator(data, options = {}) {\n  if (typeof data === 'string') {\n    // Note: Converts string chunks to binary\n    return makeStringIterator(data, options);\n  }\n  if (data instanceof ArrayBuffer) {\n    return makeArrayBufferIterator(data, options);\n  }\n  if (isBlob(data)) {\n    return makeBlobIterator(data, options);\n  }\n  if (isReadableStream(data)) {\n    return makeStreamIterator(data);\n  }\n  if (isResponse(data)) {\n    return makeStreamIterator(data.body);\n  }\n  return assert(false);\n}\n"],"file":"make-iterator.js"}