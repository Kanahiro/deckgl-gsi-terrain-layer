{"version":3,"sources":["../../../../src/iterator-utils/make-iterator/array-buffer-iterator.js"],"names":["makeArrayBufferIterator","arrayBuffer","options","chunkSize","byteOffset","byteLength","chunkByteLength","Math","min","chunk","ArrayBuffer","sourceArray","Uint8Array","chunkArray","set"],"mappings":";;;;;;;;;;;2CAAiBA,uB;;AAAV,SAAUA,uBAAV,CAAkCC,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA+CC,UAAAA,OAA/C,2DAAyD,EAAzD;AAAA,+BAC4BA,OAD5B,CACEC,SADF,EACEA,SADF,mCACc,MAAM,IADpB;AAGDC,UAAAA,UAHC,GAGY,CAHZ;;AAAA;AAAA,gBAKEA,UAAU,GAAGH,WAAW,CAACI,UAL3B;AAAA;AAAA;AAAA;;AAOGC,UAAAA,eAPH,GAOqBC,IAAI,CAACC,GAAL,CAASP,WAAW,CAACI,UAAZ,GAAyBD,UAAlC,EAA8CD,SAA9C,CAPrB;AAQGM,UAAAA,KARH,GAQW,IAAIC,WAAJ,CAAgBJ,eAAhB,CARX;AAWGK,UAAAA,WAXH,GAWiB,IAAIC,UAAJ,CAAeX,WAAf,EAA4BG,UAA5B,EAAwCE,eAAxC,CAXjB;AAYGO,UAAAA,UAZH,GAYgB,IAAID,UAAJ,CAAeH,KAAf,CAZhB;AAaHI,UAAAA,UAAU,CAACC,GAAX,CAAeH,WAAf;AAGAP,UAAAA,UAAU,IAAIE,eAAd;AAhBG;AAiBH,iBAAMG,KAAN;;AAjBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["export function* makeArrayBufferIterator(arrayBuffer, options = {}) {\n  const {chunkSize = 256 * 1024} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"],"file":"array-buffer-iterator.js"}