{"version":3,"sources":["../../../../src/tileset/helpers/bounding-volume.js"],"names":["defined","x","undefined","scratchScale","Vector3","scratchNorthWest","scratchSouthEast","scratchTransform","Matrix4","createBoundingVolume","boundingVolumeHeader","transform","result","box","createBox","region","west","south","east","north","minHeight","maxHeight","northWest","Ellipsoid","WGS84","cartographicToCartesian","southEast","centerInCartesian","addVectors","multiplyScalar","radius","subVectors","len","createSphere","sphere","Error","center","xAxis","transformAsVector","slice","yAxis","zAxis","halfAxes","Matrix3","OrientedBoundingBox","scale","getScale","uniformScale","Math","max","BoundingSphere"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Matrix3, Matrix4, degrees} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// const scratchProjectedBoundingSphere = new BoundingSphere();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n// const scratchMatrix = new Matrix3();\nconst scratchScale = new Vector3();\nconst scratchNorthWest = new Vector3();\nconst scratchSouthEast = new Vector3();\n// const scratchRectangle = new Rectangle();\n// const scratchOrientedBoundingBox = new OrientedBoundingBox();\nconst scratchTransform = new Matrix4();\n\n/**\n * Create a bounding volume from the tile's bounding volume header.\n * @param {Object} boundingVolumeHeader The tile's bounding volume header.\n * @param {Matrix4} transform The transform to apply to the bounding volume.\n * @param [result] The object onto which to store the result.\n * @returns The modified result parameter or a new TileBoundingVolume instance if none was provided.\n */\nexport function createBoundingVolume(boundingVolumeHeader, transform, result) {\n  assert(boundingVolumeHeader, '3D Tile: boundingVolume must be defined');\n\n  // boundingVolume schema:\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/blob/master/specification/schema/boundingVolume.schema.json\n  if (boundingVolumeHeader.box) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n  if (boundingVolumeHeader.region) {\n    // [west, south, east, north, minimum height, maximum height]\n    // Latitudes and longitudes are in the WGS 84 datum as defined in EPSG 4979 and are in radians.\n    // Heights are in meters above (or below) the WGS 84 ellipsoid.\n    const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;\n\n    const northWest = Ellipsoid.WGS84.cartographicToCartesian(\n      [degrees(west), degrees(north), minHeight],\n      scratchNorthWest\n    );\n    const southEast = Ellipsoid.WGS84.cartographicToCartesian(\n      [degrees(east), degrees(south), maxHeight],\n      scratchSouthEast\n    );\n    const centerInCartesian = new Vector3().addVectors(northWest, southEast).multiplyScalar(0.5);\n    const radius = new Vector3().subVectors(northWest, southEast).len() / 2.0;\n\n    // TODO improve region boundingVolume\n    // for now, create a sphere as the boundingVolume instead of box\n    return createSphere(\n      [centerInCartesian[0], centerInCartesian[1], centerInCartesian[2], radius],\n      new Matrix4()\n    );\n  }\n\n  if (boundingVolumeHeader.sphere) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n\n  throw new Error('3D Tile: boundingVolume must contain a sphere, region, or box');\n}\n\nfunction createBox(box, transform, result) {\n  // box: An array of 12 numbers that define an oriented bounding box.\n  // The first three elements define the x, y, and z values for the center of the box.\n  // The next three elements (with indices 3, 4, and 5) define the x axis direction and half-length.\n  // The next three elements (indices 6, 7, and 8) define the y axis direction and half-length.\n  // The last three elements (indices 9, 10, and 11) define the z axis direction and half-length.\n  const center = new Vector3(box[0], box[1], box[2]);\n  transform.transform(center, center);\n\n  const xAxis = transform.transformAsVector(box.slice(3, 6));\n  const yAxis = transform.transformAsVector(box.slice(6, 9));\n  const zAxis = transform.transformAsVector(box.slice(9, 12));\n  const halfAxes = new Matrix3([\n    xAxis[0],\n    xAxis[1],\n    xAxis[2],\n    yAxis[0],\n    yAxis[1],\n    yAxis[2],\n    zAxis[0],\n    zAxis[1],\n    zAxis[2]\n  ]);\n\n  if (defined(result)) {\n    result.center = center;\n    result.halfAxes = halfAxes;\n    return result;\n  }\n\n  return new OrientedBoundingBox(center, halfAxes);\n}\n\n/*\nfunction createBoxFromTransformedRegion(region, transform, initialTransform, result) {\n  const rectangle = Rectangle.unpack(region, 0, scratchRectangle);\n  const minimumHeight = region[4];\n  const maximumHeight = region[5];\n\n  const orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    Ellipsoid.WGS84,\n    scratchOrientedBoundingBox\n  );\n  const center = orientedBoundingBox.center;\n  const halfAxes = orientedBoundingBox.halfAxes;\n\n  // A region bounding volume is not transformed by the transform in the tileset JSON,\n  // but may be transformed by additional transforms applied in Cesium.\n  // This is why the transform is calculated as the difference between the initial transform and the current transform.\n  transform = Matrix4.multiplyTransformation(\n    transform,\n    Matrix4.inverseTransformation(initialTransform, scratchTransform),\n    scratchTransform\n  );\n  center = Matrix4.multiplyByPoint(transform, center, center);\n  const rotationScale = Matrix4.getRotation(transform, scratchMatrix);\n  halfAxes = Matrix3.multiply(rotationScale, halfAxes, halfAxes);\n\n  if (defined(result) && result instanceof TileOrientedBoundingBox) {\n    result.update(center, halfAxes);\n    return result;\n  }\n\n  return new TileOrientedBoundingBox(center, halfAxes);\n}\n\nfunction createRegion(region, transform, initialTransform, result) {\n  if (!Matrix4.equalsEpsilon(transform, initialTransform, CesiumMath.EPSILON8)) {\n    return createBoxFromTransformedRegion(region, transform, initialTransform, result);\n  }\n\n  if (defined(result)) {\n    return result;\n  }\n\n  const rectangleRegion = Rectangle.unpack(region, 0, scratchRectangle);\n\n  return new TileBoundingRegion({\n    rectangle: rectangleRegion,\n    minimumHeight: region[4],\n    maximumHeight: region[5]\n  });\n}\n*/\n\nfunction createSphere(sphere, transform, result) {\n  // Find the transformed center\n  const center = new Vector3(sphere[0], sphere[1], sphere[2]);\n  transform.transform(center, center);\n  const scale = transform.getScale(scratchScale);\n\n  const uniformScale = Math.max(Math.max(scale[0], scale[1]), scale[2]);\n  const radius = sphere[3] * uniformScale;\n\n  if (defined(result)) {\n    result.center = center;\n    result.radius = radius;\n    return result;\n  }\n\n  return new BoundingSphere(center, radius);\n}\n"],"file":"bounding-volume.js"}