{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tilset-traverser.js"],"names":["load","TilesetTraverser","lodJudge","TileHeader","I3STileManager","I3STilesetTraverser","constructor","options","_tileManager","shouldRefine","tile","frameState","_lodJudge","updateChildTiles","children","header","childTiles","tileset","child","childTile","find","t","id","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","i3s","fetchOptions","isTileHeader","loadContent","basePath","push","_frameNumber","frameNumber","executeTraversal"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {lodJudge} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    // TODO refactor loaJudge\n    tile._lodJudge = lodJudge(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find(t => t.id === child.id);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(child.id);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            child.id,\n            header => this._onTileLoad(header, tile),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(child.id, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      i3s: {\n        ...tileset.fetchOptions,\n        isTileHeader: true,\n        loadContent: false\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  _onTileLoad(header, tile) {\n    const basePath = this.options.basePath;\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, basePath);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"file":"i3s-tilset-traverser.js"}