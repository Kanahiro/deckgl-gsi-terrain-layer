{"version":3,"sources":["../../../../src/tileset/traversers/tileset-traverser.js"],"names":["ManagedArray","TILE_REFINEMENT","assert","DEFAULT_OPTIONS","loadSiblings","skipLevelOfDetail","maximumScreenSpaceError","TilesetTraverser","constructor","options","_traversalStack","_emptyTraversalStack","_frameNumber","root","selectedTiles","requestedTiles","emptyTiles","traverse","frameState","reset","updateTile","frameNumber","executeTraversal","stack","push","length","tile","pop","shouldRefine","canTraverse","updateChildTiles","updateAndPushChildren","parent","parentRefines","Boolean","_shouldRefine","stoppedRefining","hasRenderContent","id","loadTile","selectTile","refine","ADD","REPLACE","touchTile","onTraversalEnd","children","child","sort","compareDistanceToCamera","checkRefines","hasVisibleChild","isVisibleAndInRequestVolume","find","delete","childRefines","_inRequestVolume","executeEmptyTraversal","contentAvailable","updateTileVisibility","shouldSelectTile","_selectedFrame","shouldLoadTile","_requestedFrame","_priority","getPriority","tileset","_cache","touch","_touchedFrame","useParentMetric","ignoreVisibility","hasChildren","hasTilesetContent","contentExpired","hasUnloadedContent","screenSpaceError","_screenSpaceError","getScreenSpaceError","updateVisibility","b","a","_distanceToCamera","useParentScreenSpaceError","rootScreenSpaceError","anyChildrenVisible","anyVisible","allDescendantsLoaded","filter","c"],"mappings":"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","sourcesContent":["import ManagedArray from '../../utils/managed-array';\nimport {TILE_REFINEMENT} from '../../constants';\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport const DEFAULT_OPTIONS = {\n  loadSiblings: false,\n  skipLevelOfDetail: false,\n  maximumScreenSpaceError: 2\n};\n\nexport default class TilesetTraverser {\n  // TODO nested props\n  constructor(options) {\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    // TRAVERSAL\n    // temporary storage to hold the traversed tiles during a traversal\n    this._traversalStack = new ManagedArray();\n    this._emptyTraversalStack = new ManagedArray();\n\n    // set in every traverse cycle\n    this._frameNumber = null;\n\n    // fulfill in traverse call\n    this.root = null;\n\n    // RESULT\n    // tiles should be rendered\n    this.selectedTiles = {};\n    // tiles should be loaded from server\n    this.requestedTiles = {};\n    // tiles does not have render content\n    this.emptyTiles = {};\n  }\n\n  // tiles should be visible\n  traverse(root, frameState, options) {\n    this.root = root; // for root screen space error\n    this.options = {...this.options, ...options};\n\n    // reset result\n    this.reset();\n\n    // update tile (visibility and expiration)\n    this.updateTile(root, frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.executeTraversal(root, frameState);\n  }\n\n  reset() {\n    this.requestedTiles = {};\n    this.selectedTiles = {};\n    this.emptyTiles = {};\n    this._traversalStack.reset();\n    this._emptyTraversalStack.reset();\n  }\n\n  // execute traverse\n  // Depth-first traversal that traverses all visible tiles and marks tiles for selection.\n  // If skipLevelOfDetail is off then a tile does not refine until all children are loaded.\n  // This is the traditional replacement refinement approach and is called the base traversal.\n  // Tiles that have a greater screen space error than the base screen space error are part of the base traversal,\n  // all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree\n  // and rendering children and parent tiles simultaneously.\n  /* eslint-disable-next-line complexity, max-statements */\n  executeTraversal(root, frameState) {\n    // stack to store traversed tiles, only visible tiles should be added to stack\n    // visible: visible in the current view frustum\n    const stack = this._traversalStack;\n\n    stack.push(root);\n    while (stack.length > 0) {\n      // 1. pop tile\n      const tile = stack.pop();\n\n      // 2. check if tile needs to be refine, needs refine if a tile's LoD is not sufficient and tile has available children (available content)\n      let shouldRefine = false;\n      if (this.canTraverse(tile, frameState)) {\n        this.updateChildTiles(tile, frameState);\n        shouldRefine = this.updateAndPushChildren(tile, frameState, stack);\n      }\n\n      // 3. decide if should render (select) this tile\n      //   - tile does not have render content\n      //   - tile has render content and tile is `add` type (pointcloud)\n      //   - tile has render content and tile is `replace` type (photogrammetry) and can't refine any further\n      const parent = tile.parent;\n      const parentRefines = Boolean(!parent || parent._shouldRefine);\n      const stoppedRefining = !shouldRefine;\n\n      if (!tile.hasRenderContent) {\n        this.emptyTiles[tile.id] = tile;\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n        // additive tiles\n      } else if (tile.refine === TILE_REFINEMENT.ADD) {\n        // Additive tiles are always loaded and selected\n        this.loadTile(tile, frameState);\n        this.selectTile(tile, frameState);\n\n        // replace tiles\n      } else if (tile.refine === TILE_REFINEMENT.REPLACE) {\n        // Always load tiles in the base traversal\n        // Select tiles that can't refine further\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n      }\n\n      // 3. update cache, most recent touched tiles have higher priority to be fetched from server\n      this.touchTile(tile, frameState);\n\n      // 4. update tile refine prop and parent refinement status to trickle down to the descendants\n      tile._shouldRefine = shouldRefine && parentRefines;\n    }\n\n    if (this.options.onTraversalEnd) {\n      this.options.onTraversalEnd(frameState);\n    }\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.children;\n    for (const child of children) {\n      this.updateTile(child, frameState);\n    }\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAndPushChildren(tile, frameState, stack) {\n    const {loadSiblings, skipLevelOfDetail} = this.options;\n\n    const children = tile.children;\n\n    // sort children tiles\n    children.sort(this.compareDistanceToCamera);\n\n    // For traditional replacement refinement only refine if all children are loaded.\n    // Empty tiles are exempt since it looks better if children stream in as they are loaded to fill the empty space.\n    const checkRefines =\n      !skipLevelOfDetail && tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent;\n\n    let hasVisibleChild = false;\n    for (const child of children) {\n      if (child.isVisibleAndInRequestVolume) {\n        if (stack.find(child)) {\n          stack.delete(child);\n        }\n        stack.push(child);\n        hasVisibleChild = true;\n      } else if (checkRefines || loadSiblings) {\n        // Keep non-visible children loaded since they are still needed before the parent can refine.\n        // Or loadSiblings is true so always load tiles regardless of visibility.\n        this.loadTile(child, frameState);\n        this.touchTile(child, frameState);\n      }\n\n      if (checkRefines) {\n        let childRefines;\n        if (!child._inRequestVolume) {\n          childRefines = false;\n        } else if (!child.hasRenderContent) {\n          childRefines = this.executeEmptyTraversal(child, frameState);\n        } else {\n          childRefines = child.contentAvailable;\n        }\n\n        if (!childRefines) {\n          return childRefines;\n        }\n      }\n    }\n\n    return hasVisibleChild;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTile(tile, frameState) {\n    this.updateTileVisibility(tile, frameState);\n  }\n\n  // tile to render in the browser\n  selectTile(tile, frameState) {\n    if (this.shouldSelectTile(tile, frameState)) {\n      // The tile can be selected right away and does not require traverseAndSelect\n      tile._selectedFrame = frameState.frameNumber;\n      this.selectedTiles[tile.id] = tile;\n    }\n  }\n\n  // tile to load from server\n  loadTile(tile, frameState) {\n    if (this.shouldLoadTile(tile, frameState)) {\n      tile._requestedFrame = frameState.frameNumber;\n      tile._priority = this.getPriority(tile);\n      this.requestedTiles[tile.id] = tile;\n    }\n  }\n\n  // cache tile\n  touchTile(tile, frameState) {\n    tile.tileset._cache.touch(tile);\n    tile._touchedFrame = frameState.frameNumber;\n  }\n\n  // tile should be visible\n  // tile should have children\n  // tile LoD (level of detail) is not sufficient under current viewport\n  canTraverse(tile, frameState, useParentMetric = false, ignoreVisibility = false) {\n    if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {\n      return false;\n    }\n\n    if (!tile.hasChildren) {\n      return false;\n    }\n\n    // cesium specific\n    if (tile.hasTilesetContent) {\n      // Traverse external this to visit its root tile\n      // Don't traverse if the subtree is expired because it will be destroyed\n      return !tile.contentExpired;\n    }\n\n    return this.shouldRefine(tile, frameState, useParentMetric);\n  }\n\n  shouldLoadTile(tile, frameState) {\n    // if request tile is in current frame\n    // and has unexpired render content\n    return tile.hasUnloadedContent || tile.contentExpired;\n  }\n\n  shouldSelectTile(tile, frameState) {\n    // if select tile is in current frame\n    // and content available\n    return tile.contentAvailable && !this.options.skipLevelOfDetail;\n  }\n\n  // Decide if tile LoD (level of detail) is not sufficient under current viewport\n  shouldRefine(tile, frameState, useParentMetric) {\n    let screenSpaceError = tile._screenSpaceError;\n    if (useParentMetric) {\n      screenSpaceError = tile.getScreenSpaceError(frameState, true);\n    }\n\n    return screenSpaceError > this.options.maximumScreenSpaceError;\n  }\n\n  updateTileVisibility(tile, frameState) {\n    tile.updateVisibility(frameState);\n  }\n\n  // UTILITIES\n\n  compareDistanceToCamera(b, a) {\n    return b._distanceToCamera - a._distanceToCamera;\n  }\n\n  // If skipLevelOfDetail is off try to load child tiles as soon as possible so that their parent can refine sooner.\n  // Additive tiles are prioritized by distance because it subjectively looks better.\n  // Replacement tiles are prioritized by screen space error.\n  // A tileset that has both additive and replacement tiles may not prioritize tiles as effectively since SSE and distance\n  // are different types of values. Maybe all priorities need to be normalized to 0-1 range.\n  // TODO move to tile-3d-header\n  getPriority(tile) {\n    const {options} = this;\n    switch (tile.refine) {\n      case TILE_REFINEMENT.ADD:\n        return tile._distanceToCamera;\n\n      case TILE_REFINEMENT.REPLACE:\n        const {parent} = tile;\n        const useParentScreenSpaceError =\n          parent &&\n          (!options.skipLevelOfDetail ||\n            tile._screenSpaceError === 0.0 ||\n            parent.hasTilesetContent);\n        const screenSpaceError = useParentScreenSpaceError\n          ? parent._screenSpaceError\n          : tile._screenSpaceError;\n        const rootScreenSpaceError = this.root._screenSpaceError;\n        return rootScreenSpaceError - screenSpaceError; // Map higher SSE to lower values (e.g. root tile is highest priority)\n\n      default:\n        return assert(false);\n    }\n  }\n\n  anyChildrenVisible(tile, frameState) {\n    let anyVisible = false;\n    for (const child of tile.children) {\n      child.updateVisibility(frameState);\n      anyVisible = anyVisible || child.isVisibleAndInRequestVolume;\n    }\n    return anyVisible;\n  }\n\n  // TODO revisit this empty traversal logic\n  // Depth-first traversal that checks if all nearest descendants with content are loaded.\n  // Ignores visibility.\n  executeEmptyTraversal(root, frameState) {\n    let allDescendantsLoaded = true;\n    const stack = this._emptyTraversalStack;\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n\n      this.updateTile(tile, frameState);\n\n      if (!tile.isVisibleAndInRequestVolume) {\n        // Load tiles that aren't visible since they are still needed for the parent to refine\n        this.loadTile(tile, frameState);\n        this.touchTile(tile, frameState);\n      }\n\n      // Only traverse if the tile is empty - traversal stop at descendants with content\n      const traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);\n\n      // Traversal stops but the tile does not have content yet.\n      // There will be holes if the parent tries to refine to its children, so don't refine.\n      if (!traverse && !tile.contentAvailable) {\n        allDescendantsLoaded = false;\n      }\n\n      if (traverse) {\n        const children = tile.children.filter(c => c);\n        for (const child of children) {\n          // eslint-disable-next-line max-depth\n          if (stack.find(child)) {\n            stack.delete(child);\n          }\n          stack.push(child);\n        }\n      }\n    }\n\n    return allDescendantsLoaded;\n  }\n}\n\n// TODO\n// enable expiration\n// enable optimization hint\n"],"file":"tileset-traverser.js"}