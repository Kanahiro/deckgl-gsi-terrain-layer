{"version":3,"sources":["../../../src/tileset/tileset-3d.js"],"names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","assert","path","TilesetCache","calculateTransformProps","getFrameState","getZoomFromBoundingVolume","Tile3D","Tileset3DTraverser","TilesetTraverser","I3SetTraverser","TILESET_TYPE","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","getQueryParamString","queryParams","queryParamStrings","key","Object","keys","push","length","join","DEFAULT_OPTIONS","ellipsoid","WGS84","modelMatrix","throttleRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","tile","message","url","maximumScreenSpaceError","Tileset3D","constructor","json","options","tileset","loader","type","basePath","dirname","lodMetricType","lodMetricValue","refine","root","fetchOptions","headers","token","cartographicCenter","cartesianCenter","zoom","boundingVolume","_traverser","_initializeTraverser","_cache","_requestScheduler","_frameNumber","_updateFrameNumber","_pendingCount","_tiles","selectedTiles","_emptyTiles","_requestedTiles","_selectedTilesToStyle","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","id","_initializeStats","_hasMixedContent","_maximumScreenSpaceError","_properties","undefined","_extensionsUsed","_gltfUpAxis","_dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","description","_defaultGeometrySchema","_initializeTileSet","isLoaded","destroy","_destroy","tiles","values","getTileUrl","tilePath","isDataUrl","startsWith","update","viewport","reset","_frameState","traverse","_onTraversalEnd","_tilesChanged","requestedTiles","emptyTiles","_loadTiles","_unloadTiles","_updateStats","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","frameState","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","tilesetJson","_initializeTileHeaders","TILES3D","_initializeCesiumTileset","I3S","_initializeI3STileset","_calculateViewProps","center","console","warn","cartesianToCartographic","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","loaded","_onStartTileLoading","loadContent","error","_onTileLoadError","_onEndTileLoading","_onTileLoad","toString","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","Error","version","v","tilesetVersion","attributions","properties","geometricError","extensionsUsed","store","defaultGeometrySchema","hasExtension","extensionName","Boolean","indexOf"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {RequestScheduler, assert, path} from '@loaders.gl/loader-utils';\n\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tilset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n\nconst DEFAULT_OPTIONS = {\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to true to enable experimental request throttling, for improved performance\n  throttleRequests: false,\n\n  maximumMemoryUsage: 32,\n\n  // Indicates this a tile's content was loaded\n  onTileLoad: () => {},\n  // Indicates this a tile's content was unloaded\n  onTileUnload: () => {},\n  onTileError: (tile, message, url) => {},\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8\n  // dynamicScreenSpaceError: false,\n  // dynamicScreenSpaceErrorDensity: 0.00278,\n  // dynamicScreenSpaceErrorFactor: 4.0,\n  // Optimization option. Determines if level of detail skipping should be applied during the traversal.\n  // skipLevelOfDetail: false,\n  // The screen space error this must be reached before skipping levels of detail.\n  // baseScreenSpaceError: 1024\n};\n\nexport default class Tileset3D {\n  // eslint-disable-next-line max-statements\n  constructor(json, options = {}) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    // TODO add to loader context?\n    this.fetchOptions = this.options.fetchOptions || {};\n    if (this.options.headers) {\n      this.fetchOptions.headers = this.options.headers;\n    }\n    if (this.options.token) {\n      this.fetchOptions.token = this.options.token;\n    }\n\n    this.root = null;\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n    // increase when tiles selected for rendering changed\n    this._updateFrameNumber = 0;\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n\n    this._queryParams = {};\n    this._queryParamsString = null;\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // TODO CESIUM specific\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = this.options.maximumScreenSpaceError;\n    // EXTRACTED FROM TILESET\n    this._properties = undefined; // Metadata for per-model/point/etc properties\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description;\n\n    // TODO I3S Specific\n    this._defaultGeometrySchema = [];\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  get tiles() {\n    return Object.values(this._tiles);\n  }\n\n  getTileUrl(tilePath) {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  update(viewport) {\n    this._cache.reset();\n    this._frameNumber++;\n    this._frameState = getFrameState(viewport, this._frameNumber);\n    this._traverser.traverse(this.root, this._frameState, this.options);\n  }\n\n  _onTraversalEnd() {\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    if (this._tilesChanged(this.selectedTiles, selectedTiles)) {\n      this._updateFrameNumber++;\n    }\n\n    this.selectedTiles = selectedTiles;\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n    this._requestedTiles = Object.values(this._traverser.requestedTiles);\n    this._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this._loadTiles(this._frameState);\n    this._unloadTiles();\n    this._updateStats();\n\n    return this._updateFrameNumber;\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map(t => t.id));\n    const set2 = new Set(selectedTiles.map(t => t.id));\n    let changed = oldSelectedTiles.filter(x => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter(x => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles(frameState) {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        this._loadTile(tile, frameState);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset(tilesetJson);\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader, basePath); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop();\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile, basePath);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile, frameState) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent(frameState);\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, tileset => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= tile.content.byteLength || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description;\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset(tilesetJson) {\n    if ('token' in this.options) {\n      this._queryParams.token = this.options.token;\n    }\n    // Initialize default Geometry schema\n    this._defaultGeometrySchema = tilesetJson.store.defaultGeometrySchema;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  get queryParams() {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n}\n"],"file":"tileset-3d.js"}