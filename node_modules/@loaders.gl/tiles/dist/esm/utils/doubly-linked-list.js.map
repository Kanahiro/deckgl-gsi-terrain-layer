{"version":3,"sources":["../../../src/utils/doubly-linked-list.js"],"names":["DoublyLinkedListNode","DoublyLinkedList","head","tail","_length","item","node","next","previous","nextNode","remove","_insert","oldNodeNext"],"mappings":";;AAGA,OAAOA,oBAAP,MAAiC,kCAAjC;;IAOqBC,gB;AACnB,8BAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,OAAL,GAAe,CAAf;AACD;;;;wBAWGC,I,EAAM;AACR,UAAMC,IAAI,GAAG,IAAIN,oBAAJ,CAAyBK,IAAzB,EAA+B,KAAKF,IAApC,EAA0C,IAA1C,CAAb;;AAEA,UAAI,KAAKA,IAAT,EAAe;AACb,aAAKA,IAAL,CAAUI,IAAV,GAAiBD,IAAjB;AACA,aAAKH,IAAL,GAAYG,IAAZ;AACD,OAHD,MAGO;AACL,aAAKJ,IAAL,GAAYI,IAAZ;AACA,aAAKH,IAAL,GAAYG,IAAZ;AACD;;AAED,QAAE,KAAKF,OAAP;AAEA,aAAOE,IAAP;AACD;;;2BAMMA,I,EAAM;AACX,UAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,UAAIA,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACC,IAA1B,EAAgC;AAC9BD,QAAAA,IAAI,CAACE,QAAL,CAAcD,IAAd,GAAqBD,IAAI,CAACC,IAA1B;AACAD,QAAAA,IAAI,CAACC,IAAL,CAAUC,QAAV,GAAqBF,IAAI,CAACE,QAA1B;AACD,OAHD,MAGO,IAAIF,IAAI,CAACE,QAAT,EAAmB;AAExBF,QAAAA,IAAI,CAACE,QAAL,CAAcD,IAAd,GAAqB,IAArB;AACA,aAAKJ,IAAL,GAAYG,IAAI,CAACE,QAAjB;AACD,OAJM,MAIA,IAAIF,IAAI,CAACC,IAAT,EAAe;AAEpBD,QAAAA,IAAI,CAACC,IAAL,CAAUC,QAAV,GAAqB,IAArB;AACA,aAAKN,IAAL,GAAYI,IAAI,CAACC,IAAjB;AACD,OAJM,MAIA;AAEL,aAAKL,IAAL,GAAY,IAAZ;AACA,aAAKC,IAAL,GAAY,IAAZ;AACD;;AAEDG,MAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AACAD,MAAAA,IAAI,CAACE,QAAL,GAAgB,IAAhB;AAEA,QAAE,KAAKJ,OAAP;AACD;;;2BAOME,I,EAAMG,Q,EAAU;AACrB,UAAIH,IAAI,KAAKG,QAAb,EAAuB;AACrB;AACD;;AAGD,WAAKC,MAAL,CAAYD,QAAZ;;AACA,WAAKE,OAAL,CAAaL,IAAb,EAAmBG,QAAnB;AACD;;;4BAEOH,I,EAAMG,Q,EAAU;AACtB,UAAMG,WAAW,GAAGN,IAAI,CAACC,IAAzB;AACAD,MAAAA,IAAI,CAACC,IAAL,GAAYE,QAAZ;;AAGA,UAAI,KAAKN,IAAL,KAAcG,IAAlB,EAAwB;AACtB,aAAKH,IAAL,GAAYM,QAAZ;AACD,OAFD,MAEO;AACLG,QAAAA,WAAW,CAACJ,QAAZ,GAAuBC,QAAvB;AACD;;AAEDA,MAAAA,QAAQ,CAACF,IAAT,GAAgBK,WAAhB;AACAH,MAAAA,QAAQ,CAACD,QAAT,GAAoBF,IAApB;AAEA,QAAE,KAAKF,OAAP;AACD;;;wBAvFY;AACX,aAAO,KAAKA,OAAZ;AACD;;;;;;SATkBH,gB","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n\n    ++this._length;\n  }\n}\n"],"file":"doubly-linked-list.js"}