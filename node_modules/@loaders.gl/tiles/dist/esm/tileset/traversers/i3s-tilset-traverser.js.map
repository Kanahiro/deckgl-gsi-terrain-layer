{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tilset-traverser.js"],"names":["load","TilesetTraverser","lodJudge","TileHeader","I3STileManager","I3STilesetTraverser","options","_tileManager","tile","frameState","_lodJudge","children","header","childTiles","tileset","child","childTile","find","t","id","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","i3s","fetchOptions","isTileHeader","loadContent","basePath","push","_frameNumber","frameNumber","executeTraversal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAQA,IAAR,QAAmB,kBAAnB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAEA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;IAEqBC,mB;;;;;AACnB,+BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN;AACA,UAAKC,YAAL,GAAoB,IAAIH,cAAJ,EAApB;AAFmB;AAGpB;;;;iCAEYI,I,EAAMC,U,EAAY;AAE7BD,MAAAA,IAAI,CAACE,SAAL,GAAiBR,QAAQ,CAACM,IAAD,EAAOC,UAAP,CAAzB;AACA,aAAOD,IAAI,CAACE,SAAL,KAAmB,KAA1B;AACD;;;qCAEgBF,I,EAAMC,U,EAAY;AAAA;;AACjC,UAAME,QAAQ,GAAGH,IAAI,CAACI,MAAL,CAAYD,QAAZ,IAAwB,EAAzC;AAEA,UAAME,UAAU,GAAGL,IAAI,CAACG,QAAxB;AACA,UAAMG,OAAO,GAAGN,IAAI,CAACM,OAArB;;AAJiC,iDAMbH,QANa;AAAA;;AAAA;AAAA;AAAA,cAMtBI,KANsB;AAQ/B,cAAMC,SAAS,GAAGH,UAAU,IAAIA,UAAU,CAACI,IAAX,CAAgB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,EAAF,KAASJ,KAAK,CAACI,EAAnB;AAAA,WAAjB,CAAhC;;AACA,cAAI,CAACH,SAAL,EAAgB;AACd,gBAAII,OAAO,GAAG;AAAA,qBAAM,MAAI,CAACC,SAAL,CAAeN,KAAK,CAACI,EAArB,EAAyBL,OAAzB,CAAN;AAAA,aAAd;;AACA,gBAAMQ,aAAa,GAAG,MAAI,CAACf,YAAL,CAAkBU,IAAlB,CAAuBF,KAAK,CAACI,EAA7B,CAAtB;;AACA,gBAAI,CAACG,aAAL,EAAoB;AAElB,kBAAIR,OAAO,CAACA,OAAR,CAAgBS,SAApB,EAA+B;AAC7BH,gBAAAA,OAAO,GAAG;AAAA,yBAAMN,OAAO,CAACA,OAAR,CAAgBU,aAAhB,CAA8BC,qBAA9B,CAAoDV,KAAK,CAACI,EAA1D,CAAN;AAAA,iBAAV;AACD;;AACD,cAAA,MAAI,CAACZ,YAAL,CAAkBmB,GAAlB,CACEN,OADF,EAEEL,KAAK,CAACI,EAFR,EAGE,UAAAP,MAAM;AAAA,uBAAI,MAAI,CAACe,WAAL,CAAiBf,MAAjB,EAAyBJ,IAAzB,CAAJ;AAAA,eAHR,EAIEC,UAJF;AAMD,aAXD,MAWO;AAEL,cAAA,MAAI,CAACF,YAAL,CAAkBqB,MAAlB,CAAyBb,KAAK,CAACI,EAA/B,EAAmCV,UAAnC;AACD;AACF,WAlBD,MAkBO,IAAIO,SAAJ,EAAe;AAEpB,YAAA,MAAI,CAACa,UAAL,CAAgBb,SAAhB,EAA2BP,UAA3B;AACD;AA9B8B;;AAMjC,4DAA8B;AAAA;AAyB7B;AA/BgC;AAAA;AAAA;AAAA;AAAA;AAgClC;;;;mFAEeqB,M,EAAQhB,O;;;;;;AACfiB,gBAAAA,M,GAAUjB,O,CAAViB,M;AACDC,gBAAAA,O,GAAUlB,OAAO,CAACmB,UAAR,WAAsBnB,OAAO,CAACoB,GAA9B,oBAA2CJ,MAA3C,E;AAEVxB,gBAAAA,O,GAAU;AACd6B,kBAAAA,GAAG,kCACErB,OAAO,CAACsB,YADV;AAEDC,oBAAAA,YAAY,EAAE,IAFb;AAGDC,oBAAAA,WAAW,EAAE;AAHZ;AADW,iB;;uBAQHtC,IAAI,CAACgC,OAAD,EAAUD,MAAV,EAAkBzB,OAAlB,C;;;;;;;;;;;;;;;;;;;;;gCAGPM,M,EAAQJ,I,EAAM;AACxB,UAAM+B,QAAQ,GAAG,KAAKjC,OAAL,CAAaiC,QAA9B;AAEA,UAAMvB,SAAS,GAAG,IAAIb,UAAJ,CAAeK,IAAI,CAACM,OAApB,EAA6BF,MAA7B,EAAqCJ,IAArC,EAA2C+B,QAA3C,CAAlB;AACA/B,MAAAA,IAAI,CAACG,QAAL,CAAc6B,IAAd,CAAmBxB,SAAnB;;AACA,UAAMP,UAAU,GAAG,KAAKF,YAAL,CAAkBU,IAAlB,CAAuBD,SAAS,CAACG,EAAjC,EAAqCV,UAAxD;;AACA,WAAKoB,UAAL,CAAgBb,SAAhB,EAA2BP,UAA3B;;AAGA,UAAI,KAAKgC,YAAL,KAAsBhC,UAAU,CAACiC,WAArC,EAAkD;AAChD,aAAKC,gBAAL,CAAsB3B,SAAtB,EAAiCP,UAAjC;AACD;AACF;;;;EAzE8CR,gB;;SAA5BI,mB","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {lodJudge} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    // TODO refactor loaJudge\n    tile._lodJudge = lodJudge(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find(t => t.id === child.id);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(child.id);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            child.id,\n            header => this._onTileLoad(header, tile),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(child.id, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      i3s: {\n        ...tileset.fetchOptions,\n        isTileHeader: true,\n        loadContent: false\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  _onTileLoad(header, tile) {\n    const basePath = this.options.basePath;\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, basePath);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"file":"i3s-tilset-traverser.js"}