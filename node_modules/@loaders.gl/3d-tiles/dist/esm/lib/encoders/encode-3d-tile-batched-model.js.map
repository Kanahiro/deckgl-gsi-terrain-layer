{"version":3,"sources":["../../../../src/lib/encoders/encode-3d-tile-batched-model.js"],"names":["copyStringToDataView","MAGIC_ARRAY","encode3DTileHeader","encode3DTileByteLength","encodeBatchedModel3DTile","tile","dataView","byteOffset","options","featuresLength","featureTableJson","BATCH_LENGTH","featureTableJsonString","JSON","stringify","featureTableJsonByteLength","length","magic","BATCHED_MODEL","byteOffsetStart","setUint32"],"mappings":";;;;;;AAGA,SAAQA,oBAAR,QAAmC,0BAAnC;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,SAAQC,kBAAR,EAA4BC,sBAA5B,QAAyD,iCAAzD;AAGA,OAAO,SAASC,wBAAT,CAAkCC,IAAlC,EAAwCC,QAAxC,EAAkDC,UAAlD,EAA8DC,OAA9D,EAAuE;AAAA,cAC/CH,IAD+C;AAAA,mCACrEI,cADqE;AAAA,MACrEA,cADqE,qCACpD,CADoD;AAG5E,MAAMC,gBAAgB,GAAG;AACvBC,IAAAA,YAAY,EAAEF;AADS,GAAzB;AAGA,MAAMG,sBAAsB,GAAGC,IAAI,CAACC,SAAL,CAAeJ,gBAAf,CAA/B;AACA,MAAMK,0BAA0B,GAAGH,sBAAsB,CAACI,MAA1D;AAGAX,EAAAA,IAAI;AAAIY,IAAAA,KAAK,EAAEhB,WAAW,CAACiB;AAAvB,KAAyCb,IAAzC,CAAJ;AAEA,MAAMc,eAAe,GAAGZ,UAAxB;AAEAA,EAAAA,UAAU,GAAGL,kBAAkB,CAACG,IAAD,EAAOC,QAAP,EAAiBC,UAAjB,CAA/B;;AAEA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACc,SAAT,CAAmB,EAAnB,EAAuBL,0BAAvB,EAAmD,IAAnD;AACAT,IAAAA,QAAQ,CAACc,SAAT,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,IAA1B;AACAd,IAAAA,QAAQ,CAACc,SAAT,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,IAA1B;AACAd,IAAAA,QAAQ,CAACc,SAAT,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,IAA1B;AACD;;AACDb,EAAAA,UAAU,IAAI,EAAd;AAGAA,EAAAA,UAAU,IAAIP,oBAAoB,CAChCM,QADgC,EAEhCC,UAFgC,EAGhCK,sBAHgC,EAIhCG,0BAJgC,CAAlC;AASAZ,EAAAA,sBAAsB,CAACG,QAAD,EAAWa,eAAX,EAA4BZ,UAAU,GAAGY,eAAzC,CAAtB;AAEA,SAAOZ,UAAP;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {copyStringToDataView} from '@loaders.gl/loader-utils';\nimport {MAGIC_ARRAY} from '../constants';\nimport {encode3DTileHeader, encode3DTileByteLength} from './helpers/encode-3d-tile-header';\n\n// Procedurally encode the tile array dataView for testing purposes\nexport function encodeBatchedModel3DTile(tile, dataView, byteOffset, options) {\n  const {featuresLength = 1} = tile;\n\n  const featureTableJson = {\n    BATCH_LENGTH: featuresLength\n  };\n  const featureTableJsonString = JSON.stringify(featureTableJson);\n  const featureTableJsonByteLength = featureTableJsonString.length;\n\n  // Add default magic for this tile type\n  tile = {magic: MAGIC_ARRAY.BATCHED_MODEL, ...tile};\n\n  const byteOffsetStart = byteOffset;\n\n  byteOffset = encode3DTileHeader(tile, dataView, byteOffset);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true); // featureTableJsonByteLength\n    dataView.setUint32(16, 0, true); // featureTableBinaryByteLength\n    dataView.setUint32(20, 0, true); // batchTableJsonByteLength\n    dataView.setUint32(24, 0, true); // batchTableBinaryByteLength\n  }\n  byteOffset += 16;\n\n  // TODO feature table binary\n  byteOffset += copyStringToDataView(\n    dataView,\n    byteOffset,\n    featureTableJsonString,\n    featureTableJsonByteLength\n  );\n  // TODO batch table\n\n  // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n\n  return byteOffset;\n}\n"],"file":"encode-3d-tile-batched-model.js"}