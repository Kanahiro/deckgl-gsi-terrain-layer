{"version":3,"sources":["../../../../src/lib/ion/ion.js"],"names":["fetchFile","assert","CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","getIonAssets","assets","items","item","type","id","getIonAssetMetadata","ionAssetMetadata","url","headers","Authorization","response","json","metadata","tilesetInfo"],"mappings":";;;;;;;;;;;;;;AAEA,SAAQA,SAAR,QAAwB,kBAAxB;AACA,SAAQC,MAAR,QAAqB,0BAArB;AAEA,IAAMC,cAAc,GAAG,kCAAvB;AAGA,gBAAsBC,qBAAtB;AAAA;AAAA;;;sEAAO,iBAAqCC,WAArC,EAAkDC,OAAlD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEAA,OAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGkBC,YAAY,CAACF,WAAD,CAH9B;;AAAA;AAGGG,YAAAA,MAHH;AAAA,mDAIgBA,MAAM,CAACC,KAJvB;;AAAA;AAIH,kEAAiC;AAAtBC,gBAAAA,IAAsB;;AAC/B,oBAAIA,IAAI,CAACC,IAAL,KAAc,SAAlB,EAA6B;AAC3BL,kBAAAA,OAAO,GAAGI,IAAI,CAACE,EAAf;AACD;AACF;AARE;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAY0BC,mBAAmB,CAACR,WAAD,EAAcC,OAAd,CAZ7C;;AAAA;AAYCQ,YAAAA,gBAZD;AAaEH,YAAAA,IAbF,GAaeG,gBAbf,CAaEH,IAbF,EAaQI,GAbR,GAaeD,gBAbf,CAaQC,GAbR;AAcLb,YAAAA,MAAM,CAACS,IAAI,KAAK,SAAT,IAAsBI,GAAvB,CAAN;AAGAD,YAAAA,gBAAgB,CAACE,OAAjB,GAA2B;AACzBC,cAAAA,aAAa,mBAAYH,gBAAgB,CAACT,WAA7B;AADY,aAA3B;AAjBK,6CAoBES,gBApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBP,gBAAsBP,YAAtB;AAAA;AAAA;;;6DAAO,kBAA4BF,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACLH,YAAAA,MAAM,CAACG,WAAD,CAAN;AACMU,YAAAA,GAFD,GAEOZ,cAFP;AAGCa,YAAAA,OAHD,GAGW;AAACC,cAAAA,aAAa,mBAAYZ,WAAZ;AAAd,aAHX;AAAA;AAAA,mBAIkBJ,SAAS,CAACc,GAAD,EAAM;AAACC,cAAAA,OAAO,EAAPA,OAAD;AAAU,wBAAQ;AAAlB,aAAN,CAJ3B;;AAAA;AAICE,YAAAA,QAJD;AAAA;AAAA,mBAKQA,QAAQ,CAACC,IAAT,EALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,gBAAsBN,mBAAtB;AAAA;AAAA;;;oEAAO,kBAAmCR,WAAnC,EAAgDC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AACLJ,YAAAA,MAAM,CAACG,WAAD,EAAcC,OAAd,CAAN;AACMU,YAAAA,OAFD,GAEW;AAACC,cAAAA,aAAa,mBAAYZ,WAAZ;AAAd,aAFX;AAICU,YAAAA,GAJD,aAIUZ,cAJV,cAI4BG,OAJ5B;AAAA;AAAA,mBAOgBL,SAAS,WAAIc,GAAJ,GAAW;AAACC,cAAAA,OAAO,EAAPA,OAAD;AAAU,wBAAQ;AAAlB,aAAX,CAPzB;;AAAA;AAODE,YAAAA,QAPC;AAAA;AAAA,mBAQgBA,QAAQ,CAACC,IAAT,EARhB;;AAAA;AAQDC,YAAAA,QARC;AAAA;AAAA,mBAYYnB,SAAS,WAAIc,GAAJ,gBAAoB;AAACC,cAAAA,OAAO,EAAPA,OAAD;AAAU,wBAAQ;AAAlB,aAApB,CAZrB;;AAAA;AAYLE,YAAAA,QAZK;AAAA;AAAA,mBAaqBA,QAAQ,CAACC,IAAT,EAbrB;;AAAA;AAaCE,YAAAA,WAbD;AAgBLD,YAAAA,QAAQ,mCACHA,QADG,GAEHC,WAFG,CAAR;AAhBK,8CAqBED,QArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\nimport {fetchFile} from '@loaders.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetchFile(url, {headers, throws: true});\n  return await response.json();\n}\n\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {headers, throws: true});\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {headers, throws: true});\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"],"file":"ion.js"}