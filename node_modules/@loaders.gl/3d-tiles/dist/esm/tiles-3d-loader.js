import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { path } from '@loaders.gl/loader-utils';
import { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';
import { parse3DTile } from './lib/parsers/parse-3d-tile';
import { normalizeTileHeaders } from './lib/parsers/parse-3d-tile-header';
var VERSION = typeof "2.3.1" !== 'undefined' ? "2.3.1" : 'latest';

function getBaseUri(tileset) {
  return path.dirname(tileset.url);
}

function parseTile(_x, _x2, _x3) {
  return _parseTile.apply(this, arguments);
}

function _parseTile() {
  _parseTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {
    var tile, byteOffset;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            tile = {};
            tile.content = tile.content || {};
            byteOffset = 0;
            _context.next = 5;
            return parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);

          case 5:
            return _context.abrupt("return", tile.content);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseTile.apply(this, arguments);
}

function parseTileset(_x4, _x5, _x6) {
  return _parseTileset.apply(this, arguments);
}

function _parseTileset() {
  _parseTileset = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, options, context) {
    var tilesetJson;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            tilesetJson = JSON.parse(new TextDecoder().decode(data));
            tilesetJson.loader = options.loader || Tiles3DLoader;
            tilesetJson.url = context.url;
            tilesetJson.basePath = getBaseUri(tilesetJson);
            tilesetJson.root = normalizeTileHeaders(tilesetJson);
            tilesetJson.type = TILESET_TYPE.TILES3D;
            tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;
            tilesetJson.lodMetricValue = tilesetJson.root.lodMetricValue;
            return _context2.abrupt("return", tilesetJson);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseTileset.apply(this, arguments);
}

function parse(_x7, _x8, _x9, _x10) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, options, context, loader) {
    var loaderOptions, isTileset;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            loaderOptions = options['3d-tiles'] || {};

            if (loaderOptions.isTileset === 'auto') {
              isTileset = context.url && context.url.indexOf('.json') !== -1;
            } else {
              isTileset = loaderOptions.isTileset;
            }

            if (!isTileset) {
              _context3.next = 8;
              break;
            }

            _context3.next = 5;
            return parseTileset(data, options, context);

          case 5:
            data = _context3.sent;
            _context3.next = 11;
            break;

          case 8:
            _context3.next = 10;
            return parseTile(data, options, context);

          case 10:
            data = _context3.sent;

          case 11:
            return _context3.abrupt("return", data);

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _parse.apply(this, arguments);
}

var Tiles3DLoader = {
  id: '3d-tiles',
  name: '3D Tiles',
  version: VERSION,
  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],
  mimeTypes: ['application/octet-stream'],
  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],
  parse: parse,
  options: {
    '3d-tiles': {
      loadGLTF: true,
      decodeQuantizedPositions: false,
      isTileset: 'auto',
      tile: null,
      tileset: null,
      assetGltfUpAxis: null
    }
  }
};
export default Tiles3DLoader;
//# sourceMappingURL=tiles-3d-loader.js.map