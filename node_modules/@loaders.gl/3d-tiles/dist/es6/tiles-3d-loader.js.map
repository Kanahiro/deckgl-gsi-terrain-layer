{"version":3,"sources":["../../src/tiles-3d-loader.js"],"names":["path","TILESET_TYPE","LOD_METRIC_TYPE","parse3DTile","normalizeTileHeaders","VERSION","getBaseUri","tileset","dirname","url","parseTile","arrayBuffer","options","context","tile","content","byteOffset","parseTileset","data","tilesetJson","JSON","parse","TextDecoder","decode","loader","Tiles3DLoader","basePath","root","type","TILES3D","lodMetricType","GEOMETRIC_ERROR","lodMetricValue","loaderOptions","isTileset","indexOf","id","name","version","extensions","mimeTypes","tests","loadGLTF","decodeQuantizedPositions","assetGltfUpAxis"],"mappings":"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","sourcesContent":["/* global TextDecoder */\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {normalizeTileHeaders} from './lib/parsers/parse-3d-tile-header';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {};\n  tile.content = tile.content || {};\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  // base path that non-absolute paths in tileset are relative to.\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = normalizeTileHeaders(tilesetJson);\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = tilesetJson.root.lodMetricValue;\n\n  return tilesetJson;\n}\n\nasync function parse(data, options, context, loader) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n\n/** @type {LoaderObject} */\nconst Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      tile: null,\n      tileset: null,\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nexport default Tiles3DLoader;\n"],"file":"tiles-3d-loader.js"}