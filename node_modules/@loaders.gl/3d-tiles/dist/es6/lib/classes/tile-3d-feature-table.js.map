{"version":3,"sources":["../../../../src/lib/classes/tile-3d-feature-table.js"],"names":["GL","GLType","Tile3DFeatureTable","constructor","featureTableJson","featureTableBinary","json","buffer","featuresLength","_cachedTypedArrays","getExtension","extensionName","extensions","hasProperty","propertyName","Boolean","getGlobalProperty","componentType","UNSIGNED_INT","componentLength","jsonValue","Number","isFinite","byteOffset","_getTypedArrayFromBinary","getPropertyArray","fromName","_getTypedArrayFromArray","getProperty","featureId","result","typedArray","i","count","cachedTypedArrays","createTypedArray","array"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL, GLType} from '@loaders.gl/math';\n\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n\n  getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        1,\n        jsonValue.byteOffset\n      );\n    }\n\n    return jsonValue;\n  }\n\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        this.featuresLength,\n        jsonValue.byteOffset\n      );\n    }\n\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n    if (!jsonValue) {\n      return jsonValue;\n    }\n\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n\n    return result;\n  }\n\n  // HELPERS\n\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(\n        componentType,\n        this.buffer.buffer,\n        this.buffer.byteOffset + byteOffset,\n        count * componentLength\n      );\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n}\n"],"file":"tile-3d-feature-table.js"}