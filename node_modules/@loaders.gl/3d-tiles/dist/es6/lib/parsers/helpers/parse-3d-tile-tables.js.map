{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-tables.js"],"names":["getStringFromArrayBuffer","SIZEOF_UINT32","parse3DTileTablesHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","header","featureTableJsonByteLength","getUint32","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","parse3DTileTablesSync","options","parse3DTileFeatureTable","parse3DTileBatchTable","featureTableJson","BATCH_LENGTH","featureTableString","JSON","parse","featureTableBinary","Uint8Array","batchTableString","batchTableJson","batchTableBinary"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n\n  tile.header = tile.header || {};\n\n  tile.header.featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength} = tile.header;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"],"file":"parse-3d-tile-tables.js"}