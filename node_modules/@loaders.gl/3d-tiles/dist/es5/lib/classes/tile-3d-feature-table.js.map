{"version":3,"sources":["../../../../src/lib/classes/tile-3d-feature-table.js"],"names":["Tile3DFeatureTable","featureTableJson","featureTableBinary","json","buffer","featuresLength","_cachedTypedArrays","extensionName","extensions","propertyName","Boolean","componentType","GL","UNSIGNED_INT","componentLength","jsonValue","Number","isFinite","byteOffset","_getTypedArrayFromBinary","GLType","fromName","_getTypedArrayFromArray","featureId","result","typedArray","getPropertyArray","i","count","cachedTypedArrays","createTypedArray","array"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL, GLType} from '@loaders.gl/math';\n\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n\n  getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        1,\n        jsonValue.byteOffset\n      );\n    }\n\n    return jsonValue;\n  }\n\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        this.featuresLength,\n        jsonValue.byteOffset\n      );\n    }\n\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n    if (!jsonValue) {\n      return jsonValue;\n    }\n\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n\n    return result;\n  }\n\n  // HELPERS\n\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(\n        componentType,\n        this.buffer.buffer,\n        this.buffer.byteOffset + byteOffset,\n        count * componentLength\n      );\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n}\n"],"file":"tile-3d-feature-table.js"}