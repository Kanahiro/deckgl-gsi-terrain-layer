{"version":3,"sources":["../../src/cesium-ion-loader.js"],"names":["preload","url","options","accessToken","assetId","Number","isFinite","matched","match","CesiumIonLoader","Tiles3DLoader","id","name","parse","data","context","loader"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;SAEeA,O;;;;;6EAAf,kBAAuBC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA4BC,YAAAA,OAA5B,8DAAsC,EAAtC;AACEA,YAAAA,OAAO,GAAGA,OAAO,CAAC,YAAD,CAAP,IAAyB,EAAnC;AADF,uBAEwBA,OAFxB,EAESC,WAFT,YAESA,WAFT;AAGMC,YAAAA,OAHN,GAGgBF,OAAO,CAACE,OAHxB;;AAIE,gBAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,OAAhB,CAAL,EAA+B;AACvBG,cAAAA,OADuB,GACbN,GAAG,CAACO,KAAJ,CAAU,0BAAV,CADa;AAE7BJ,cAAAA,OAAO,GAAGG,OAAO,IAAIA,OAAO,CAAC,CAAD,CAA5B;AACD;;AAPH,8CAQS,gCAAsBJ,WAAtB,EAAmCC,OAAnC,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,IAAMK,eAAe,mCAChBC,yBADgB;AAEnBC,EAAAA,EAAE,EAAE,YAFe;AAGnBC,EAAAA,IAAI,EAAE,YAHa;AAInBZ,EAAAA,OAAO,EAAPA,OAJmB;AAKnBa,EAAAA,KAAK;AAAA,iFAAE,iBAAOC,IAAP,EAAaZ,OAAb,EAAsBa,OAAtB,EAA+BC,MAA/B;AAAA;AAAA;AAAA;AAAA;AACLd,cAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBA,OAAO,CAAC,YAAD,CAA7B;AACAA,cAAAA,OAAO,CAACc,MAAR,GAAiBP,eAAjB;AAFK,+CAGEC,0BAAcG,KAAd,CAAoBC,IAApB,EAA0BZ,OAA1B,EAAmCa,OAAnC,CAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KALc;AAUnBb,EAAAA,OAAO,EAAE;AACP,kDACKQ,0BAAcR,OAAd,CAAsB,UAAtB,CADL;AAEEC,MAAAA,WAAW,EAAE;AAFf;AADO;AAVU,EAArB;;eAkBeM,e","sourcesContent":["import Tiles3DLoader from './tiles-3d-loader';\nimport {getIonTilesetMetadata} from './lib/ion/ion';\n\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  const {accessToken} = options;\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\nconst CesiumIonLoader = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload,\n  parse: async (data, options, context, loader) => {\n    options['3d-tiles'] = options['cesium-ion'];\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context); // , loader);\n  },\n  options: {\n    'cesium-ion': {\n      ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};\n\nexport default CesiumIonLoader;\n"],"file":"cesium-ion-loader.js"}