{"version":3,"sources":["../../../src/lib/transform.js"],"names":["transformBinaryCoords","binaryFeatures","fn","Object","values","binaryFeature","positions","i","value","length","size","coord","Array","from","subarray","transformedCoord","set","transformGeoJsonCoords","features","feature","geometry","coordinates","coordMap","array","isCoord","map","item","Number","isFinite"],"mappings":";;;;;;AAOA,OAAO,SAASA,qBAAT,CAA+BC,cAA/B,EAA+CC,EAA/C,EAAmD;AAExD,oCAA4BC,MAAM,CAACC,MAAP,CAAcH,cAAd,CAA5B,oCAA2D;AAAtD,QAAMI,aAAa,qBAAnB;AAAsD,QAClDC,SADkD,GACrCD,aADqC,CAClDC,SADkD;;AAEzD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,KAAV,CAAgBC,MAApC,EAA4CF,CAAC,IAAID,SAAS,CAACI,IAA3D,EAAiE;AAC/D,UAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWP,SAAS,CAACE,KAAV,CAAgBM,QAAhB,CAAyBP,CAAzB,EAA4BA,CAAC,GAAGD,SAAS,CAACI,IAA1C,CAAX,CAAd;AACA,UAAMK,gBAAgB,GAAGb,EAAE,CAACS,KAAD,CAA3B;AACAL,MAAAA,SAAS,CAACE,KAAV,CAAgBQ,GAAhB,CAAoBD,gBAApB,EAAsCR,CAAtC;AACD;AACF;;AACD,SAAON,cAAP;AACD;AASD,OAAO,SAASgB,sBAAT,CAAgCC,QAAhC,EAA0ChB,EAA1C,EAA8C;AAAA,6CAC7BgB,QAD6B;AAAA;;AAAA;AACnD,wDAAgC;AAAA,UAArBC,OAAqB;AAC9BA,MAAAA,OAAO,CAACC,QAAR,CAAiBC,WAAjB,GAA+BC,QAAQ,CAACH,OAAO,CAACC,QAAR,CAAiBC,WAAlB,EAA+BnB,EAA/B,CAAvC;AACD;AAHkD;AAAA;AAAA;AAAA;AAAA;;AAInD,SAAOgB,QAAP;AACD;;AAED,SAASI,QAAT,CAAkBC,KAAlB,EAAyBrB,EAAzB,EAA6B;AAC3B,MAAIsB,OAAO,CAACD,KAAD,CAAX,EAAoB;AAClB,WAAOrB,EAAE,CAACqB,KAAD,CAAT;AACD;;AAED,SAAOA,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI,EAAI;AACvB,WAAOJ,QAAQ,CAACI,IAAD,EAAOxB,EAAP,CAAf;AACD,GAFM,CAAP;AAGD;;AAED,SAASsB,OAAT,CAAiBD,KAAjB,EAAwB;AACtB,SAAOI,MAAM,CAACC,QAAP,CAAgBL,KAAK,CAAC,CAAD,CAArB,KAA6BI,MAAM,CAACC,QAAP,CAAgBL,KAAK,CAAC,CAAD,CAArB,CAApC;AACD","sourcesContent":["/**\n * Apply transformation to every coordinate of binary features\n *\n * @param  binaryFeatures binary features\n * @param  fn       Function to call on each coordinate\n * @return          Transformed binary features\n */\nexport function transformBinaryCoords(binaryFeatures, fn) {\n  // Expect binaryFeatures to have points, lines, and polygons keys\n  for (const binaryFeature of Object.values(binaryFeatures)) {\n    const {positions} = binaryFeature;\n    for (let i = 0; i < positions.value.length; i += positions.size) {\n      const coord = Array.from(positions.value.subarray(i, i + positions.size));\n      const transformedCoord = fn(coord);\n      positions.value.set(transformedCoord, i);\n    }\n  }\n  return binaryFeatures;\n}\n\n/**\n * Apply transformation to every coordinate of GeoJSON features\n *\n * @param  features Array of GeoJSON features\n * @param  fn       Function to call on each coordinate\n * @return          Transformed GeoJSON features\n */\nexport function transformGeoJsonCoords(features, fn) {\n  for (const feature of features) {\n    feature.geometry.coordinates = coordMap(feature.geometry.coordinates, fn);\n  }\n  return features;\n}\n\nfunction coordMap(array, fn) {\n  if (isCoord(array)) {\n    return fn(array);\n  }\n\n  return array.map(item => {\n    return coordMap(item, fn);\n  });\n}\n\nfunction isCoord(array) {\n  return Number.isFinite(array[0]) && Number.isFinite(array[1]);\n}\n"],"file":"transform.js"}