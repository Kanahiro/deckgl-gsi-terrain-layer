{"version":3,"sources":["../../../src/lib/geojson-to-binary.js"],"names":["geojsonToBinary","features","options","firstPassData","firstPass","secondPass","coordLength","numericPropKeys","PositionDataType","Float32Array","TEST_EXPORTS","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","feature","geometry","type","add","coordinates","length","point","coord","line","flatten","polygon","Error","properties","key","val","undefined","isNumeric","Math","max","Object","keys","filter","k","GlobalFeatureIdsDataType","Uint32Array","Uint16Array","points","positions","globalFeatureIds","featureIds","numericProps","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","object","propName","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","handlePoint","push","keepStringProperties","handleMultiPoint","handleLineString","handleMultiLineString","handlePolygon","handleMultiPolygon","makeAccessorObjects","coords","set","fillNumericProperties","fillCoords","nPositions","fill","ring","returnObj","value","size","geomType","numericProp","index","numericPropName","Array","numericKeys","includes","array","startVertex","arrays","concat","x","Number","isFinite"],"mappings":"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","sourcesContent":["// Convert GeoJSON features to flat binary arrays\n// @ts-nocheck\n\nexport function geojsonToBinary(features, options = {}) {\n  const firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  firstPass,\n  secondPass\n};\n\n// Initial scan over GeoJSON features\n// Counts number of coordinates of each geometry type and keeps track of the max coordinate\n// dimensions\n// eslint-disable-next-line complexity, max-statements\nfunction firstPass(features) {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set();\n  const numericPropKeys = {};\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        polygonPositionsCount += flatten(geometry.coordinates).length;\n\n        for (const coord of flatten(geometry.coordinates)) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          polygonPositionsCount += flatten(polygon).length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flatten(polygon)) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        const val = feature.properties[key];\n\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, false is stored to prevent rechecking in the future\n        numericPropKeys[key] =\n          numericPropKeys[key] || numericPropKeys[key] === undefined\n            ? isNumeric(val)\n            : numericPropKeys[key];\n      }\n    }\n  }\n\n  return {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    coordLength: Math.max(...coordLengths),\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount,\n    // Array of keys whose values are always numeric\n    numericPropKeys: Object.keys(numericPropKeys).filter(k => numericPropKeys[k])\n  };\n}\n\n// Second scan over GeoJSON features\n// Fills coordinates into pre-allocated typed arrays\n// eslint-disable-next-line complexity\nfunction secondPass(features, firstPassData = {}, options = {}) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {coordLength, numericPropKeys, PositionDataType = Float32Array} = options;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const lines = {\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const polygons = {\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties;\n\n    switch (geometry.type) {\n      case 'Point':\n        handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'MultiPoint':\n        handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n        handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'MultiLineString':\n        handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n        handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      case 'MultiPolygon':\n        handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n// Fills Point coordinates into points object of arrays\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\n\n// Fills MultiPoint coordinates into points object of arrays\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  for (const point of coords) {\n    handlePoint(point, points, indexMap, coordLength, properties);\n  }\n}\n\n// Fills LineString coordinates into lines object of arrays\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n\n  const nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.feature),\n    indexMap.linePosition\n  );\n  lines.featureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.lineFeature),\n    indexMap.linePosition\n  );\n  indexMap.linePosition += nPositions;\n}\n\n// Fills MultiLineString coordinates into lines object of arrays\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  for (const line of coords) {\n    handleLineString(line, lines, indexMap, coordLength, properties);\n  }\n}\n\n// Fills Polygon coordinates into polygons object of arrays\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n\n  for (const ring of coords) {\n    polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n    indexMap.polygonRing++;\n\n    fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n\n    const nPositions = ring.length;\n    fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n\n    polygons.globalFeatureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.feature),\n      indexMap.polygonPosition\n    );\n    polygons.featureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.polygonFeature),\n      indexMap.polygonPosition\n    );\n    indexMap.polygonPosition += nPositions;\n  }\n}\n\n// Fills MultiPolygon coordinates into polygons object of arrays\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  for (const polygon of coords) {\n    handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n  }\n}\n\n// Wrap each array in an accessor object with value and size keys\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  const returnObj = {\n    points: {\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\n\n// Add numeric properties to object\nfunction fillNumericProperties(object, properties, index, length) {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(\n        new Array(length).fill(properties[numericPropName]),\n        index\n      );\n    }\n  }\n}\n\n// Keep string properties in object\n// Note: this mutates the properties object\nfunction keepStringProperties(properties, numericKeys) {\n  for (const key in properties) {\n    if (numericKeys.includes(key)) {\n      delete properties[key];\n    }\n  }\n  return properties;\n}\n\n// coords is expected to be a list of arrays, each with length 2-3\nfunction fillCoords(array, coords, startVertex, coordLength) {\n  let index = startVertex * coordLength;\n  for (const coord of coords) {\n    array.set(coord, index);\n    index += coordLength;\n  }\n}\n\nfunction flatten(arrays) {\n  return [].concat(...arrays);\n}\n\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}\n"],"file":"geojson-to-binary.js"}