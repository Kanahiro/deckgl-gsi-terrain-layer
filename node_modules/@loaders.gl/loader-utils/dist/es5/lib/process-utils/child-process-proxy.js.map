{"version":3,"sources":["../../../../src/lib/process-utils/child-process-proxy.js"],"names":["DEFAULT_PROCESS_OPTIONS","command","arguments","portArg","port","basePort","wait","nodeSpawnOptions","maxBuffer","onSuccess","processProxy","console","log","options","ChildProcessProxy","id","childProcess","args","push","Promise","resolve","reject","successTimer","setTimeout","join","ChildProcess","spawn","stderr","on","data","clearTimeout","Error","error","code","kill","statusCode","stop","process","exit","message"],"mappings":"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","sourcesContent":["// Forked from probe.gl under MIT license, Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n\n/* eslint-disable no-console */\n/* global process, setTimeout, clearTimeout, console */\nimport ChildProcess from 'child_process';\nimport assert from '../env-utils/assert';\nimport {getAvailablePort} from './process-utils';\n\nconst DEFAULT_PROCESS_OPTIONS = {\n  command: null,\n  arguments: [],\n  portArg: null,\n  port: 'auto',\n  basePort: 5000,\n  wait: 2000,\n  nodeSpawnOptions: {maxBuffer: 5000 * 1024},\n  onSuccess: processProxy => {\n    console.log(`Started ${processProxy.options.command}`);\n  }\n};\n\nexport default class ChildProcessProxy {\n  constructor({id = 'browser-driver'} = {}) {\n    this.id = id;\n    this.childProcess = null;\n    this.port = null;\n  }\n\n  async start(options = {}) {\n    options = {...DEFAULT_PROCESS_OPTIONS, ...options};\n    assert(options.command && typeof options.command === 'string');\n    this.options = options;\n\n    const args = [...options.arguments];\n\n    // If portArg is set, we can look up an available port\n    this.port = options.port;\n    if (options.portArg) {\n      if (this.port === 'auto') {\n        this.port = await getAvailablePort(options.basePort);\n      }\n      args.push(options.portArg, this.port);\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        const successTimer = setTimeout(() => {\n          if (options.onSuccess) {\n            options.onSuccess(this);\n          }\n          resolve({});\n        }, options.wait);\n\n        console.log(`Spawning ${options.command} ${options.arguments.join(' ')}`);\n        this.childProcess = ChildProcess.spawn(options.command, args, options.spawn);\n\n        // TODO - add option regarding whether stderr should be treated as data\n        this.childProcess.stderr.on('data', data => {\n          console.log(`Child process wrote to stderr: \"${data}\".`);\n          clearTimeout(successTimer);\n          reject(new Error(data));\n        });\n        this.childProcess.on('error', error => {\n          console.log(`Child process errored with ${error}`);\n          clearTimeout(successTimer);\n          reject(error);\n        });\n        this.childProcess.on('close', code => {\n          console.log(`Child process exited with ${code}`);\n          this.childProcess = null;\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async stop() {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  async exit(statusCode = 0) {\n    try {\n      await this.stop();\n      // eslint-disable-next-line no-process-exit\n      process.exit(statusCode);\n    } catch (error) {\n      console.error(error.message || error);\n      // eslint-disable-next-line no-process-exit\n      process.exit(1);\n    }\n  }\n}\n"],"file":"child-process-proxy.js"}