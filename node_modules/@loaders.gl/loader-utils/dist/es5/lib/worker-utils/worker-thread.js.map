{"version":3,"sources":["../../../../src/lib/worker-utils/worker-thread.js"],"names":["count","defaultOnMessage","data","resolve","WorkerThread","source","name","onMessage","url","worker","Worker","Promise","reject","onmessage","event","onerror","error","message","filename","lineno","colno","betterError","Error","console","transferList","postMessage","terminate"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AACA;;AAEA,IAAIA,KAAK,GAAG,CAAZ;;AAGA,SAASC,gBAAT,OAA2C;AAAA,MAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,MAAVC,OAAU,QAAVA,OAAU;AACzCA,EAAAA,OAAO,CAACD,IAAD,CAAP;AACD;;IAEoBE,Y;AACnB,+BAAiE;AAAA,QAApDC,MAAoD,SAApDA,MAAoD;AAAA,2BAA5CC,IAA4C;AAAA,QAA5CA,IAA4C,gDAAvBN,KAAK,EAAkB;AAAA,QAAZO,SAAY,SAAZA,SAAY;AAAA;AAC/D,QAAMC,GAAG,GAAG,gCAAaH,MAAb,EAAqBC,IAArB,CAAZ;AACA,SAAKG,MAAL,GAAc,IAAIC,MAAJ,CAAWF,GAAX,EAAgB;AAACF,MAAAA,IAAI,EAAJA;AAAD,KAAhB,CAAd;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAS,IAAIN,gBAA9B;AACD;;;;;sGAKaC,I;;;;;;;iDACL,IAAIS,OAAJ,CAAY,UAACR,OAAD,EAAUS,MAAV,EAAqB;AACtC,kBAAA,KAAI,CAACH,MAAL,CAAYI,SAAZ,GAAwB,UAAAC,KAAK,EAAI;AAC/B,oBAAA,KAAI,CAACP,SAAL,CAAe;AAACE,sBAAAA,MAAM,EAAE,KAAI,CAACA,MAAd;AAAsBP,sBAAAA,IAAI,EAAEY,KAAK,CAACZ,IAAlC;AAAwCC,sBAAAA,OAAO,EAAPA,OAAxC;AAAiDS,sBAAAA,MAAM,EAANA;AAAjD,qBAAf;AACD,mBAFD;;AAGA,kBAAA,KAAI,CAACH,MAAL,CAAYM,OAAZ,GAAsB,UAAAC,KAAK,EAAI;AAI7B,wBAAIC,OAAO,aAAM,KAAI,CAACX,IAAX,oCAAX;;AACA,wBAAIU,KAAK,CAACC,OAAV,EAAmB;AACjBA,sBAAAA,OAAO,eAAQD,KAAK,CAACC,OAAd,cAAyBD,KAAK,CAACE,QAA/B,cAA2CF,KAAK,CAACG,MAAjD,cAA2DH,KAAK,CAACI,KAAjE,CAAP;AACD;;AACD,wBAAMC,WAAW,GAAG,IAAIC,KAAJ,CAAUL,OAAV,CAApB;AACAM,oBAAAA,OAAO,CAACP,KAAR,CAAcA,KAAd;AACAJ,oBAAAA,MAAM,CAACS,WAAD,CAAN;AACD,mBAXD;;AAYA,sBAAMG,YAAY,GAAG,sCAAgBtB,IAAhB,CAArB;;AACA,kBAAA,KAAI,CAACO,MAAL,CAAYgB,WAAZ,CAAwBvB,IAAxB,EAA8BsB,YAA9B;AACD,iBAlBM,C;;;;;;;;;;;;;;;;;;8BAqBC;AACR,WAAKf,MAAL,CAAYiB,SAAZ;AAEA,WAAKjB,MAAL,GAAc,IAAd;AACD","sourcesContent":["/* global Worker */\nimport {getWorkerURL} from './get-worker-url';\nimport {getTransferList} from './get-transfer-list';\n\nlet count = 0;\n\n// By default resolves to the first message the worker sends back\nfunction defaultOnMessage({data, resolve}) {\n  resolve(data);\n}\n\nexport default class WorkerThread {\n  constructor({source, name = `web-worker-${count++}`, onMessage}) {\n    const url = getWorkerURL(source, name);\n    this.worker = new Worker(url, {name});\n    this.name = name;\n    this.onMessage = onMessage || defaultOnMessage;\n  }\n\n  /**\n   * Process binary data in a worker\n   */\n  async process(data) {\n    return new Promise((resolve, reject) => {\n      this.worker.onmessage = event => {\n        this.onMessage({worker: this.worker, data: event.data, resolve, reject});\n      };\n      this.worker.onerror = error => {\n        // Note Error object does not have the expected fields if loading failed completely\n        // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n        // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n        let message = `${this.name}: WorkerThread.process() failed`;\n        if (error.message) {\n          message += ` ${error.message} ${error.filename}:${error.lineno}:${error.colno}`;\n        }\n        const betterError = new Error(message);\n        console.error(error); // eslint-disable-line\n        reject(betterError);\n      };\n      const transferList = getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    });\n  }\n\n  destroy() {\n    this.worker.terminate();\n    // @ts-ignore\n    this.worker = null;\n  }\n}\n"],"file":"worker-thread.js"}