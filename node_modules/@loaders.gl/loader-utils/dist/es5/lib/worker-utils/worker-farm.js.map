{"version":3,"sources":["../../../../src/lib/worker-utils/worker-farm.js"],"names":["DEFAULT_MAX_CONCURRENCY","WorkerFarm","Worker","maxConcurrency","onMessage","onDebug","workerPools","Map","props","forEach","workerPool","destroy","workerSource","workerName","data","_getWorkerPool","process","get","WorkerPool","source","name","onWorkerMessage","bind","set","worker","resolve","reject","type","result","message"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA,IAAMA,uBAAuB,GAAG,CAAhC;;IAKqBC,U;;;kCACE;AACnB,aAAO,OAAOC,MAAP,KAAkB,WAAzB;AACD;;;AAED,4BAA8F;AAAA,mCAAjFC,cAAiF;AAAA,QAAjFA,cAAiF,oCAAhEH,uBAAgE;AAAA,8BAAvCI,SAAuC;AAAA,QAAvCA,SAAuC,+BAA3B,IAA2B;AAAA,4BAArBC,OAAqB;AAAA,QAArBA,OAAqB,6BAAX,YAAM,CAAE,CAAG;AAAA;AAC5F,SAAKF,cAAL,GAAsBA,cAAtB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACD;;;;6BAEQC,K,EAAO;AACd,UAAI,oBAAoBA,KAAxB,EAA+B;AAC7B,aAAKL,cAAL,GAAsBK,KAAK,CAACL,cAA5B;AACD;;AAED,UAAI,aAAaK,KAAjB,EAAwB;AACtB,aAAKH,OAAL,GAAeG,KAAK,CAACH,OAArB;AACD;AACF;;;8BAES;AACR,WAAKC,WAAL,CAAiBG,OAAjB,CAAyB,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACC,OAAX,EAAJ;AAAA,OAAnC;AACD;;;;sGAOaC,Y,EAAcC,U,EAAYC,I;;;;;;AAChCJ,gBAAAA,U,GAAa,KAAKK,cAAL,CAAoBH,YAApB,EAAkCC,UAAlC,C;iDACZH,UAAU,CAACM,OAAX,CAAmBF,IAAnB,C;;;;;;;;;;;;;;;;;;mCAKMF,Y,EAAcC,U,EAAY;AACvC,UAAIH,UAAU,GAAG,KAAKJ,WAAL,CAAiBW,GAAjB,CAAqBJ,UAArB,CAAjB;;AACA,UAAI,CAACH,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAG,IAAIQ,sBAAJ,CAAe;AAC1BC,UAAAA,MAAM,EAAEP,YADkB;AAE1BQ,UAAAA,IAAI,EAAEP,UAFoB;AAG1BT,UAAAA,SAAS,EAAEiB,eAAe,CAACC,IAAhB,CAAqB,IAArB,EAA2B,KAAKlB,SAAhC,CAHe;AAI1BD,UAAAA,cAAc,EAAE,KAAKA,cAJK;AAK1BE,UAAAA,OAAO,EAAE,KAAKA;AALY,SAAf,CAAb;AAOA,aAAKC,WAAL,CAAiBiB,GAAjB,CAAqBV,UAArB,EAAiCH,UAAjC;AACD;;AACD,aAAOA,UAAP;AACD;;;;;;;AAGH,SAASW,eAAT,CAAyBjB,SAAzB,SAAqE;AAAA,MAAhCoB,MAAgC,SAAhCA,MAAgC;AAAA,MAAxBV,IAAwB,SAAxBA,IAAwB;AAAA,MAAlBW,OAAkB,SAAlBA,OAAkB;AAAA,MAATC,MAAS,SAATA,MAAS;;AACnE,MAAItB,SAAJ,EAAe;AACbA,IAAAA,SAAS,CAAC;AAACoB,MAAAA,MAAM,EAANA,MAAD;AAASV,MAAAA,IAAI,EAAJA,IAAT;AAAeW,MAAAA,OAAO,EAAPA,OAAf;AAAwBC,MAAAA,MAAM,EAANA;AAAxB,KAAD,CAAT;AACA;AACD;;AAED,UAAQZ,IAAI,CAACa,IAAb;AACE,SAAK,MAAL;AACEF,MAAAA,OAAO,CAACX,IAAI,CAACc,MAAN,CAAP;AACA;;AAEF,SAAK,OAAL;AACEF,MAAAA,MAAM,CAACZ,IAAI,CAACe,OAAN,CAAN;AACA;;AAEF;AATF;AAWD","sourcesContent":["import WorkerPool from './worker-pool';\n\nconst DEFAULT_MAX_CONCURRENCY = 5;\n\n/**\n * Process multiple data messages with a \"farm\" of different workers (in worker pools)\n */\nexport default class WorkerFarm {\n  static isSupported() {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor({maxConcurrency = DEFAULT_MAX_CONCURRENCY, onMessage = null, onDebug = () => {}}) {\n    this.maxConcurrency = maxConcurrency;\n    this.onMessage = onMessage;\n    this.onDebug = onDebug;\n    this.workerPools = new Map();\n  }\n\n  setProps(props) {\n    if ('maxConcurrency' in props) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n\n    if ('onDebug' in props) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  destroy() {\n    this.workerPools.forEach(workerPool => workerPool.destroy());\n  }\n\n  /**\n   * Process binary data in a worker\n   * @param {any} data - data (containing binary typed arrays) to be transferred to worker\n   * @returns a Promise with data containing typed arrays transferred back from work\n   */\n  async process(workerSource, workerName, data) {\n    const workerPool = this._getWorkerPool(workerSource, workerName);\n    return workerPool.process(data);\n  }\n\n  // PRIVATE\n\n  _getWorkerPool(workerSource, workerName) {\n    let workerPool = this.workerPools.get(workerName);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        source: workerSource,\n        name: workerName,\n        onMessage: onWorkerMessage.bind(null, this.onMessage),\n        maxConcurrency: this.maxConcurrency,\n        onDebug: this.onDebug\n      });\n      this.workerPools.set(workerName, workerPool);\n    }\n    return workerPool;\n  }\n}\n\nfunction onWorkerMessage(onMessage, {worker, data, resolve, reject}) {\n  if (onMessage) {\n    onMessage({worker, data, resolve, reject});\n    return;\n  }\n\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n  }\n}\n"],"file":"worker-farm.js"}