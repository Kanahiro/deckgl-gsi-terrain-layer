{"version":3,"sources":["../../../../src/lib/worker-utils/worker-utils.js"],"names":["workerURLCache","Map","getWorkerURL","workerSource","startsWith","endsWith","match","workerURL","get","blob","Blob","type","URL","createObjectURL","set"],"mappings":";;;;;;;;;AACA;;AAEA,IAAMA,cAAc,GAAG,IAAIC,GAAJ,EAAvB;;AAIO,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AACzC,0BAAO,OAAOA,YAAP,KAAwB,QAA/B,EAAyC,eAAzC;;AAKA,MAAIA,YAAY,CAACC,UAAb,CAAwB,MAAxB,KAAmCD,YAAY,CAACE,QAAb,CAAsB,GAAtB,CAAvC,EAAmE;AACjE,WAAOF,YAAY,CAACG,KAAb,CAAmB,eAAnB,EAAoC,CAApC,CAAP;AACD;;AAED,MAAIC,SAAS,GAAGP,cAAc,CAACQ,GAAf,CAAmBL,YAAnB,CAAhB;;AAEA,MAAI,CAACI,SAAL,EAAgB;AACd,QAAME,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACP,YAAD,CAAT,EAAyB;AAACQ,MAAAA,IAAI,EAAE;AAAP,KAAzB,CAAb;AAEAJ,IAAAA,SAAS,GAAGK,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAZ;AACAT,IAAAA,cAAc,CAACc,GAAf,CAAmBX,YAAnB,EAAiCI,SAAjC;AACD;;AAED,SAAOA,SAAP;AACD","sourcesContent":["/* global URL, Blob */\nimport assert from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n// Creates a URL from worker source that can be used to create `Worker` instances\n// Packages (and then caches) the result of `webworkify` as an \"Object URL\"\nexport function getWorkerURL(workerSource) {\n  assert(typeof workerSource === 'string', 'worker source');\n\n  // url(./worker.js)\n  // This pattern is used to differentiate worker urls from worker source code\n  // Load from url is needed for testing, when using Webpack & webworker target\n  if (workerSource.startsWith('url(') && workerSource.endsWith(')')) {\n    return workerSource.match(/^url\\((.*)\\)$/)[1];\n  }\n\n  let workerURL = workerURLCache.get(workerSource);\n\n  if (!workerURL) {\n    const blob = new Blob([workerSource], {type: 'application/javascript'});\n    // const blob = webworkify(workerSource, {bare: true});\n    workerURL = URL.createObjectURL(blob);\n    workerURLCache.set(workerSource, workerURL);\n  }\n\n  return workerURL;\n}\n"],"file":"worker-utils.js"}