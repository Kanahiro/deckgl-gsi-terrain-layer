{"version":3,"sources":["../../../../src/lib/iterator-utils/async-iteration.js"],"names":["concatenateArrayBuffers","assert","forEach","iterator","visitor","done","value","next","return","cancel","concatenateChunksAsync","asyncIterator","arrayBuffers","strings","chunk","push","length","join"],"mappings":"AAAA,SAAQA,uBAAR,QAAsC,oCAAtC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAgBA,OAAO,eAAeC,OAAf,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;AAE/C,SAAO,IAAP,EAAa;AACX,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgB,MAAMH,QAAQ,CAACI,IAAT,EAA5B;;AACA,QAAIF,IAAJ,EAAU;AACRF,MAAAA,QAAQ,CAACK,MAAT;AACA;AACD;;AACD,UAAMC,MAAM,GAAGL,OAAO,CAACE,KAAD,CAAtB;;AACA,QAAIG,MAAJ,EAAY;AACV;AACD;AACF;AACF;AAUD,OAAO,eAAeC,sBAAf,CAAsCC,aAAtC,EAAqD;AAE1D,QAAMC,YAAY,GAAG,EAArB;AAEA,QAAMC,OAAO,GAAG,EAAhB;;AACA,aAAW,MAAMC,KAAjB,IAA0BH,aAA1B,EAAyC;AACvC,QAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;AAC7BD,MAAAA,OAAO,CAACE,IAAR,CAAaD,KAAb;AACD,KAFD,MAEO;AACLF,MAAAA,YAAY,CAACG,IAAb,CAAkBD,KAAlB;AACD;AACF;;AAED,MAAID,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;AACtBf,IAAAA,MAAM,CAACW,YAAY,CAACI,MAAb,KAAwB,CAAzB,CAAN;AACA,WAAOH,OAAO,CAACI,IAAR,CAAa,EAAb,CAAP;AACD;;AAED,SAAOjB,uBAAuB,CAAC,GAAGY,YAAJ,CAA9B;AACD","sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\nimport assert from '../env-utils/assert';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * Supports strings and ArrayBuffers\n *\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\nexport async function concatenateChunksAsync(asyncIterator) {\n  /** @type {ArrayBuffer[]} */\n  const arrayBuffers = [];\n  /** @type {string[]} */\n  const strings = [];\n  for await (const chunk of asyncIterator) {\n    if (typeof chunk === 'string') {\n      strings.push(chunk);\n    } else {\n      arrayBuffers.push(chunk);\n    }\n  }\n\n  if (strings.length > 0) {\n    assert(arrayBuffers.length === 0);\n    return strings.join('');\n  }\n\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n"],"file":"async-iteration.js"}