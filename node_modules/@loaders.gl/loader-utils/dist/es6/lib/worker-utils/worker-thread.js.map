{"version":3,"sources":["../../../../src/lib/worker-utils/worker-thread.js"],"names":["getWorkerURL","getTransferList","count","defaultOnMessage","data","resolve","WorkerThread","constructor","source","name","onMessage","url","worker","Worker","process","Promise","reject","onmessage","event","onerror","error","message","filename","lineno","colno","betterError","Error","console","transferList","postMessage","destroy","terminate"],"mappings":"AACA,SAAQA,YAAR,QAA2B,kBAA3B;AACA,SAAQC,eAAR,QAA8B,qBAA9B;AAEA,IAAIC,KAAK,GAAG,CAAZ;;AAGA,SAASC,gBAAT,CAA0B;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAA1B,EAA2C;AACzCA,EAAAA,OAAO,CAACD,IAAD,CAAP;AACD;;AAED,eAAe,MAAME,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA,IAAI,wBAAiBP,KAAK,EAAtB,CAAb;AAAyCQ,IAAAA;AAAzC,GAAD,EAAsD;AAC/D,UAAMC,GAAG,GAAGX,YAAY,CAACQ,MAAD,EAASC,IAAT,CAAxB;AACA,SAAKG,MAAL,GAAc,IAAIC,MAAJ,CAAWF,GAAX,EAAgB;AAACF,MAAAA;AAAD,KAAhB,CAAd;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAS,IAAIP,gBAA9B;AACD;;AAKD,QAAMW,OAAN,CAAcV,IAAd,EAAoB;AAClB,WAAO,IAAIW,OAAJ,CAAY,CAACV,OAAD,EAAUW,MAAV,KAAqB;AACtC,WAAKJ,MAAL,CAAYK,SAAZ,GAAwBC,KAAK,IAAI;AAC/B,aAAKR,SAAL,CAAe;AAACE,UAAAA,MAAM,EAAE,KAAKA,MAAd;AAAsBR,UAAAA,IAAI,EAAEc,KAAK,CAACd,IAAlC;AAAwCC,UAAAA,OAAxC;AAAiDW,UAAAA;AAAjD,SAAf;AACD,OAFD;;AAGA,WAAKJ,MAAL,CAAYO,OAAZ,GAAsBC,KAAK,IAAI;AAI7B,YAAIC,OAAO,aAAM,KAAKZ,IAAX,oCAAX;;AACA,YAAIW,KAAK,CAACC,OAAV,EAAmB;AACjBA,UAAAA,OAAO,eAAQD,KAAK,CAACC,OAAd,cAAyBD,KAAK,CAACE,QAA/B,cAA2CF,KAAK,CAACG,MAAjD,cAA2DH,KAAK,CAACI,KAAjE,CAAP;AACD;;AACD,cAAMC,WAAW,GAAG,IAAIC,KAAJ,CAAUL,OAAV,CAApB;AACAM,QAAAA,OAAO,CAACP,KAAR,CAAcA,KAAd;AACAJ,QAAAA,MAAM,CAACS,WAAD,CAAN;AACD,OAXD;;AAYA,YAAMG,YAAY,GAAG3B,eAAe,CAACG,IAAD,CAApC;AACA,WAAKQ,MAAL,CAAYiB,WAAZ,CAAwBzB,IAAxB,EAA8BwB,YAA9B;AACD,KAlBM,CAAP;AAmBD;;AAEDE,EAAAA,OAAO,GAAG;AACR,SAAKlB,MAAL,CAAYmB,SAAZ;AAEA,SAAKnB,MAAL,GAAc,IAAd;AACD;;AArC+B","sourcesContent":["/* global Worker */\nimport {getWorkerURL} from './get-worker-url';\nimport {getTransferList} from './get-transfer-list';\n\nlet count = 0;\n\n// By default resolves to the first message the worker sends back\nfunction defaultOnMessage({data, resolve}) {\n  resolve(data);\n}\n\nexport default class WorkerThread {\n  constructor({source, name = `web-worker-${count++}`, onMessage}) {\n    const url = getWorkerURL(source, name);\n    this.worker = new Worker(url, {name});\n    this.name = name;\n    this.onMessage = onMessage || defaultOnMessage;\n  }\n\n  /**\n   * Process binary data in a worker\n   */\n  async process(data) {\n    return new Promise((resolve, reject) => {\n      this.worker.onmessage = event => {\n        this.onMessage({worker: this.worker, data: event.data, resolve, reject});\n      };\n      this.worker.onerror = error => {\n        // Note Error object does not have the expected fields if loading failed completely\n        // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n        // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n        let message = `${this.name}: WorkerThread.process() failed`;\n        if (error.message) {\n          message += ` ${error.message} ${error.filename}:${error.lineno}:${error.colno}`;\n        }\n        const betterError = new Error(message);\n        console.error(error); // eslint-disable-line\n        reject(betterError);\n      };\n      const transferList = getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    });\n  }\n\n  destroy() {\n    this.worker.terminate();\n    // @ts-ignore\n    this.worker = null;\n  }\n}\n"],"file":"worker-thread.js"}