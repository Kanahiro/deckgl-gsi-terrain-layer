{"version":3,"sources":["../../../../src/lib/worker-utils/get-worker-url.js"],"names":["assert","workerURLCache","Map","getWorkerURL","workerSource","workerName","startsWith","endsWith","workerUrl","match","buildScript","workerURL","get","blob","Blob","type","URL","createObjectURL","set"],"mappings":"AACA,OAAOA,MAAP,MAAmB,qBAAnB;AAEA,MAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;AAIA,OAAO,SAASC,YAAT,CAAsBC,YAAtB,EAAoCC,UAAU,GAAG,QAAjD,EAA2D;AAChEL,EAAAA,MAAM,CAAC,OAAOI,YAAP,KAAwB,QAAzB,EAAmC,eAAnC,CAAN;;AAKA,MAAIA,YAAY,CAACE,UAAb,CAAwB,MAAxB,KAAmCF,YAAY,CAACG,QAAb,CAAsB,GAAtB,CAAvC,EAAmE;AACjE,UAAMC,SAAS,GAAGJ,YAAY,CAACK,KAAb,CAAmB,eAAnB,EAAoC,CAApC,CAAlB;;AAGA,QAAID,SAAS,IAAI,CAACA,SAAS,CAACF,UAAV,CAAqB,MAArB,CAAlB,EAAgD;AAC9C,aAAOE,SAAP;AACD;;AAKDJ,IAAAA,YAAY,GAAGM,WAAW,CAACF,SAAD,CAA1B;AACD;;AAED,MAAIG,SAAS,GAAGV,cAAc,CAACW,GAAf,CAAmBR,YAAnB,CAAhB;;AAEA,MAAI,CAACO,SAAL,EAAgB;AAGd,UAAME,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACV,YAAD,CAAT,EAAyB;AAACW,MAAAA,IAAI,EAAE;AAAP,KAAzB,CAAb;AACAJ,IAAAA,SAAS,GAAGK,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAZ;AACAZ,IAAAA,cAAc,CAACiB,GAAf,CAAmBd,YAAnB,EAAiCO,SAAjC;AACD;;AAED,SAAOA,SAAP;AACD;;AAGD,SAASD,WAAT,CAAqBF,SAArB,EAAgC;AAC9B,2CAEiBA,SAFjB;AAMD","sourcesContent":["/* global URL, Blob */\nimport assert from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n// Creates a URL from worker source that can be used to create `Worker` instances\n// Packages (and then caches) the result of `webworkify` as an \"Object URL\"\nexport function getWorkerURL(workerSource, workerName = 'Worker') {\n  assert(typeof workerSource === 'string', 'worker source');\n\n  // CASE: url(./worker.js)\n  // This pattern is used to differentiate worker urls from worker source code\n  // Load from url is needed for testing, when using Webpack & webworker target\n  if (workerSource.startsWith('url(') && workerSource.endsWith(')')) {\n    const workerUrl = workerSource.match(/^url\\((.*)\\)$/)[1];\n\n    // A local script url, we can use it to initialize a Worker directly\n    if (workerUrl && !workerUrl.startsWith('http')) {\n      return workerUrl;\n    }\n\n    // Per spec, worker cannot be initialized with a script from a different origin\n    // However a local worker script can still import scripts from other origins,\n    // so we simply build a wrapper script\n    workerSource = buildScript(workerUrl);\n  }\n\n  let workerURL = workerURLCache.get(workerSource);\n\n  if (!workerURL) {\n    // NOTE: webworkify was previously used\n    // const blob = webworkify(workerSource, {bare: true});\n    const blob = new Blob([workerSource], {type: 'application/javascript'});\n    workerURL = URL.createObjectURL(blob);\n    workerURLCache.set(workerSource, workerURL);\n  }\n\n  return workerURL;\n}\n\n// Only use trusted sources!\nfunction buildScript(workerUrl) {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n}`;\n}\n"],"file":"get-worker-url.js"}