{"version":3,"sources":["../../../../src/lib/process-utils/child-process-proxy.js"],"names":["ChildProcess","assert","getAvailablePort","DEFAULT_PROCESS_OPTIONS","command","arguments","portArg","port","basePort","wait","nodeSpawnOptions","maxBuffer","onSuccess","processProxy","console","log","options","ChildProcessProxy","constructor","id","childProcess","start","args","push","Promise","resolve","reject","successTimer","setTimeout","join","spawn","stderr","on","data","clearTimeout","Error","error","code","stop","kill","exit","statusCode","process","message"],"mappings":"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","sourcesContent":["// Forked from probe.gl under MIT license, Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n\n/* eslint-disable no-console */\n/* global process, setTimeout, clearTimeout, console */\nimport ChildProcess from 'child_process';\nimport assert from '../env-utils/assert';\nimport {getAvailablePort} from './process-utils';\n\nconst DEFAULT_PROCESS_OPTIONS = {\n  command: null,\n  arguments: [],\n  portArg: null,\n  port: 'auto',\n  basePort: 5000,\n  wait: 2000,\n  nodeSpawnOptions: {maxBuffer: 5000 * 1024},\n  onSuccess: processProxy => {\n    console.log(`Started ${processProxy.options.command}`);\n  }\n};\n\nexport default class ChildProcessProxy {\n  constructor({id = 'browser-driver'} = {}) {\n    this.id = id;\n    this.childProcess = null;\n    this.port = null;\n  }\n\n  async start(options = {}) {\n    options = {...DEFAULT_PROCESS_OPTIONS, ...options};\n    assert(options.command && typeof options.command === 'string');\n    this.options = options;\n\n    const args = [...options.arguments];\n\n    // If portArg is set, we can look up an available port\n    this.port = options.port;\n    if (options.portArg) {\n      if (this.port === 'auto') {\n        this.port = await getAvailablePort(options.basePort);\n      }\n      args.push(options.portArg, this.port);\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        const successTimer = setTimeout(() => {\n          if (options.onSuccess) {\n            options.onSuccess(this);\n          }\n          resolve({});\n        }, options.wait);\n\n        console.log(`Spawning ${options.command} ${options.arguments.join(' ')}`);\n        this.childProcess = ChildProcess.spawn(options.command, args, options.spawn);\n\n        // TODO - add option regarding whether stderr should be treated as data\n        this.childProcess.stderr.on('data', data => {\n          console.log(`Child process wrote to stderr: \"${data}\".`);\n          clearTimeout(successTimer);\n          reject(new Error(data));\n        });\n        this.childProcess.on('error', error => {\n          console.log(`Child process errored with ${error}`);\n          clearTimeout(successTimer);\n          reject(error);\n        });\n        this.childProcess.on('close', code => {\n          console.log(`Child process exited with ${code}`);\n          this.childProcess = null;\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async stop() {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  async exit(statusCode = 0) {\n    try {\n      await this.stop();\n      // eslint-disable-next-line no-process-exit\n      process.exit(statusCode);\n    } catch (error) {\n      console.error(error.message || error);\n      // eslint-disable-next-line no-process-exit\n      process.exit(1);\n    }\n  }\n}\n"],"file":"child-process-proxy.js"}