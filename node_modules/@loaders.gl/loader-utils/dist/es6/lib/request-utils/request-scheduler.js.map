{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.js"],"names":["Stats","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","constructor","props","requestQueue","activeRequestCount","requestMap","Map","stats","get","_deferredUpdate","scheduleRequest","handle","getPriority","Promise","resolve","done","has","request","promise","push","set","_issueNewRequests","_issueRequest","isDone","delete","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","length","shift","_updateRequest","splice","sort","a","b","priority"],"mappings":"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","sourcesContent":["// TODO - this should move to core when test cases are more complete\n\n/* global setTimeout */\nimport {Stats} from '@probe.gl/stats';\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n// TODO - Track requests globally, across multiple servers\nexport default class RequestScheduler {\n  constructor(props = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Tracks the number of active requests and prioritizes/cancels queued requests.\n    this.requestQueue = [];\n    this.activeRequestCount = 0;\n    this.requestMap = new Map();\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n\n    this._deferredUpdate = null;\n  }\n\n  // Called by an application that wants to issue a request, without having it deeply queued\n  // Parameter `getPriority` will be called when request \"slots\" open up,\n  //    allowing the caller to update priority or cancel the request\n  //    Highest priority executes first, priority < 0 cancels the request\n  // Returns: a promise that resolves to a request token when the request can be issued without queueing,\n  //    or `false` if the request has been cancelled (by getPriority)\n  scheduleRequest(handle, getPriority = () => 0) {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle);\n    }\n\n    const request = {handle, getPriority};\n    const promise = new Promise(resolve => {\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request) {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  // We check requests asynchronously, to prevent multiple updates\n  _issueNewRequests() {\n    if (!this._deferredUpdate) {\n      this._deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  // Refresh all requests and\n  _issueNewRequestsAsync() {\n    this._deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      if (this.requestQueue.length > 0) {\n        const request = this.requestQueue.shift();\n        this._issueRequest(request);\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  // Ensure all requests have updated priorities, and that no longer valid requests are cancelled\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  // Update a single request by calling the callback\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"request-scheduler.js"}