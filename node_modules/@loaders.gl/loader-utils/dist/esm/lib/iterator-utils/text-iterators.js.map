{"version":3,"sources":["../../../../src/lib/iterator-utils/text-iterators.js"],"names":["makeTextDecoderIterator","arrayBufferIterator","options","textDecoder","TextDecoder","arrayBuffer","decode","stream","makeTextEncoderIterator","textIterator","textEncoder","TextEncoder","text","encode","makeLineIterator","previous","textChunk","eolIndex","indexOf","line","slice","length","makeNumberedLineIterator","lineIterator","counter"],"mappings":"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","sourcesContent":["// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\n/* global TextDecoder, TextEncoder */\n\nexport async function* makeTextDecoderIterator(arrayBufferIterator, options) {\n  const textDecoder = new TextDecoder(options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string'\n      ? arrayBuffer\n      : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* makeTextEncoderIterator(textIterator, options) {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\n\nexport async function* makeLineIterator(textIterator) {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeNumberedLineIterator(lineIterator) {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"],"file":"text-iterators.js"}