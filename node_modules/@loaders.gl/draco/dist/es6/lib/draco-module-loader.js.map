{"version":3,"sources":["../../../src/lib/draco-module-loader.js"],"names":["loadLibrary","global","loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","options","modules","draco3d","Promise","resolve","draco","createDecoderModule","onModuleLoaded","loadDracoDecoder","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","DracoDecoderModule","wasmBinary","decoderType","all","initializeDracoDecoder","DracoEncoderModule"],"mappings":"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","sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary, global} from '@loaders.gl/loader-utils';\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      new Promise(resolve => {\n        const draco = modules.draco3d.createDecoderModule({\n          onModuleLoaded() {\n            resolve({draco});\n          }\n        });\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      new Promise(resolve => {\n        const draco = modules.draco3d.createEncoderModule({\n          onModuleLoaded() {\n            resolve({draco});\n          }\n        });\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary('draco_decoder.js', 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary('draco_wasm_wrapper.js', 'draco', options),\n        await loadLibrary('draco_decoder.wasm', 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || global.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: draco => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary('draco_encoder.js', 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || global.DracoEncoderModule;\n\n  return new Promise(resolve => {\n    DracoEncoderModule({\n      onModuleLoaded: draco => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n"],"file":"draco-module-loader.js"}