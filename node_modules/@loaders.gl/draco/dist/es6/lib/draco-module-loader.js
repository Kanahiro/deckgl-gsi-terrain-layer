import { loadLibrary, global } from '@loaders.gl/loader-utils';
let loadDecoderPromise;
let loadEncoderPromise;
export async function loadDracoDecoderModule(options) {
  const modules = options.modules || {};

  if (modules.draco3d) {
    loadDecoderPromise = loadDecoderPromise || new Promise(resolve => {
      const draco = modules.draco3d.createDecoderModule({
        onModuleLoaded() {
          resolve({
            draco
          });
        }

      });
    });
  } else {
    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);
  }

  return await loadDecoderPromise;
}
export async function loadDracoEncoderModule(options) {
  const modules = options.modules || {};

  if (modules.draco3d) {
    loadEncoderPromise = loadEncoderPromise || new Promise(resolve => {
      const draco = modules.draco3d.createEncoderModule({
        onModuleLoaded() {
          resolve({
            draco
          });
        }

      });
    });
  } else {
    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);
  }

  return await loadEncoderPromise;
}

async function loadDracoDecoder(options) {
  let DracoDecoderModule;
  let wasmBinary;

  switch (options.draco && options.draco.decoderType) {
    case 'js':
      DracoDecoderModule = await loadLibrary('draco_decoder.js', 'draco', options);
      break;

    case 'wasm':
    default:
      [DracoDecoderModule, wasmBinary] = await Promise.all([await loadLibrary('draco_wasm_wrapper.js', 'draco', options), await loadLibrary('draco_decoder.wasm', 'draco', options)]);
  }

  DracoDecoderModule = DracoDecoderModule || global.DracoDecoderModule;
  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);
}

function initializeDracoDecoder(DracoDecoderModule, wasmBinary) {
  const options = {};

  if (wasmBinary) {
    options.wasmBinary = wasmBinary;
  }

  return new Promise(resolve => {
    DracoDecoderModule({ ...options,
      onModuleLoaded: draco => resolve({
        draco
      })
    });
  });
}

async function loadDracoEncoder(options) {
  let DracoEncoderModule = await loadLibrary('draco_encoder.js', 'draco', options);
  DracoEncoderModule = DracoEncoderModule || global.DracoEncoderModule;
  return new Promise(resolve => {
    DracoEncoderModule({
      onModuleLoaded: draco => resolve({
        draco
      })
    });
  });
}
//# sourceMappingURL=draco-module-loader.js.map