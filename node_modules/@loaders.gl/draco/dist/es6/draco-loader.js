import { loadDracoDecoderModule } from './lib/draco-module-loader';
import DracoParser from './lib/draco-parser';
const VERSION = typeof "2.3.1" !== 'undefined' ? "2.3.1" : 'latest';
export const DracoWorkerLoader = {
  id: 'draco',
  name: 'Draco',
  version: VERSION,
  extensions: ['drc'],
  mimeTypes: ['application/octet-stream'],
  binary: true,
  tests: ['DRACO'],
  options: {
    draco: {
      decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js',
      libraryPath: "libs/",
      workerUrl: "https://unpkg.com/@loaders.gl/draco@".concat(VERSION, "/dist/draco-loader.worker.js"),
      localWorkerUrl: "modules/draco/dist/draco-loader.worker.dev.js",
      extraAttributes: {}
    }
  }
};
export const DracoLoader = { ...DracoWorkerLoader,
  parse
};

async function parse(arrayBuffer, options, context, loader) {
  const {
    draco
  } = await loadDracoDecoderModule(options);
  const dracoParser = new DracoParser(draco);

  try {
    return dracoParser.parseSync(arrayBuffer, {
      extraAttributes: options.draco && options.draco.extraAttributes || null,
      ...(options.parseOptions || {})
    });
  } finally {
    dracoParser.destroy();
  }
}
//# sourceMappingURL=draco-loader.js.map