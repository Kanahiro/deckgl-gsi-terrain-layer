{"version":3,"sources":["../../../src/lib/draco-builder.js"],"names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","DracoBuilder","draco","options","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","log","destroyEncodedObject","object","destroy","mesh","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","attributes","indices","dracoPointCloud","PointCloud","metadata","_addGeometryMetadata","_getAttributesFromMesh","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","dracoInt8ArrayToArrayBuffer","dracoMesh","Mesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","attribute","quantization","bits","dracoPosition","SetAttributeQuantization","optionalMetadata","attributesMetadata","positions","_getPositionAttribute","vertexCount","length","attributeName","uniqueId","_addAttributeToMesh","_addAttributeMetadata","name","error","ArrayBuffer","isView","type","_getDracoAttributeType","size","numFaces","AddFacesToMesh","builder","buffer","constructor","Int8Array","AddInt8Attribute","Int16Array","AddInt16Attribute","Int32Array","AddInt32Attribute","Uint8Array","Uint8ClampedArray","AddUInt8Attribute","Uint16Array","AddUInt16Attribute","Uint32Array","AddUInt32Attribute","Float32Array","AddFloatAttribute","toLowerCase","COLOR","TEX_COORD","GENERIC","dracoType","dracoGeometry","dracoMetadata","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","getEntries","key","value","Math","trunc","AddIntEntry","AddDoubleEntry","AddStringEntry","byteLength","outputBuffer","outputData","i","GetValue","container","hasEntriesFunc","entries","hasOwnProperty","Object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,gCAAgC,GAAG;AACvCC,EAAAA,QAAQ,EAAE,UAD6B;AAEvCC,EAAAA,MAAM,EAAE,QAF+B;AAGvCC,EAAAA,OAAO,EAAE,OAH8B;AAIvCC,EAAAA,UAAU,EAAE;AAJ2B,CAAzC;;AAOA,SAASC,IAAT,GAAgB,CAAE;;IAEGC,Y;AAEnB,wBAAYC,KAAZ,EAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAE/B,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,YAAL,GAAoB,IAAI,KAAKF,KAAL,CAAWG,OAAf,EAApB;AACA,SAAKC,gBAAL,GAAwB,IAAI,KAAKJ,KAAL,CAAWK,WAAf,EAAxB;AACA,SAAKC,oBAAL,GAA4B,IAAI,KAAKN,KAAL,CAAWO,eAAf,EAA5B;AACA,SAAKC,GAAL,GAAWP,OAAO,CAACO,GAAR,IAAeV,IAA1B;AACD;;;;8BAES;AACR,WAAKW,oBAAL,CAA0B,KAAKL,gBAA/B;AACA,WAAKK,oBAAL,CAA0B,KAAKP,YAA/B;AACA,WAAKO,oBAAL,CAA0B,KAAKH,oBAA/B;AAEA,WAAKF,gBAAL,GAAwB,IAAxB;AAEA,WAAKF,YAAL,GAAoB,IAApB;AAEA,WAAKF,KAAL,GAAa,IAAb;AACD;;;yCAGoBU,M,EAAQ;AAC3B,UAAIA,MAAJ,EAAY;AACV,aAAKV,KAAL,CAAWW,OAAX,CAAmBD,MAAnB;AACD;AACF;;;+BAGUE,I,EAAoB;AAAA,UAAdX,OAAc,uEAAJ,EAAI;;AAC7B,WAAKY,WAAL,CAAiBZ,OAAjB;;AAEA,aAAOA,OAAO,CAACa,UAAR,GACH,KAAKC,iBAAL,CAAuBH,IAAvB,EAA6BX,OAA7B,CADG,GAEH,KAAKe,WAAL,CAAiBJ,IAAjB,EAAuBX,OAAvB,CAFJ;AAGD;;;2CAIsBW,I,EAAM;AAE3B,UAAMK,UAAU,mCAAOL,IAAP,GAAgBA,IAAI,CAACK,UAArB,CAAhB;;AAEA,UAAIL,IAAI,CAACM,OAAT,EAAkB;AAChBD,QAAAA,UAAU,CAACC,OAAX,GAAqBN,IAAI,CAACM,OAA1B;AACD;;AACD,aAAOD,UAAP;AACD;;;sCAEiBH,U,EAAYb,O,EAAS;AACrC,UAAMkB,eAAe,GAAG,IAAI,KAAKnB,KAAL,CAAWoB,UAAf,EAAxB;;AAEA,UAAInB,OAAO,CAACoB,QAAZ,EAAsB;AACpB,aAAKC,oBAAL,CAA0BH,eAA1B,EAA2ClB,OAAO,CAACoB,QAAnD;AACD;;AAED,UAAMJ,UAAU,GAAG,KAAKM,sBAAL,CAA4BT,UAA5B,CAAnB;;AAGA,WAAKU,sBAAL,CAA4BL,eAA5B,EAA6CF,UAA7C,EAAyDhB,OAAzD;;AAEA,UAAMwB,SAAS,GAAG,IAAI,KAAKzB,KAAL,CAAW0B,cAAf,EAAlB;;AAEA,UAAI;AACF,YAAMC,UAAU,GAAG,KAAKzB,YAAL,CAAkB0B,6BAAlB,CACjBT,eADiB,EAEjB,KAFiB,EAGjBM,SAHiB,CAAnB;;AAMA,YAAI,EAAEE,UAAU,GAAG,CAAf,CAAJ,EAAuB;AACrB,gBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,aAAKrB,GAAL,yBAA0BW,eAAe,CAACW,UAAhB,EAA1B,mCACSX,eAAe,CAACY,cAAhB,EADT,8BAC6DJ,UAD7D;AAGA,eAAOK,2BAA2B,CAACP,SAAD,CAAlC;AACD,OAfD,SAeU;AACR,aAAKhB,oBAAL,CAA0BgB,SAA1B;AACA,aAAKhB,oBAAL,CAA0BU,eAA1B;AACD;AACF;;;gCAEWP,I,EAAMX,O,EAAS;AACzB,UAAMgC,SAAS,GAAG,IAAI,KAAKjC,KAAL,CAAWkC,IAAf,EAAlB;;AAEA,UAAIjC,OAAO,CAACoB,QAAZ,EAAsB;AACpB,aAAKC,oBAAL,CAA0BW,SAA1B,EAAqChC,OAAO,CAACoB,QAA7C;AACD;;AAED,UAAMJ,UAAU,GAAG,KAAKM,sBAAL,CAA4BX,IAA5B,CAAnB;;AAGA,WAAKuB,gBAAL,CAAsBF,SAAtB,EAAiChB,UAAjC,EAA6ChB,OAA7C;;AAEA,UAAMwB,SAAS,GAAG,IAAI,KAAKzB,KAAL,CAAW0B,cAAf,EAAlB;;AAEA,UAAI;AACF,YAAMC,UAAU,GAAG,KAAKzB,YAAL,CAAkBkC,uBAAlB,CAA0CH,SAA1C,EAAqDR,SAArD,CAAnB;;AACA,YAAIE,UAAU,IAAI,CAAlB,EAAqB;AACnB,gBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,aAAKrB,GAAL,yBAA0ByB,SAAS,CAACH,UAAV,EAA1B,mCACSG,SAAS,CAACF,cAAV,EADT,8BACuDJ,UADvD;AAGA,eAAOK,2BAA2B,CAACP,SAAD,CAAlC;AACD,OAVD,SAUU;AACR,aAAKhB,oBAAL,CAA0BgB,SAA1B;AACA,aAAKhB,oBAAL,CAA0BwB,SAA1B;AACD;AACF;;;gCAMWhC,O,EAAS;AACnB,UAAI,WAAWA,OAAf,EAAwB;AAAA;;AAEtB,mCAAKC,YAAL,EAAkBmC,eAAlB,+DAAqCpC,OAAO,CAACqC,KAA7C;AACD;;AACD,UAAI,YAAYrC,OAAhB,EAAyB;AACvB,YAAMsC,WAAW,GAAG,KAAKvC,KAAL,CAAWC,OAAO,CAACuC,MAAnB,CAApB;AAEA,aAAKtC,YAAL,CAAkBuC,iBAAlB,CAAoCF,WAApC;AACD;;AACD,UAAI,kBAAkBtC,OAAtB,EAA+B;AAC7B,aAAK,IAAMyC,SAAX,IAAwBzC,OAAO,CAAC0C,YAAhC,EAA8C;AAC5C,cAAMC,IAAI,GAAG3C,OAAO,CAAC0C,YAAR,CAAqBD,SAArB,CAAb;AACA,cAAMG,aAAa,GAAG,KAAK7C,KAAL,CAAW0C,SAAX,CAAtB;AACA,eAAKxC,YAAL,CAAkB4C,wBAAlB,CAA2CD,aAA3C,EAA0DD,IAA1D;AACD;AACF;AACF;;;qCAOgBX,S,EAAWhB,U,EAAYhB,O,EAAS;AAC/C,UAAM8C,gBAAgB,GAAG9C,OAAO,CAAC+C,kBAAR,IAA8B,EAAvD;;AAEA,UAAI;AACF,YAAMC,SAAS,GAAG,KAAKC,qBAAL,CAA2BjC,UAA3B,CAAlB;;AACA,YAAI,CAACgC,SAAL,EAAgB;AACd,gBAAM,IAAIpB,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMsB,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAvC;;AAEA,aAAK,IAAIC,aAAT,IAA0BpC,UAA1B,EAAsC;AACpC,cAAMyB,SAAS,GAAGzB,UAAU,CAACoC,aAAD,CAA5B;AACAA,UAAAA,aAAa,GAAG5D,gCAAgC,CAAC4D,aAAD,CAAhC,IAAmDA,aAAnE;;AACA,cAAMC,QAAQ,GAAG,KAAKC,mBAAL,CAAyBtB,SAAzB,EAAoCoB,aAApC,EAAmDX,SAAnD,EAA8DS,WAA9D,CAAjB;;AAEA,cAAIG,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,iBAAKE,qBAAL,CAA2BvB,SAA3B,EAAsCqB,QAAtC;AACEG,cAAAA,IAAI,EAAEJ;AADR,eAEMN,gBAAgB,CAACM,aAAD,CAAhB,IAAmC,EAFzC;AAID;AACF;AACF,OAnBD,CAmBE,OAAOK,KAAP,EAAc;AACd,aAAKjD,oBAAL,CAA0BwB,SAA1B;AACA,cAAMyB,KAAN;AACD;;AAED,aAAOzB,SAAP;AACD;;;2CAOsBd,e,EAAiBF,U,EAAYhB,O,EAAS;AAC3D,UAAM8C,gBAAgB,GAAG9C,OAAO,CAAC+C,kBAAR,IAA8B,EAAvD;;AAEA,UAAI;AACF,YAAMC,SAAS,GAAG,KAAKC,qBAAL,CAA2BjC,UAA3B,CAAlB;;AACA,YAAI,CAACgC,SAAL,EAAgB;AACd,gBAAM,IAAIpB,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMsB,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAvC;;AAEA,aAAK,IAAIC,aAAT,IAA0BpC,UAA1B,EAAsC;AACpC,cAAMyB,SAAS,GAAGzB,UAAU,CAACoC,aAAD,CAA5B;AACAA,UAAAA,aAAa,GAAG5D,gCAAgC,CAAC4D,aAAD,CAAhC,IAAmDA,aAAnE;;AACA,cAAMC,QAAQ,GAAG,KAAKC,mBAAL,CACfpC,eADe,EAEfkC,aAFe,EAGfX,SAHe,EAIfS,WAJe,CAAjB;;AAMA,cAAIG,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,iBAAKE,qBAAL,CAA2BrC,eAA3B,EAA4CmC,QAA5C;AACEG,cAAAA,IAAI,EAAEJ;AADR,eAEMN,gBAAgB,CAACM,aAAD,CAAhB,IAAmC,EAFzC;AAID;AACF;AACF,OAvBD,CAuBE,OAAOK,KAAP,EAAc;AACd,aAAKjD,oBAAL,CAA0BU,eAA1B;AACA,cAAMuC,KAAN;AACD;;AAED,aAAOvC,eAAP;AACD;;;wCAQmBP,I,EAAMyC,a,EAAeX,S,EAAWS,W,EAAa;AAC/D,UAAI,CAACQ,WAAW,CAACC,MAAZ,CAAmBlB,SAAnB,CAAL,EAAoC;AAClC,eAAO,CAAC,CAAR;AACD;;AAED,UAAMmB,IAAI,GAAG,KAAKC,sBAAL,CAA4BT,aAA5B,CAAb;;AAEA,UAAMU,IAAI,GAAGrB,SAAS,CAACU,MAAV,GAAmBD,WAAhC;;AAEA,UAAIU,IAAI,KAAK,SAAb,EAAwB;AAEtB,YAAMG,QAAQ,GAAGtB,SAAS,CAACU,MAAV,GAAmB,CAApC;AACA,aAAK5C,GAAL,4BAA6B6C,aAA7B,oBAAoDW,QAApD;AAGA,aAAK5D,gBAAL,CAAsB6D,cAAtB,CAAqCrD,IAArC,EAA2CoD,QAA3C,EAAqDtB,SAArD;AACA,eAAO,CAAC,CAAR;AACD;;AAED,WAAKlC,GAAL,4BAA6B6C,aAA7B,oBAAoDU,IAApD;AAEA,UAAMG,OAAO,GAAG,KAAK9D,gBAArB;AArB+D,UAsBxD+D,MAtBwD,GAsB9CzB,SAtB8C,CAsBxDyB,MAtBwD;;AAwB/D,cAAQzB,SAAS,CAAC0B,WAAlB;AACE,aAAKC,SAAL;AACE,iBAAOH,OAAO,CAACI,gBAAR,CAAyB1D,IAAzB,EAA+BiD,IAA/B,EAAqCV,WAArC,EAAkDY,IAAlD,EAAwD,IAAIM,SAAJ,CAAcF,MAAd,CAAxD,CAAP;;AAEF,aAAKI,UAAL;AACE,iBAAOL,OAAO,CAACM,iBAAR,CAA0B5D,IAA1B,EAAgCiD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAIQ,UAAJ,CAAeJ,MAAf,CAAzD,CAAP;;AAEF,aAAKM,UAAL;AACE,iBAAOP,OAAO,CAACQ,iBAAR,CAA0B9D,IAA1B,EAAgCiD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAIU,UAAJ,CAAeN,MAAf,CAAzD,CAAP;;AACF,aAAKQ,UAAL;AACA,aAAKC,iBAAL;AACE,iBAAOV,OAAO,CAACW,iBAAR,CAA0BjE,IAA1B,EAAgCiD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAIY,UAAJ,CAAeR,MAAf,CAAzD,CAAP;;AAEF,aAAKW,WAAL;AACE,iBAAOZ,OAAO,CAACa,kBAAR,CAA2BnE,IAA3B,EAAiCiD,IAAjC,EAAuCV,WAAvC,EAAoDY,IAApD,EAA0D,IAAIe,WAAJ,CAAgBX,MAAhB,CAA1D,CAAP;;AAEF,aAAKa,WAAL;AACE,iBAAOd,OAAO,CAACe,kBAAR,CAA2BrE,IAA3B,EAAiCiD,IAAjC,EAAuCV,WAAvC,EAAoDY,IAApD,EAA0D,IAAIiB,WAAJ,CAAgBb,MAAhB,CAA1D,CAAP;;AAEF,aAAKe,YAAL;AACA;AACE,iBAAOhB,OAAO,CAACiB,iBAAR,CAA0BvE,IAA1B,EAAgCiD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAImB,YAAJ,CAAiBf,MAAjB,CAAzD,CAAP;AArBJ;AAuBD;;;2CAOsBd,a,EAAe;AACpC,cAAQA,aAAa,CAAC+B,WAAd,EAAR;AACE,aAAK,SAAL;AACE,iBAAO,SAAP;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACA,aAAK,UAAL;AACE,iBAAO,KAAKpF,KAAL,CAAWN,QAAlB;;AACF,aAAK,QAAL;AACA,aAAK,SAAL;AACE,iBAAO,KAAKM,KAAL,CAAWL,MAAlB;;AACF,aAAK,OAAL;AACA,aAAK,QAAL;AACE,iBAAO,KAAKK,KAAL,CAAWqF,KAAlB;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACE,iBAAO,KAAKrF,KAAL,CAAWsF,SAAlB;;AACF;AACE,iBAAO,KAAKtF,KAAL,CAAWuF,OAAlB;AAjBJ;AAmBD;;;0CAEqBtE,U,EAAY;AAChC,WAAK,IAAMoC,aAAX,IAA4BpC,UAA5B,EAAwC;AACtC,YAAMyB,SAAS,GAAGzB,UAAU,CAACoC,aAAD,CAA5B;;AACA,YAAMmC,SAAS,GAAG,KAAK1B,sBAAL,CAA4BT,aAA5B,CAAlB;;AACA,YAAImC,SAAS,KAAK,KAAKxF,KAAL,CAAWN,QAA7B,EAAuC;AACrC,iBAAOgD,SAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;yCAOoB+C,a,EAAepE,Q,EAAU;AAC5C,UAAMqE,aAAa,GAAG,IAAI,KAAK1F,KAAL,CAAW2F,QAAf,EAAtB;;AACA,WAAKC,sBAAL,CAA4BF,aAA5B,EAA2CrE,QAA3C;;AACA,WAAKjB,gBAAL,CAAsByF,WAAtB,CAAkCJ,aAAlC,EAAiDC,aAAjD;AACD;;;0CAQqBD,a,EAAeK,iB,EAAmBzE,Q,EAAU;AAGhE,UAAM0E,sBAAsB,GAAG,IAAI,KAAK/F,KAAL,CAAW2F,QAAf,EAA/B;;AACA,WAAKC,sBAAL,CAA4BG,sBAA5B,EAAoD1E,QAApD;;AAGA,WAAKjB,gBAAL,CAAsB4F,uBAAtB,CACEP,aADF,EAEEK,iBAFF,EAGEC,sBAHF;AAKD;;;2CAOsBL,a,EAAerE,Q,EAAU;AAAA,iDACnB4E,UAAU,CAAC5E,QAAD,CADS;AAAA;;AAAA;AAC9C,4DAAiD;AAAA;AAAA,cAArC6E,GAAqC;AAAA,cAAhCC,KAAgC;;AAC/C,2CAAeA,KAAf;AACE,iBAAK,QAAL;AACE,kBAAIC,IAAI,CAACC,KAAL,CAAWF,KAAX,MAAsBA,KAA1B,EAAiC;AAC/B,qBAAK7F,oBAAL,CAA0BgG,WAA1B,CAAsCZ,aAAtC,EAAqDQ,GAArD,EAA0DC,KAA1D;AACD,eAFD,MAEO;AACL,qBAAK7F,oBAAL,CAA0BiG,cAA1B,CAAyCb,aAAzC,EAAwDQ,GAAxD,EAA6DC,KAA7D;AACD;;AACD;;AACF,iBAAK,QAAL;AACA;AACE,mBAAK7F,oBAAL,CAA0BkG,cAA1B,CAAyCd,aAAzC,EAAwDQ,GAAxD,EAA6DC,KAA7D;AAVJ;AAYD;AAd6C;AAAA;AAAA;AAAA;AAAA;AAe/C;;;;;;;AASH,SAASnE,2BAAT,CAAqCP,SAArC,EAAgD;AAC9C,MAAMgF,UAAU,GAAGhF,SAAS,CAACsC,IAAV,EAAnB;AACA,MAAM2C,YAAY,GAAG,IAAI/C,WAAJ,CAAgB8C,UAAhB,CAArB;AACA,MAAME,UAAU,GAAG,IAAItC,SAAJ,CAAcqC,YAAd,CAAnB;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgC,EAAEG,CAAlC,EAAqC;AACnCD,IAAAA,UAAU,CAACC,CAAD,CAAV,GAAgBnF,SAAS,CAACoF,QAAV,CAAmBD,CAAnB,CAAhB;AACD;;AACD,SAAOF,YAAP;AACD;;AAGD,SAAST,UAAT,CAAoBa,SAApB,EAA+B;AAC7B,MAAMC,cAAc,GAAGD,SAAS,CAACE,OAAV,IAAqB,CAACF,SAAS,CAACG,cAAV,CAAyB,SAAzB,CAA7C;AACA,SAAOF,cAAc,GAAGD,SAAS,CAACE,OAAV,EAAH,GAAyBE,MAAM,CAACF,OAAP,CAAeF,SAAf,CAA9C;AACD","sourcesContent":["// This code is inspired by example code in the DRACO repository\n/** @typedef {import('../types/draco-types')} Draco3D */\n/** @typedef {import('../types/draco-types').TypedArray} TypedArray */\n/** @typedef {import('../types/draco-types').DracoInt8Array} DracoInt8Array */\n/** @typedef {import('../types/draco-types').Encoder} Encoder */\n/** @typedef {import('../types/draco-types').Mesh} Mesh */\n/** @typedef {import('../types/draco-types').PointCloud} PointCloud */\n/** @typedef {import('../types/draco-types').Metadata} Metadata */\n/** @typedef {import('../types/draco-types').PointCloudBuilder} PointCloudBuilder */\n/** @typedef {import('../types/draco-types').MetadataBuilder} MetadataBuilder */\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nfunction noop() {}\n\nexport default class DracoBuilder {\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco, options = {}) {\n    /** @type {Draco3D} */\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n    this.log = options.log || noop;\n  }\n\n  destroy() {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object) {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  // Encode mesh=({})\n  encodeSync(mesh, options = {}) {\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud, options) {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh, options) {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMesh` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options) {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh, attributes, options) {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {PointCloud} dracoPointCloud\n   * @param {object} attributes\n   * @returns {PointCloud}\n   */\n  _createDracoPointCloud(dracoPointCloud, attributes, options) {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param {PointCloud} mesh\n   * @param {string} attributeName\n   * @param {TypedArray} attribute\n   * @param {number} vertexCount\n   */\n  _addAttributeToMesh(mesh, attributeName, attribute, vertexCount) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param {*} attributeName\n   */\n  _getDracoAttributeType(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texCoord':\n      case 'texCoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param {PointCloud} dracoGeometry - WASM Draco Object\n   * @param {Map<string, string>|{[key: string]: string}} metadata\n   */\n  _addGeometryMetadata(dracoGeometry, metadata) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param {PointCloud} dracoGeometry - WASM Draco Object\n   * @param {number} uniqueAttributeId\n   * @param {Map<string, string>|{[key: string]: string}} metadata\n   */\n  _addAttributeMetadata(dracoGeometry, uniqueAttributeId, metadata) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param {Metadata} dracoMetadata - WASM Draco Object\n   * @param {Map<string, string>|{[key: string]: string}} metadata\n   */\n  _populateDracoMetadata(dracoMetadata, metadata) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param {DracoInt8Array} dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"],"file":"draco-builder.js"}