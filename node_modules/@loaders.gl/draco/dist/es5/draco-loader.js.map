{"version":3,"sources":["../../src/draco-loader.js"],"names":["VERSION","DracoWorkerLoader","id","name","version","extensions","mimeTypes","binary","tests","options","draco","decoderType","WebAssembly","libraryPath","workerUrl","localWorkerUrl","extraAttributes","DracoLoader","parse","arrayBuffer","context","loader","dracoParser","DracoParser","parseSync","parseOptions","destroy"],"mappings":";;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;AAIA,IAAMA,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,QAAnE;AAGO,IAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,EAAE,EAAE,OAD2B;AAE/BC,EAAAA,IAAI,EAAE,OAFyB;AAG/BC,EAAAA,OAAO,EAAEJ,OAHsB;AAI/BK,EAAAA,UAAU,EAAE,CAAC,KAAD,CAJmB;AAK/BC,EAAAA,SAAS,EAAE,CAAC,0BAAD,CALoB;AAM/BC,EAAAA,MAAM,EAAE,IANuB;AAO/BC,EAAAA,KAAK,EAAE,CAAC,OAAD,CAPwB;AAQ/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,WAAW,EAAE,QAAOC,WAAP,0DAAOA,WAAP,OAAuB,QAAvB,GAAkC,MAAlC,GAA2C,IADnD;AAELC,MAAAA,WAAW,SAFN;AAGLC,MAAAA,SAAS,gDAAyCd,OAAzC,iCAHJ;AAILe,MAAAA,cAAc,iDAJT;AAKLC,MAAAA,eAAe,EAAE;AALZ;AADA;AARsB,CAA1B;;;AAoBA,IAAMC,WAAW,mCACnBhB,iBADmB;AAEtBiB,EAAAA,KAAK,EAALA;AAFsB,EAAjB;;;;SAKQA,K;;;;;2EAAf,iBAAqBC,WAArB,EAAkCV,OAAlC,EAA2CW,OAA3C,EAAoDC,MAApD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACwB,+CAAuBZ,OAAvB,CADxB;;AAAA;AAAA;AACSC,YAAAA,KADT,yBACSA,KADT;AAEQY,YAAAA,WAFR,GAEsB,IAAIC,uBAAJ,CAAgBb,KAAhB,CAFtB;AAAA;AAAA,6CAMWY,WAAW,CAACE,SAAZ,CAAsBL,WAAtB;AACLH,cAAAA,eAAe,EAAGP,OAAO,CAACC,KAAR,IAAiBD,OAAO,CAACC,KAAR,CAAcM,eAAhC,IAAoD;AADhE,eAEDP,OAAO,CAACgB,YAAR,IAAwB,EAFvB,EANX;;AAAA;AAAA;AAWIH,YAAAA,WAAW,CAACI,OAAZ;AAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\nimport DracoParser from './lib/draco-parser';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {WorkerLoaderObject} */\nexport const DracoWorkerLoader = {\n  id: 'draco',\n  name: 'Draco',\n  version: VERSION,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: {\n    draco: {\n      decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js', // 'js' for IE11\n      libraryPath: `libs/`,\n      workerUrl: `https://unpkg.com/@loaders.gl/draco@${VERSION}/dist/draco-loader.worker.js`,\n      localWorkerUrl: `modules/draco/dist/draco-loader.worker.dev.js`,\n      extraAttributes: {}\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer, options, context, loader) {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    // TODO passing in options causes CI failures...\n    // @ts-ignore\n    return dracoParser.parseSync(arrayBuffer, {\n      extraAttributes: (options.draco && options.draco.extraAttributes) || null,\n      ...(options.parseOptions || {})\n    });\n  } finally {\n    dracoParser.destroy();\n  }\n}\n"],"file":"draco-loader.js"}