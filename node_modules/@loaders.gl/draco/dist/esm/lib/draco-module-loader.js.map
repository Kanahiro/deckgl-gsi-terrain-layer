{"version":3,"sources":["../../../src/lib/draco-module-loader.js"],"names":["loadLibrary","global","loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","options","modules","draco3d","Promise","resolve","draco","createDecoderModule","onModuleLoaded","loadDracoDecoder","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","decoderType","DracoDecoderModule","all","wasmBinary","initializeDracoDecoder","DracoEncoderModule"],"mappings":"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","sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary, global} from '@loaders.gl/loader-utils';\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      new Promise(resolve => {\n        const draco = modules.draco3d.createDecoderModule({\n          onModuleLoaded() {\n            resolve({draco});\n          }\n        });\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      new Promise(resolve => {\n        const draco = modules.draco3d.createEncoderModule({\n          onModuleLoaded() {\n            resolve({draco});\n          }\n        });\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary('draco_decoder.js', 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary('draco_wasm_wrapper.js', 'draco', options),\n        await loadLibrary('draco_decoder.wasm', 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || global.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: draco => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary('draco_encoder.js', 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || global.DracoEncoderModule;\n\n  return new Promise(resolve => {\n    DracoEncoderModule({\n      onModuleLoaded: draco => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n"],"file":"draco-module-loader.js"}