{"version":3,"sources":["../../../src/lib/parse-mvt.js"],"names":["parseMVT","arrayBuffer","options","mvt","gis","byteLength","tile","VectorTile","Protobuf","loaderOptions","features","selectedLayers","Array","isArray","layers","Object","keys","forEach","layerName","vectorTileLayer","featureOptions","i","length","vectorTileFeature","feature","decodedFeature","getDecodedFeature","push","format","data","wgs84Coordinates","coordinates","hasTileIndex","tileIndex","Number","isFinite","x","y","z","Error","toGeoJSON","transformToLocalCoordinates","layerProperty","properties"],"mappings":"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","sourcesContent":["// import {VectorTile} from '@mapbox/vector-tile';\nimport VectorTile from './mapbox-vector-tile/vector-tile';\n\nimport {geojsonToBinary} from '@loaders.gl/gis';\nimport Protobuf from 'pbf';\nimport {transformCoordinates, transformToLocalCoordinates} from './transform-to-local-range';\n\n/*\n  * Parse MVT arrayBuffer and return GeoJSON.\n  *\n  * @param {arrayBuffer} _ A MVT arrayBuffer\n  * @return {?Object} A GeoJSON geometry object\n  */\nexport default function parseMVT(arrayBuffer, options) {\n  options = options || {};\n  options.mvt = options.mvt || {};\n  options.gis = options.gis || {};\n\n  if (arrayBuffer.byteLength === 0) {\n    return [];\n  }\n\n  const tile = new VectorTile(new Protobuf(arrayBuffer));\n  const loaderOptions = options.mvt;\n  const features = [];\n\n  const selectedLayers = Array.isArray(loaderOptions.layers)\n    ? loaderOptions.layers\n    : Object.keys(tile.layers);\n\n  selectedLayers.forEach(layerName => {\n    const vectorTileLayer = tile.layers[layerName];\n    const featureOptions = {...loaderOptions, layerName};\n\n    if (!vectorTileLayer) {\n      return;\n    }\n\n    for (let i = 0; i < vectorTileLayer.length; i++) {\n      const vectorTileFeature = vectorTileLayer.feature(i);\n\n      const decodedFeature = getDecodedFeature(vectorTileFeature, featureOptions);\n      features.push(decodedFeature);\n    }\n  });\n\n  if (options.gis.format === 'binary') {\n    const data = geojsonToBinary(features);\n    // Add the original byteLength (as a reasonable approximation of the size of the binary data)\n    // TODO decide where to store extra fields like byteLength (header etc) and document\n    // @ts-ignore\n    data.byteLength = arrayBuffer.byteLength;\n    return data;\n  }\n  return features;\n}\n\nfunction getDecodedFeature(feature, options = {}) {\n  const wgs84Coordinates = options.coordinates === 'wgs84';\n  const hasTileIndex =\n    options.tileIndex &&\n    Number.isFinite(options.tileIndex.x) &&\n    Number.isFinite(options.tileIndex.y) &&\n    Number.isFinite(options.tileIndex.z);\n\n  if (wgs84Coordinates && !hasTileIndex) {\n    throw new Error('MVT Loader: WGS84 coordinates need tileIndex property. Check documentation.');\n  }\n\n  const decodedFeature =\n    wgs84Coordinates && hasTileIndex\n      ? feature.toGeoJSON(options.tileIndex.x, options.tileIndex.y, options.tileIndex.z)\n      : transformCoordinates(feature, transformToLocalCoordinates);\n\n  // Add layer name to GeoJSON properties\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = options.layerName;\n  }\n\n  return decodedFeature;\n}\n"],"file":"parse-mvt.js"}