{"version":3,"sources":["../../../src/lib/transform-to-local-range.js"],"names":["geometryTypes","transformToLocalCoordinates","line","feature","i","length","point","x","extent","y","transformCoordinates","transform","coordinates","feature_","type","loadGeometry","points","classifyRings","j","generateJSON","geometryType","jsonResult","geometry","properties","id","rings","len","polygons","polygon","ccw","area","signedArea","undefined","push","ring","sum","p1","p2"],"mappings":"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","sourcesContent":["const geometryTypes = ['Unknown', 'Point', 'LineString', 'Polygon'];\n\nexport function transformToLocalCoordinates(line, feature) {\n  // This function transforms local coordinates in a\n  // [0 - bufferSize, this.extent + bufferSize] range to a\n  // [0 - (bufferSize / this.extent), 1 + (bufferSize / this.extent)] range.\n  // The resulting extent would be 1.\n\n  for (let i = 0; i < line.length; i++) {\n    const point = line[i];\n\n    line[i] = [point.x / feature.extent, point.y / feature.extent];\n  }\n}\n\nexport function transformCoordinates(feature, transform = (coordinates, feature_) => coordinates) {\n  const type = geometryTypes[feature.type];\n  let coordinates = feature.loadGeometry();\n\n  switch (feature.type) {\n    // Point\n    case 1:\n      const points = [];\n      for (let i = 0; i < coordinates.length; i++) {\n        points[i] = coordinates[i][0];\n      }\n      coordinates = points;\n      transform(coordinates, feature);\n      break;\n\n    // LineString\n    case 2:\n      for (let i = 0; i < coordinates.length; i++) {\n        transform(coordinates[i], feature);\n      }\n      break;\n\n    // Polygon\n    case 3:\n      coordinates = classifyRings(coordinates);\n      for (let i = 0; i < coordinates.length; i++) {\n        for (let j = 0; j < coordinates[i].length; j++) {\n          transform(coordinates[i][j], feature);\n        }\n      }\n      break;\n\n    default:\n      break;\n  }\n\n  return generateJSON(type, feature, coordinates);\n}\n\nfunction generateJSON(type, feature, coordinates) {\n  let geometryType = type;\n\n  if (coordinates.length === 1) {\n    coordinates = coordinates[0];\n  } else {\n    geometryType = `Multi${type}`;\n  }\n\n  const jsonResult = {\n    type: 'Feature',\n    geometry: {\n      type: geometryType,\n      coordinates\n    },\n    properties: feature.properties || {}\n  };\n\n  if ('id' in feature) {\n    jsonResult.id = feature.id;\n  }\n\n  return jsonResult;\n}\n\n/*\n* Methods below are extracted and modified from @mapbox/vector-tile\n* https://github.com/mapbox/vector-tile-js/blob/58df1e9344ee64f26deee84a9f54cee11fb95ef6/lib/vectortilefeature.js#L197-L233\n*/\n\n// classifies an array of rings into polygons with outer rings and holes\nfunction classifyRings(rings) {\n  const len = rings.length;\n\n  if (len <= 1) return [rings];\n\n  const polygons = [];\n  let polygon;\n  let ccw;\n\n  for (let i = 0; i < len; i++) {\n    const area = signedArea(rings[i]);\n\n    if (area === 0) {\n      /* eslint-disable-next-line no-continue */\n      continue;\n    }\n\n    if (ccw === undefined) ccw = area < 0;\n\n    if (ccw === area < 0) {\n      if (polygon) {\n        polygons.push(polygon);\n      }\n\n      polygon = [rings[i]];\n    } else if (polygon) {\n      polygon.push(rings[i]);\n    }\n  }\n\n  if (polygon) polygons.push(polygon);\n\n  return polygons;\n}\n\nfunction signedArea(ring) {\n  const length = ring.length;\n  let sum = 0;\n  let p1;\n  let p2;\n\n  for (let i = 0, j = length - 1; i < length; j = i++) {\n    p1 = ring[i];\n    p2 = ring[j];\n    sum += (p2.x - p1.x) * (p1.y + p2.y);\n  }\n\n  return sum;\n}\n"],"file":"transform-to-local-range.js"}