{"version":3,"sources":["../../../../src/geometry/gl/gl-type.js"],"names":["GL_TYPE_TO_ARRAY_TYPE","GL","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","name","clamped","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getArrayType","BYTES_PER_ELEMENT","Boolean","buffer","byteOffset","length","undefined","byteLength","getByteSize"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAEA,IAAMA,qBAAqB,wFACxBC,mBAAGC,MADqB,EACZC,YADY,2DAExBF,mBAAGG,KAFqB,EAEbC,YAFa,2DAGxBJ,mBAAGK,cAHqB,EAGJC,WAHI,2DAIxBN,mBAAGO,YAJqB,EAINC,WAJM,2DAKxBR,mBAAGS,aALqB,EAKLC,UALK,2DAMxBV,mBAAGW,IANqB,EAMdC,SANc,2DAOxBZ,mBAAGa,KAPqB,EAObC,UAPa,2DAQxBd,mBAAGe,GARqB,EAQfC,UARe,yBAA3B;AAWA,IAAMC,eAAe,GAAG;AACtBhB,EAAAA,MAAM,EAAED,mBAAGC,MADW;AAEtBE,EAAAA,KAAK,EAAEH,mBAAGG,KAFY;AAGtBE,EAAAA,cAAc,EAAEL,mBAAGK,cAHG;AAItBE,EAAAA,YAAY,EAAEP,mBAAGO,YAJK;AAKtBE,EAAAA,aAAa,EAAET,mBAAGS,aALI;AAMtBE,EAAAA,IAAI,EAAEX,mBAAGW,IANa;AAOtBE,EAAAA,KAAK,EAAEb,mBAAGa,KAPY;AAQtBE,EAAAA,GAAG,EAAEf,mBAAGe;AARc,CAAxB;AAWA,IAAMG,mBAAmB,GAAG,2BAA5B;;IAIqBC,M;;;;;;;mCAGGC,W,EAAa;AAEjCA,MAAAA,WAAW,GAAGC,WAAW,CAACC,MAAZ,CAAmBF,WAAnB,IAAkCA,WAAW,CAACG,WAA9C,GAA4DH,WAA1E;;AACA,WAAK,IAAMI,MAAX,IAAqBzB,qBAArB,EAA4C;AAC1C,YAAM0B,SAAS,GAAG1B,qBAAqB,CAACyB,MAAD,CAAvC;;AACA,YAAIC,SAAS,KAAKL,WAAlB,EAA+B;AAC7B,iBAAOI,MAAP;AACD;AACF;;AACD,YAAM,IAAIE,KAAJ,CAAUR,mBAAV,CAAN;AACD;;;6BAEeS,I,EAAM;AACpB,UAAMH,MAAM,GAAGP,eAAe,CAACU,IAAD,CAA9B;;AACA,UAAI,CAACH,MAAL,EAAa;AACX,cAAM,IAAIE,KAAJ,CAAUR,mBAAV,CAAN;AACD;;AACD,aAAOM,MAAP;AACD;;;iCAImBA,M,EAAyB;AAAA,UAAjBI,OAAiB,uEAAP,KAAO;;AAC3C,cAAQJ,MAAR;AACE,aAAKxB,mBAAG6B,oBAAR;AACA,aAAK7B,mBAAG8B,sBAAR;AACA,aAAK9B,mBAAG+B,sBAAR;AACE,iBAAOzB,WAAP;;AAEF;AACE,cAAMmB,SAAS,GAAG1B,qBAAqB,CAACyB,MAAD,CAAvC;;AACA,cAAI,CAACC,SAAL,EAAgB;AACd,kBAAM,IAAIC,KAAJ,CAAUR,mBAAV,CAAN;AACD;;AACD,iBAAOO,SAAP;AAXJ;AAaD;;;gCAEkBD,M,EAAQ;AACzB,UAAMC,SAAS,GAAGN,MAAM,CAACa,YAAP,CAAoBR,MAApB,CAAlB;AACA,aAAOC,SAAS,CAACQ,iBAAjB;AACD;;;6BAEeT,M,EAAQ;AACtB,aAAOU,OAAO,CAACf,MAAM,CAACa,YAAP,CAAoBR,MAApB,CAAD,CAAd;AACD;;;qCAEuBA,M,EAAQW,M,EAAgC;AAAA,UAAxBC,UAAwB,uEAAX,CAAW;AAAA,UAARC,MAAQ;;AAC9D,UAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxBD,QAAAA,MAAM,GAAG,CAACF,MAAM,CAACI,UAAP,GAAoBH,UAArB,IAAmCjB,MAAM,CAACqB,WAAP,CAAmBhB,MAAnB,CAA5C;AACD;;AAED,UAAMC,SAAS,GAAGN,MAAM,CAACa,YAAP,CAAoBR,MAApB,CAAlB;AAEA,aAAO,IAAIC,SAAJ,CAAcU,MAAd,EAAsBC,UAAtB,EAAkCC,MAAlC,CAAP;AACD","sourcesContent":["import {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\n\nconst NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\n\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  static fromTypedArray(arrayOrType) {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n\n  static fromName(name) {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType, clamped = false) {\n    switch (glType) {\n      case GL.UNSIGNED_SHORT_5_6_5:\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        return Uint16Array;\n\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n\n  static getByteSize(glType) {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static validate(glType) {\n    return Boolean(GLType.getArrayType(glType));\n  }\n\n  static createTypedArray(glType, buffer, byteOffset = 0, length) {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n\n    const ArrayType = GLType.getArrayType(glType);\n\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"],"file":"gl-type.js"}