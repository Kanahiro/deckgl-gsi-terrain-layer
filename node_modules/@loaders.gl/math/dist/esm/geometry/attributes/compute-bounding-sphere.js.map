{"version":3,"sources":["../../../../src/geometry/attributes/compute-bounding-sphere.js"],"names":["getPositions","computeBoundingSphere","geometry","boundingBox","positions","center","getBoundingBox","box","setFromBufferAttribute","position","getCenter","maxRadiusSq","makeAttributeIterator","vector","x","y","z","Math","max","distanceToSquared","radius","sqrt","assert","Number","isFinite"],"mappings":";;;;;;AAGA,SAAQA,YAAR,QAA2B,+BAA3B;AAEA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,WAAzC,EAAsD;AAC3D,MAAMC,SAAS,GAAGJ,YAAY,CAACE,QAAD,CAA9B;AAEA,MAAMG,MAAM,GAAGC,cAAc,CAACD,MAAD,CAA7B;AACAE,EAAAA,GAAG,CAACC,sBAAJ,CAA2BC,QAA3B;AACAF,EAAAA,GAAG,CAACG,SAAJ,CAAcL,MAAd;AAKA,MAAIM,WAAW,GAAG,CAAlB;;AAV2D,6CAYpCC,qBAAqB,CAACR,SAAD,CAZe;AAAA;;AAAA;AAY3D,wDAAyD;AAAA,UAA9CK,SAA8C;AACvDI,MAAAA,MAAM,CAACC,CAAP,GAAWL,SAAQ,CAAC,CAAD,CAAnB;AACAI,MAAAA,MAAM,CAACE,CAAP,GAAWN,SAAQ,CAAC,CAAD,CAAnB;AACAI,MAAAA,MAAM,CAACG,CAAP,GAAWP,SAAQ,CAAC,CAAD,CAAnB;AACAE,MAAAA,WAAW,GAAGM,IAAI,CAACC,GAAL,CAASP,WAAT,EAAsBN,MAAM,CAACc,iBAAP,CAAyBN,MAAzB,CAAtB,CAAd;AACD;AAjB0D;AAAA;AAAA;AAAA;AAAA;;AAmB3D,MAAMO,MAAM,GAAGH,IAAI,CAACI,IAAL,CAAUV,WAAV,CAAf;AACAW,EAAAA,MAAM,CAACC,MAAM,CAACC,QAAP,CAAgBJ,MAAhB,CAAD,CAAN;AAEA,SAAO;AAACf,IAAAA,MAAM,EAANA,MAAD;AAASe,IAAAA,MAAM,EAANA;AAAT,GAAP;AACD","sourcesContent":["/* eslint-disable */\n// @ts-nocheck\n\nimport {getPositions} from './get-attribute-from-geometry';\n\nexport function computeBoundingSphere(geometry, boundingBox) {\n  const positions = getPositions(geometry);\n\n  const center = getBoundingBox(center);\n  box.setFromBufferAttribute(position);\n  box.getCenter(center);\n\n  // hoping to find a boundingSphere with a radius smaller than the\n  // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n  var maxRadiusSq = 0;\n\n  for (const position of makeAttributeIterator(positions)) {\n    vector.x = position[0];\n    vector.y = position[1];\n    vector.z = position[2];\n    maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n  }\n\n  const radius = Math.sqrt(maxRadiusSq);\n  assert(Number.isFinite(radius));\n\n  return {center, radius};\n}\n"],"file":"compute-bounding-sphere.js"}