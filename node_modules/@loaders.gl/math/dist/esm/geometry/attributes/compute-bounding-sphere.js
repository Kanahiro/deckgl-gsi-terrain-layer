function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { getPositions } from './get-attribute-from-geometry';
export function computeBoundingSphere(geometry, boundingBox) {
  var positions = getPositions(geometry);
  var center = getBoundingBox(center);
  box.setFromBufferAttribute(position);
  box.getCenter(center);
  var maxRadiusSq = 0;

  var _iterator = _createForOfIteratorHelper(makeAttributeIterator(positions)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _position = _step.value;
      vector.x = _position[0];
      vector.y = _position[1];
      vector.z = _position[2];
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var radius = Math.sqrt(maxRadiusSq);
  assert(Number.isFinite(radius));
  return {
    center: center,
    radius: radius
  };
}
//# sourceMappingURL=compute-bounding-sphere.js.map