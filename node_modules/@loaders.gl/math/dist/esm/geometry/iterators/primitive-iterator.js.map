{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.js"],"names":["makePrimitiveIterator","GL","getPrimitiveModeType","assert","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"mappings":"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","sourcesContent":["/** @typedef {import('./primitive-iterator')} types */\nimport {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// Will iterate over each primitive, expanding (dereferencing) indices\n/** @type {types['makePrimitiveIterator']} */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator({indices, attributes, mode, start = 0, end}) {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n\n    yield info;\n  }\n}\n"],"file":"primitive-iterator.js"}