{"version":3,"sources":["../../../../src/geometry/attributes/compute-vertex-normals.js"],"names":["Vector3","GL","assert","makePrimitiveIterator","getPrimitiveModeType","getPositions","computeVertexNormals","mode","indices","attributes","TRIANGLES","values","positions","normals","Float32Array","length","vectorA","vectorB","vectorC","vectorCB","vectorAB","primitive","fromArray","i1","i2","i3","subVectors","normal","cross","normalize","primitiveIndex","x","y","z"],"mappings":"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","sourcesContent":["/** @typedef {import('./compute-vertex-normals')} types */\nimport {Vector3} from '@math.gl/core';\nimport {GL} from '../constants';\nimport assert from '../utils/assert';\nimport {makePrimitiveIterator} from '../iterators/primitive-iterator';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {getPositions} from './get-attribute-from-geometry';\n\n/** @type {types['computeVertexNormals']} */\n// eslint-disable-next-line max-statements\nexport function computeVertexNormals({mode, indices, attributes}) {\n  // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n  assert(getPrimitiveModeType(mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  const {values: positions} = getPositions({mode, indices, attributes});\n\n  const normals = new Float32Array(positions.length);\n\n  const vectorA = new Vector3();\n  const vectorB = new Vector3();\n  const vectorC = new Vector3();\n\n  const vectorCB = new Vector3();\n  const vectorAB = new Vector3();\n\n  for (const primitive of makePrimitiveIterator({mode, indices, attributes})) {\n    vectorA.fromArray(positions, primitive.i1 * 3);\n    vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n    vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n\n    vectorCB.subVectors(vectorC, vectorB);\n    vectorAB.subVectors(vectorA, vectorB);\n    const normal = vectorCB.cross(vectorAB);\n    normal.normalize();\n\n    // @ts-ignore\n    const {primitiveIndex} = primitive;\n\n    normals[primitiveIndex * 9 + 0] = normal.x;\n    normals[primitiveIndex * 9 + 1] = normal.y;\n    normals[primitiveIndex * 9 + 2] = normal.z;\n\n    normals[primitiveIndex * 9 + 3] = normal.x;\n    normals[primitiveIndex * 9 + 4] = normal.y;\n    normals[primitiveIndex * 9 + 5] = normal.z;\n\n    normals[primitiveIndex * 9 + 6] = normal.x;\n    normals[primitiveIndex * 9 + 7] = normal.y;\n    normals[primitiveIndex * 9 + 8] = normal.z;\n  }\n\n  return normals;\n}\n"],"file":"compute-vertex-normals.js"}