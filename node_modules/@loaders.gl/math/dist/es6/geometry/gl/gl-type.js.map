{"version":3,"sources":["../../../../src/geometry/gl/gl-type.js"],"names":["GL_TYPE","GL","GL_TYPE_TO_ARRAY_TYPE","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","fromTypedArray","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","fromName","name","getArrayType","clamped","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getByteSize","BYTES_PER_ELEMENT","validate","Boolean","createTypedArray","buffer","byteOffset","length","undefined","byteLength"],"mappings":"AAAA,SAAQA,OAAO,IAAIC,EAAnB,QAA4B,cAA5B;AAEA,MAAMC,qBAAqB,GAAG;AAC5B,GAACD,EAAE,CAACE,MAAJ,GAAaC,YADe;AAE5B,GAACH,EAAE,CAACI,KAAJ,GAAYC,YAFgB;AAG5B,GAACL,EAAE,CAACM,cAAJ,GAAqBC,WAHO;AAI5B,GAACP,EAAE,CAACQ,YAAJ,GAAmBC,WAJS;AAK5B,GAACT,EAAE,CAACU,aAAJ,GAAoBC,UALQ;AAM5B,GAACX,EAAE,CAACY,IAAJ,GAAWC,SANiB;AAO5B,GAACb,EAAE,CAACc,KAAJ,GAAYC,UAPgB;AAQ5B,GAACf,EAAE,CAACgB,GAAJ,GAAUC;AARkB,CAA9B;AAWA,MAAMC,eAAe,GAAG;AACtBhB,EAAAA,MAAM,EAAEF,EAAE,CAACE,MADW;AAEtBE,EAAAA,KAAK,EAAEJ,EAAE,CAACI,KAFY;AAGtBE,EAAAA,cAAc,EAAEN,EAAE,CAACM,cAHG;AAItBE,EAAAA,YAAY,EAAER,EAAE,CAACQ,YAJK;AAKtBE,EAAAA,aAAa,EAAEV,EAAE,CAACU,aALI;AAMtBE,EAAAA,IAAI,EAAEZ,EAAE,CAACY,IANa;AAOtBE,EAAAA,KAAK,EAAEd,EAAE,CAACc,KAPY;AAQtBE,EAAAA,GAAG,EAAEhB,EAAE,CAACgB;AARc,CAAxB;AAWA,MAAMG,mBAAmB,GAAG,2BAA5B;AAIA,eAAe,MAAMC,MAAN,CAAa;AAG1B,SAAOC,cAAP,CAAsBC,WAAtB,EAAmC;AAEjCA,IAAAA,WAAW,GAAGC,WAAW,CAACC,MAAZ,CAAmBF,WAAnB,IAAkCA,WAAW,CAACG,WAA9C,GAA4DH,WAA1E;;AACA,SAAK,MAAMI,MAAX,IAAqBzB,qBAArB,EAA4C;AAC1C,YAAM0B,SAAS,GAAG1B,qBAAqB,CAACyB,MAAD,CAAvC;;AACA,UAAIC,SAAS,KAAKL,WAAlB,EAA+B;AAC7B,eAAOI,MAAP;AACD;AACF;;AACD,UAAM,IAAIE,KAAJ,CAAUT,mBAAV,CAAN;AACD;;AAED,SAAOU,QAAP,CAAgBC,IAAhB,EAAsB;AACpB,UAAMJ,MAAM,GAAGR,eAAe,CAACY,IAAD,CAA9B;;AACA,QAAI,CAACJ,MAAL,EAAa;AACX,YAAM,IAAIE,KAAJ,CAAUT,mBAAV,CAAN;AACD;;AACD,WAAOO,MAAP;AACD;;AAID,SAAOK,YAAP,CAAoBL,MAApB,EAA4BM,OAAO,GAAG,KAAtC,EAA6C;AAC3C,YAAQN,MAAR;AACE,WAAK1B,EAAE,CAACiC,oBAAR;AACA,WAAKjC,EAAE,CAACkC,sBAAR;AACA,WAAKlC,EAAE,CAACmC,sBAAR;AACE,eAAO5B,WAAP;;AAEF;AACE,cAAMoB,SAAS,GAAG1B,qBAAqB,CAACyB,MAAD,CAAvC;;AACA,YAAI,CAACC,SAAL,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUT,mBAAV,CAAN;AACD;;AACD,eAAOQ,SAAP;AAXJ;AAaD;;AAED,SAAOS,WAAP,CAAmBV,MAAnB,EAA2B;AACzB,UAAMC,SAAS,GAAGP,MAAM,CAACW,YAAP,CAAoBL,MAApB,CAAlB;AACA,WAAOC,SAAS,CAACU,iBAAjB;AACD;;AAED,SAAOC,QAAP,CAAgBZ,MAAhB,EAAwB;AACtB,WAAOa,OAAO,CAACnB,MAAM,CAACW,YAAP,CAAoBL,MAApB,CAAD,CAAd;AACD;;AAED,SAAOc,gBAAP,CAAwBd,MAAxB,EAAgCe,MAAhC,EAAwCC,UAAU,GAAG,CAArD,EAAwDC,MAAxD,EAAgE;AAC9D,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxBD,MAAAA,MAAM,GAAG,CAACF,MAAM,CAACI,UAAP,GAAoBH,UAArB,IAAmCtB,MAAM,CAACgB,WAAP,CAAmBV,MAAnB,CAA5C;AACD;;AAED,UAAMC,SAAS,GAAGP,MAAM,CAACW,YAAP,CAAoBL,MAApB,CAAlB;AAEA,WAAO,IAAIC,SAAJ,CAAcc,MAAd,EAAsBC,UAAtB,EAAkCC,MAAlC,CAAP;AACD;;AA1DyB","sourcesContent":["import {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\n\nconst NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\n\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  static fromTypedArray(arrayOrType) {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n\n  static fromName(name) {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType, clamped = false) {\n    switch (glType) {\n      case GL.UNSIGNED_SHORT_5_6_5:\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        return Uint16Array;\n\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n\n  static getByteSize(glType) {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static validate(glType) {\n    return Boolean(GLType.getArrayType(glType));\n  }\n\n  static createTypedArray(glType, buffer, byteOffset = 0, length) {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n\n    const ArrayType = GLType.getArrayType(glType);\n\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"],"file":"gl-type.js"}