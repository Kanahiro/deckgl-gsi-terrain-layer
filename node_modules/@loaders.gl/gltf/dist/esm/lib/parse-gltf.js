import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { ImageLoader } from '@loaders.gl/images';
import { parseJSON, getZeroOffsetArrayBuffer } from '@loaders.gl/loader-utils';
import assert from './utils/assert';
import { resolveUrl } from './gltf-utils/resolve-url';
import { getTypedArrayForBufferView } from './gltf-utils/get-typed-array';
import { decodeExtensions } from './extensions/gltf-extensions';
import parseGLBSync, { isGLB } from './parse-glb';
import normalizeGLTFV1 from './normalize-gltf-v1';
import postProcessGLTF from './post-process-gltf';
export function isGLTF(arrayBuffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var dataView = new DataView(arrayBuffer);
  var byteOffset = 0;
  return isGLB(dataView, byteOffset);
}
export function parseGLTF(_x, _x2) {
  return _parseGLTF.apply(this, arguments);
}

function _parseGLTF() {
  _parseGLTF = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltf, arrayBufferOrString) {
    var byteOffset,
        options,
        context,
        promises,
        _promise,
        promise,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            byteOffset = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;
            options = _args.length > 3 ? _args[3] : undefined;
            context = _args.length > 4 ? _args[4] : undefined;
            parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);
            normalizeGLTFV1(gltf, {
              normalize: options.gltf.normalize
            });
            promises = [];

            if (options.gltf.loadImages) {
              _promise = loadImages(gltf, options, context);
              promises.push(_promise);
            }

            if (!options.gltf.loadBuffers) {
              _context.next = 10;
              break;
            }

            _context.next = 10;
            return loadBuffers(gltf, options, context);

          case 10:
            promise = decodeExtensions(gltf, options, context);
            promises.push(promise);
            _context.next = 14;
            return Promise.all(promises);

          case 14:
            return _context.abrupt("return", options.gltf.postProcess ? postProcessGLTF(gltf, options) : gltf);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseGLTF.apply(this, arguments);
}

function parseGLTFContainerSync(gltf, data, byteOffset, options) {
  if (options.uri) {
    gltf.baseUri = options.uri;
  }

  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {
    var textDecoder = new TextDecoder();
    data = textDecoder.decode(data);
  }

  if (typeof data === 'string') {
    gltf.json = parseJSON(data);
  } else if (data instanceof ArrayBuffer) {
    var glb = {};
    byteOffset = parseGLBSync(glb, data, byteOffset, options);
    assert(glb.type === 'glTF', "Invalid GLB magic string ".concat(glb.type));
    gltf._glb = glb;
    gltf.json = glb.json;
  } else {
    assert(false, "GLTF: must be ArrayBuffer or string");
  }

  var buffers = gltf.json.buffers || [];
  gltf.buffers = new Array(buffers.length).fill(null);

  if (gltf._glb && gltf._glb.header.hasBinChunk) {
    var binChunks = gltf._glb.binChunks;
    gltf.buffers[0] = {
      arrayBuffer: binChunks[0].arrayBuffer,
      byteOffset: binChunks[0].byteOffset,
      byteLength: binChunks[0].byteLength
    };
  }

  var images = gltf.json.images || [];
  gltf.images = new Array(images.length).fill({});
}

function loadBuffers(_x3, _x4, _x5) {
  return _loadBuffers.apply(this, arguments);
}

function _loadBuffers() {
  _loadBuffers = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(gltf, options, context) {
    var i, buffer, fetch, uri, response, arrayBuffer;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < gltf.json.buffers.length)) {
              _context2.next = 18;
              break;
            }

            buffer = gltf.json.buffers[i];

            if (!buffer.uri) {
              _context2.next = 15;
              break;
            }

            fetch = context.fetch;
            assert(fetch);
            uri = resolveUrl(buffer.uri, options);
            _context2.next = 9;
            return fetch(uri);

          case 9:
            response = _context2.sent;
            _context2.next = 12;
            return response.arrayBuffer();

          case 12:
            arrayBuffer = _context2.sent;
            gltf.buffers[i] = {
              arrayBuffer: arrayBuffer,
              byteOffset: 0,
              byteLength: arrayBuffer.byteLength
            };
            delete buffer.uri;

          case 15:
            ++i;
            _context2.next = 1;
            break;

          case 18:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadBuffers.apply(this, arguments);
}

function loadImages(_x6, _x7, _x8) {
  return _loadImages.apply(this, arguments);
}

function _loadImages() {
  _loadImages = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(gltf, options, context) {
    var images, promises, i;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            images = gltf.json.images || [];
            promises = [];

            for (i = 0; i < images.length; ++i) {
              promises.push(loadImage(gltf, images[i], i, options, context));
            }

            _context3.next = 5;
            return Promise.all(promises);

          case 5:
            return _context3.abrupt("return", _context3.sent);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _loadImages.apply(this, arguments);
}

function loadImage(_x9, _x10, _x11, _x12, _x13) {
  return _loadImage.apply(this, arguments);
}

function _loadImage() {
  _loadImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(gltf, image, i, options, context) {
    var fetch, parse, arrayBuffer, uri, response, array, parsedImage;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            fetch = context.fetch, parse = context.parse;

            if (!image.uri) {
              _context4.next = 9;
              break;
            }

            uri = resolveUrl(image.uri, options);
            _context4.next = 5;
            return fetch(uri);

          case 5:
            response = _context4.sent;
            _context4.next = 8;
            return response.arrayBuffer();

          case 8:
            arrayBuffer = _context4.sent;

          case 9:
            if (Number.isFinite(image.bufferView)) {
              array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);
              arrayBuffer = getZeroOffsetArrayBuffer(array.buffer, array.byteOffset, array.byteLength);
            }

            assert(arrayBuffer, 'glTF image has no data');
            _context4.next = 13;
            return parse(arrayBuffer, ImageLoader, {}, context);

          case 13:
            parsedImage = _context4.sent;
            gltf.images[i] = parsedImage;

          case 15:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _loadImage.apply(this, arguments);
}
//# sourceMappingURL=parse-gltf.js.map