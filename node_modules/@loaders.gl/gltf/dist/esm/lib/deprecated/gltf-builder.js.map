{"version":3,"sources":["../../../../src/lib/deprecated/gltf-builder.js"],"names":["getBinaryImageMIMEType","getBinaryImageSize","assert","UBER_POINT_CLOUD_EXTENSION","GLBBuilder","packBinaryJson","data","builder","packOptions","packTypedArrays","GLTFBuilder","options","DracoWriter","DracoLoader","key","jsonData","json","packedJson","packedTypedArrays","extras","extensionName","extensions","registerUsedExtension","addExtension","registerRequiredExtension","extensionsUsed","find","ext","push","extensionsRequired","attributes","indices","mode","Error","compressedData","encodeSync","draco","pointcloud","bufferViewIndex","addBufferView","glTFMesh","primitives","bufferView","meshes","length","imageData","mimeType","width","height","images"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {getBinaryImageMIMEType, getBinaryImageSize} from '@loaders.gl/images';\nimport assert from '../utils/assert';\nimport {UBER_POINT_CLOUD_EXTENSION} from '../gltf-constants';\nimport GLBBuilder from './glb-builder';\n\nfunction packBinaryJson(data, builder, packOptions) {\n  assert(!packOptions.packTypedArrays);\n  return data;\n}\n\nexport default class GLTFBuilder extends GLBBuilder {\n  constructor(options = {}) {\n    super(options);\n\n    // Soft dependency on DRACO, app needs to import and supply these\n    this.DracoWriter = options.DracoWriter;\n    this.DracoLoader = options.DracoLoader;\n  }\n\n  // NOTE: encode() inherited from GLBBuilder\n\n  // TODO - support encoding to non-GLB versions of glTF format\n  // Encode as a textual JSON file with binary data in base64 data URLs.\n  // encodeAsDataURLs(options)\n  // Encode as a JSON with all images (and buffers?) in separate binary files\n  // encodeAsSeparateFiles(options)\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    const jsonData = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n    this.json[key] = jsonData;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtraData(key, data, packOptions = {}) {\n    const packedJson = packOptions.packedTypedArrays\n      ? packBinaryJson(data, this, packOptions)\n      : data;\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = packedJson;\n    return this;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = packedJson;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addRequiredExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n    this.addExtension(extensionName, packedJson);\n    this.registerRequiredExtension(extensionName);\n    return this;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // mode:\n  // POINTS:  0x0000,\n  // LINES: 0x0001,\n  // LINE_LOOP: 0x0002,\n  // LINE_STRIP:  0x0003,\n  // TRIANGLES: 0x0004,\n  // TRIANGLE_STRIP:  0x0005,\n  // TRIANGLE_FAN:  0x0006,\n\n  addMesh(attributes, indices, mode = 4) {\n    assert(false);\n    return -1;\n  }\n\n  addPointCloud(attributes) {\n    assert(false);\n    return -1;\n  }\n\n  // eslint-disable-next-line max-len\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n  // Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n  addCompressedMesh(attributes, indices, mode = 4) {\n    assert(false);\n    return -1;\n  }\n\n  addCompressedPointCloud(attributes) {\n    if (!this.DracoWriter || !this.DracoLoader) {\n      throw new Error('DracoWriter/DracoLoader not available');\n    }\n\n    attributes.mode = 0;\n    const compressedData = this.DracoWriter.encodeSync(attributes, {draco: {pointcloud: true}});\n\n    const bufferViewIndex = this.addBufferView(compressedData);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: {}, // This will be populated after decompression\n          mode: 0, // GL.POINTS\n          extensions: {\n            [UBER_POINT_CLOUD_EXTENSION]: {\n              bufferView: bufferViewIndex\n            }\n          }\n        }\n      ]\n    };\n\n    this.registerRequiredExtension(UBER_POINT_CLOUD_EXTENSION);\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData) {\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    // Get the properties of the image to add as metadata.\n    const mimeType = getBinaryImageMIMEType(imageData) || {};\n    if (mimeType) {\n      const {width, height} = getBinaryImageSize(imageData, mimeType) || {};\n      this.json.images.push({\n        bufferView: bufferViewIndex,\n        mimeType,\n        width,\n        height\n      });\n    } else {\n      // TODO: Spec violation, if we are using a bufferView, mimeType must be defined:\n      //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n      //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n      this.json.images.push({\n        bufferView: bufferViewIndex\n      });\n    }\n\n    return this.json.images.length - 1;\n  }\n}\n"],"file":"gltf-builder.js"}