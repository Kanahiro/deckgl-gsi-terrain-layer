{"version":3,"sources":["../../../../src/lib/deprecated/glb-builder.js"],"names":["padTo4Bytes","copyToArray","isImage","getAccessorTypeFromSize","getComponentTypeFromArray","encodeGLBSync","GLBBuilder","options","byteLength","json","buffers","bufferViews","accessors","images","meshes","sourceBuffers","log","console","imageData","encodeAsGLB","_packBinaryChunk","magic","warn","glb","version","binary","arrayBuffer","glbArrayBuffer","ArrayBuffer","dataView","DataView","key","data","packOptions","sourceBuffer","accessor","size","bufferViewIndex","addBufferView","accessorDefaults","componentType","count","Math","round","length","addAccessor","Object","assign","buffer","push","byteOffset","bufferView","type","totalByteLength","targetArray","Uint8Array","dstByteOffset","i"],"mappings":";;AAGA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,0BAAvC;AACA,SAAQC,OAAO,IAAPA,QAAR,QAAsB,oBAAtB;AACA,SAAQC,uBAAR,EAAiCC,yBAAjC,QAAiE,0BAAjE;AACA,OAAOC,aAAP,MAA0B,eAA1B;;IAEqBC,U;AACnB,wBAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAGxB,SAAKC,UAAL,GAAkB,CAAlB;AAEA,SAAKC,IAAL,GAAY;AACVC,MAAAA,OAAO,EAAE,CACP;AAEEF,QAAAA,UAAU,EAAE;AAFd,OADO,CADC;AAOVG,MAAAA,WAAW,EAAE,EAPH;AAQVC,MAAAA,SAAS,EAAE,EARD;AASVC,MAAAA,MAAM,EAAE,EATE;AAUVC,MAAAA,MAAM,EAAE;AAVE,KAAZ;AAeA,SAAKC,aAAL,GAAqB,EAArB;AAEA,SAAKC,GAAL,GAAWT,OAAO,CAACS,GAAR,IAAeC,OAA1B;AACD;;;;oCAIe;AACd,aAAO,KAAKT,UAAZ;AACD;;;4BAGOU,S,EAAW;AACjB,aAAOhB,QAAO,CAACgB,SAAD,CAAd;AACD;;;iCAGwB;AAAA,UAAdX,OAAc,uEAAJ,EAAI;AACvB,aAAO,KAAKY,WAAL,CAAiBZ,OAAjB,CAAP;AACD;;;kCAOyB;AAAA,UAAdA,OAAc,uEAAJ,EAAI;;AAExB,WAAKa,gBAAL;;AAEA,UAAIb,OAAO,CAACc,KAAZ,EAAmB;AACjBJ,QAAAA,OAAO,CAACK,IAAR,CAAa,8CAAb;AACD;;AAED,UAAMC,GAAG,GAAG;AACVC,QAAAA,OAAO,EAAE,CADC;AAEVf,QAAAA,IAAI,EAAE,KAAKA,IAFD;AAGVgB,QAAAA,MAAM,EAAE,KAAKC;AAHH,OAAZ;AAOA,UAAMlB,UAAU,GAAGH,aAAa,CAACkB,GAAD,EAAM,IAAN,EAAY,CAAZ,EAAehB,OAAf,CAAhC;AACA,UAAMoB,cAAc,GAAG,IAAIC,WAAJ,CAAgBpB,UAAhB,CAAvB;AAGA,UAAMqB,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,cAAb,CAAjB;AACAtB,MAAAA,aAAa,CAACkB,GAAD,EAAMM,QAAN,EAAgB,CAAhB,EAAmBtB,OAAnB,CAAb;AAEA,aAAOoB,cAAP;AACD;;;uCAIkBI,G,EAAKC,I,EAAwB;AAAA,UAAlBC,WAAkB,uEAAJ,EAAI;AAC9C,WAAKxB,IAAL,CAAUsB,GAAV,IAAiBC,IAAjB;AACA,aAAO,IAAP;AACD;;;8BAKSE,Y,EAAoC;AAAA,UAAtBC,QAAsB,uEAAX;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAW;AAC5C,UAAMC,eAAe,GAAG,KAAKC,aAAL,CAAmBJ,YAAnB,CAAxB;AAEA,UAAMK,gBAAgB,GAAG;AACvBH,QAAAA,IAAI,EAAED,QAAQ,CAACC,IADQ;AAEvBI,QAAAA,aAAa,EAAEpC,yBAAyB,CAAC8B,YAAD,CAFjB;AAGvBO,QAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWT,YAAY,CAACU,MAAb,GAAsBT,QAAQ,CAACC,IAA1C;AAHgB,OAAzB;AAMA,aAAO,KAAKS,WAAL,CAAiBR,eAAjB,EAAkCS,MAAM,CAACC,MAAP,CAAcR,gBAAd,EAAgCJ,QAAhC,CAAlC,CAAP;AACD;;;kCAQaa,M,EAAQ;AACpB,UAAMxC,UAAU,GAAGwC,MAAM,CAACxC,UAAP,IAAqBwC,MAAM,CAACJ,MAA/C;AAGA,WAAKnC,IAAL,CAAUE,WAAV,CAAsBsC,IAAtB,CAA2B;AACzBD,QAAAA,MAAM,EAAE,CADiB;AAGzBE,QAAAA,UAAU,EAAE,KAAK1C,UAHQ;AAIzBA,QAAAA,UAAU,EAAVA;AAJyB,OAA3B;AASA,WAAKA,UAAL,IAAmBR,WAAW,CAACQ,UAAD,CAA9B;AAGA,WAAKO,aAAL,CAAmBkC,IAAnB,CAAwBD,MAAxB;AAGA,aAAO,KAAKvC,IAAL,CAAUE,WAAV,CAAsBiC,MAAtB,GAA+B,CAAtC;AACD;;;gCAGWP,e,EAAiBF,Q,EAAU;AAErC,WAAK1B,IAAL,CAAUG,SAAV,CAAoBqC,IAApB,CAAyB;AACvBE,QAAAA,UAAU,EAAEd,eADW;AAEvBe,QAAAA,IAAI,EAAEjD,uBAAuB,CAACgC,QAAQ,CAACC,IAAV,CAFN;AAGvBI,QAAAA,aAAa,EAAEL,QAAQ,CAACK,aAHD;AAIvBC,QAAAA,KAAK,EAAEN,QAAQ,CAACM;AAJO,OAAzB;AAOA,aAAO,KAAKhC,IAAL,CAAUG,SAAV,CAAoBgC,MAApB,GAA6B,CAApC;AACD;;;4BAKO;AACN,WAAKxB,gBAAL;;AACA,aAAO;AAACM,QAAAA,WAAW,EAAE,KAAKA,WAAnB;AAAgCjB,QAAAA,IAAI,EAAE,KAAKA;AAA3C,OAAP;AACD;;;uCAGkB;AAEjB,UAAI,KAAKiB,WAAT,EAAsB;AACpB;AACD;;AAGD,UAAM2B,eAAe,GAAG,KAAK7C,UAA7B;AACA,UAAMkB,WAAW,GAAG,IAAIE,WAAJ,CAAgByB,eAAhB,CAApB;AACA,UAAMC,WAAW,GAAG,IAAIC,UAAJ,CAAe7B,WAAf,CAApB;AAGA,UAAI8B,aAAa,GAAG,CAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1C,aAAL,CAAmB6B,MAAvC,EAA+Ca,CAAC,EAAhD,EAAoD;AAClD,YAAMvB,YAAY,GAAG,KAAKnB,aAAL,CAAmB0C,CAAnB,CAArB;AACAD,QAAAA,aAAa,GAAGvD,WAAW,CAACiC,YAAD,EAAeoB,WAAf,EAA4BE,aAA5B,CAA3B;AACD;;AAGD,WAAK/C,IAAL,CAAUC,OAAV,CAAkB,CAAlB,EAAqBF,UAArB,GAAkC6C,eAAlC;AAGA,WAAK3B,WAAL,GAAmBA,WAAnB;AAGA,WAAKX,aAAL,GAAqB,EAArB;AACD;;;yCAGoB;AACnB,aAAO;AACLL,QAAAA,OAAO,EAAE,KAAKD,IAAL,CAAUC,OAAV,CAAkBkC,MADtB;AAELjC,QAAAA,WAAW,EAAE,KAAKF,IAAL,CAAUE,WAAV,CAAsBiC,MAF9B;AAGLhC,QAAAA,SAAS,EAAE,KAAKH,IAAL,CAAUG,SAAV,CAAoBgC,MAH1B;AAIL/B,QAAAA,MAAM,EAAE,KAAKJ,IAAL,CAAUI,MAAV,CAAiB+B;AAJpB,OAAP;AAMD;;;;;;SApLkBtC,U","sourcesContent":["// @ts-nocheck\n\n/* eslint-disable camelcase, max-statements */\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {isImage} from '@loaders.gl/images';\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from '../gltf-utils/gltf-utils';\nimport encodeGLBSync from '../encode-glb';\n\nexport default class GLBBuilder {\n  constructor(options = {}) {\n    // Lets us keep track of how large the body will be, as well as the offset for each of the\n    // original buffers.\n    this.byteLength = 0;\n\n    this.json = {\n      buffers: [\n        {\n          // Just the single BIN chunk buffer\n          byteLength: 0 // Updated at end of conversion\n        }\n      ],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n\n    // list of binary buffers to be written to the BIN chunk\n    // (Each call to addBuffer, addImage etc adds an entry here)\n    this.sourceBuffers = [];\n\n    this.log = options.log || console; // eslint-disable-line\n  }\n\n  // ACCESSORS\n\n  getByteLength() {\n    return this.byteLength;\n  }\n\n  // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)\n  isImage(imageData) {\n    return isImage(imageData);\n  }\n\n  // MODIFERS\n  encodeSync(options = {}) {\n    return this.encodeAsGLB(options);\n  }\n\n  // Encode the full glTF file as a binary GLB file\n  // Returns an ArrayBuffer that represents the complete GLB image that can be saved to file\n  // Encode the full GLB buffer with header etc\n  // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n  // glb-file-format-specification\n  encodeAsGLB(options = {}) {\n    // TODO - avoid double array buffer creation\n    this._packBinaryChunk();\n\n    if (options.magic) {\n      console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line\n    }\n\n    const glb = {\n      version: 2,\n      json: this.json,\n      binary: this.arrayBuffer\n    };\n\n    // Calculate length and allocate buffer\n    const byteLength = encodeGLBSync(glb, null, 0, options);\n    const glbArrayBuffer = new ArrayBuffer(byteLength);\n\n    // Encode into buffer\n    const dataView = new DataView(glbArrayBuffer);\n    encodeGLBSync(glb, dataView, 0, options);\n\n    return glbArrayBuffer;\n  }\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Basic glTF adders: basic memory buffer/image type fields\n  // Scenegraph specific adders are placed in glTFBuilder\n  // TODO: These should be moved to glTFBuilder once addBuffer\n  // have been rewritten to not depend on these.\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength || buffer.length;\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews.push({\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    });\n\n    // We've now written the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte aligned\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers.push(buffer);\n\n    // Return the index to the just created bufferView\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    // Add an accessor pointing to the new buffer view\n    this.json.accessors.push({\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    });\n\n    return this.json.accessors.length - 1;\n  }\n\n  // PRIVATE\n\n  // For testing\n  _pack() {\n    this._packBinaryChunk();\n    return {arrayBuffer: this.arrayBuffer, json: this.json};\n  }\n\n  // Pack the binary chunk\n  _packBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // Report internal buffer sizes for debug and testing purposes\n  _getInternalCounts() {\n    return {\n      buffers: this.json.buffers.length,\n      bufferViews: this.json.bufferViews.length,\n      accessors: this.json.accessors.length,\n      images: this.json.images.length\n    };\n  }\n}\n"],"file":"glb-builder.js"}