{"version":3,"sources":["../../../../src/lib/extensions/KHR_techniques_webgl.js"],"names":["GLTFScenegraph","KHR_TECHNIQUES_WEBGL","decode","gltfData","options","gltfScenegraph","json","extension","getExtension","techniques","resolveTechniques","materials","material","materialExtension","getObjectExtension","technique","Object","assign","values","resolveValues","removeObjectExtension","removeExtension","encode","programs","shaders","textDecoder","TextDecoder","forEach","shader","Number","isFinite","bufferView","code","getTypedArrayForBufferView","Error","program","fragmentShader","vertexShader","keys","uniforms","uniform","value","index","undefined","texture","getTexture"],"mappings":"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","sourcesContent":["// GLTF EXTENSION: KHR_techniques_webgl\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_techniques_webgl\n/* global TextDecoder */\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_TECHNIQUES_WEBGL} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  const extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);\n  if (extension) {\n    const techniques = resolveTechniques(extension, gltfScenegraph);\n\n    for (const material of json.materials || []) {\n      const materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n      if (materialExtension) {\n        material.technique = Object.assign(\n          {},\n          materialExtension,\n          // @ts-ignore\n          techniques[materialExtension.technique]\n        );\n        material.technique.values = resolveValues(material.technique, gltfScenegraph);\n      }\n      gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n    }\n\n    gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);\n  }\n}\n\nexport function encode(gltfData, options) {\n  // TODO\n}\n\nfunction resolveTechniques({programs = [], shaders = [], techniques = []}, gltfScenegraph) {\n  const textDecoder = new TextDecoder();\n\n  shaders.forEach(shader => {\n    if (Number.isFinite(shader.bufferView)) {\n      shader.code = textDecoder.decode(\n        gltfScenegraph.getTypedArrayForBufferView(shader.bufferView)\n      );\n    } else {\n      // TODO: handle URI shader\n      throw new Error('KHR_techniques_webgl: no shader code');\n    }\n  });\n\n  programs.forEach(program => {\n    program.fragmentShader = shaders[program.fragmentShader];\n    program.vertexShader = shaders[program.vertexShader];\n  });\n\n  techniques.forEach(technique => {\n    technique.program = programs[technique.program];\n  });\n\n  return techniques;\n}\n\nfunction resolveValues(technique, gltfScenegraph) {\n  const values = Object.assign({}, technique.values);\n\n  // merge values from uniforms\n  Object.keys(technique.uniforms || {}).forEach(uniform => {\n    if (technique.uniforms[uniform].value && !(uniform in values)) {\n      values[uniform] = technique.uniforms[uniform].value;\n    }\n  });\n\n  // resolve textures\n  Object.keys(values).forEach(uniform => {\n    if (typeof values[uniform] === 'object' && values[uniform].index !== undefined) {\n      // Assume this is a texture\n      // TODO: find if there are any other types that can be referenced\n      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);\n    }\n  });\n\n  return values;\n}\n"],"file":"KHR_techniques_webgl.js"}