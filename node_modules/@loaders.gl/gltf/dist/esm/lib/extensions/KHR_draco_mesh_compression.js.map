{"version":3,"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.js"],"names":["makeMeshPrimitiveIterator","DracoLoader","getZeroOffsetArrayBuffer","GLTFScenegraph","KHR_DRACO_MESH_COMPRESSION","getGLTFAccessors","getGLTFAccessor","decode","gltfData","options","context","gltf","decompressMeshes","scenegraph","promises","primitive","getObjectExtension","push","decompressPrimitive","Promise","all","removeExtension","encode","json","meshes","mesh","compressMesh","addRequiredExtension","compressedPrimitive","buffer","getTypedArrayForBufferView","bufferView","bufferCopy","byteOffset","parse","decodedData","attributes","indices","checkPrimitive","mode","DracoWriter","Error","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","Object","keys","length"],"mappings":"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","sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n\n/* eslint-disable camelcase */\n\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {getZeroOffsetArrayBuffer} from '@loaders.gl/loader-utils';\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_DRACO_MESH_COMPRESSION} from '../gltf-constants';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\n// Note: We have a \"soft dependency\" on Draco to avoid bundling it when not needed\nexport async function decode(gltfData, options, context) {\n  if (!options.gltf.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new GLTFScenegraph(gltfData);\n  const promises = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(primitive, scenegraph, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options = {}) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(primitive, scenegraph, options, context) {\n  const compressedPrimitive = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);\n\n  const buffer = scenegraph.getTypedArrayForBufferView(compressedPrimitive.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = getZeroOffsetArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  // this will generate an exception if DracoLoader is not installed\n  const {parse} = context;\n  const decodedData = await parse(bufferCopy, DracoLoader, options, context);\n\n  primitive.attributes = getGLTFAccessors(decodedData.attributes);\n  if (decodedData.indices) {\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode = 4, options, context) {\n  if (!options.DracoWriter || !options.DracoLoader) {\n    throw new Error('DracoWriter/DracoLoader not available');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  const {parseSync} = context;\n  const decodedData = parseSync({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('Empty glTF primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"file":"KHR_draco_mesh_compression.js"}