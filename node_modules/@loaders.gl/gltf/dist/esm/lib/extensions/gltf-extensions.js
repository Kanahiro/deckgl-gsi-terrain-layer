import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import * as KHR_draco_mesh_compression from './KHR_draco_mesh_compression';
import * as KHR_lights_punctual from './KHR_lights_punctual';
import * as KHR_materials_unlit from './KHR_materials_unlit';
import * as KHR_techniques_webgl from './KHR_techniques_webgl';
export var EXTENSIONS = {
  KHR_draco_mesh_compression: KHR_draco_mesh_compression,
  KHR_lights_punctual: KHR_lights_punctual,
  KHR_materials_unlit: KHR_materials_unlit,
  KHR_techniques_webgl: KHR_techniques_webgl
};
export function decodeExtensions(_x) {
  return _decodeExtensions.apply(this, arguments);
}

function _decodeExtensions() {
  _decodeExtensions = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltf) {
    var options,
        context,
        extensionName,
        excludes,
        exclude,
        extension,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            context = _args.length > 2 ? _args[2] : undefined;
            options.gltf = options.gltf || {};
            _context.t0 = _regeneratorRuntime.keys(EXTENSIONS);

          case 4:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 14;
              break;
            }

            extensionName = _context.t1.value;
            excludes = options.gltf.excludeExtensions || {};
            exclude = extensionName in excludes && !excludes[extensionName];

            if (exclude) {
              _context.next = 12;
              break;
            }

            extension = EXTENSIONS[extensionName];
            _context.next = 12;
            return extension.decode(gltf, options, context);

          case 12:
            _context.next = 4;
            break;

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _decodeExtensions.apply(this, arguments);
}
//# sourceMappingURL=gltf-extensions.js.map