{"version":3,"sources":["../../../../src/lib/extensions/KHR_materials_unlit.js"],"names":["GLTFScenegraph","KHR_MATERIALS_UNLIT","decode","gltfData","options","gltfScenegraph","json","removeExtension","materials","material","extension","extensions","KHR_materials_unlit","unlit","removeObjectExtension","encode","addObjectExtension","addExtension"],"mappings":";;;;;;AAGA,OAAOA,cAAP,MAA2B,oBAA3B;AACA,SAAQC,mBAAR,QAAkC,mBAAlC;AAEA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;AACxC,MAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBG,QAAnB,CAAvB;AADwC,MAEjCG,IAFiC,GAEzBD,cAFyB,CAEjCC,IAFiC;AAKxCD,EAAAA,cAAc,CAACE,eAAf,CAA+BN,mBAA/B;;AALwC,6CASjBK,IAAI,CAACE,SAAL,IAAkB,EATD;AAAA;;AAAA;AASxC,wDAA6C;AAAA,UAAlCC,QAAkC;AAC3C,UAAMC,SAAS,GAAGD,QAAQ,CAACE,UAAT,IAAuBF,QAAQ,CAACE,UAAT,CAAoBC,mBAA7D;;AACA,UAAIF,SAAJ,EAAe;AACbD,QAAAA,QAAQ,CAACI,KAAT,GAAiB,IAAjB;AACD;;AACDR,MAAAA,cAAc,CAACS,qBAAf,CAAqCL,QAArC,EAA+CR,mBAA/C;AACD;AAfuC;AAAA;AAAA;AAAA;AAAA;AAgBzC;AAED,OAAO,SAASc,MAAT,CAAgBZ,QAAhB,EAA0BC,OAA1B,EAAmC;AACxC,MAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBG,QAAnB,CAAvB;AADwC,MAEjCG,IAFiC,GAEzBD,cAFyB,CAEjCC,IAFiC;;AAOxC,MAAID,cAAc,CAACG,SAAnB,EAA8B;AAAA,gDACLF,IAAI,CAACE,SADA;AAAA;;AAAA;AAC5B,6DAAuC;AAAA,YAA5BC,QAA4B;;AACrC,YAAIA,QAAQ,CAACI,KAAb,EAAoB;AAClB,iBAAOJ,QAAQ,CAACI,KAAhB;AACAR,UAAAA,cAAc,CAACW,kBAAf,CAAkCP,QAAlC,EAA4CR,mBAA5C,EAAiE,EAAjE;AACAI,UAAAA,cAAc,CAACY,YAAf,CAA4BhB,mBAA5B;AACD;AACF;AAP2B;AAAA;AAAA;AAAA;AAAA;AAQ7B;AACF","sourcesContent":["// GLTF EXTENSION: KHR_materials_unlit\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_MATERIALS_UNLIT} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Remove the top-level extension\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n    if (extension) {\n      material.unlit = true;\n    }\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n}\n\nexport function encode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials) {\n      if (material.unlit) {\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}\n"],"file":"KHR_materials_unlit.js"}