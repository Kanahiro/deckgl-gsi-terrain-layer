{"version":3,"sources":["../../../../src/lib/extensions/gltf-extensions.js"],"names":["EXTENSIONS","KHR_draco_mesh_compression","KHR_lights_punctual","KHR_materials_unlit","KHR_techniques_webgl","decodeExtensions","gltf","options","context","extensionName","excludes","excludeExtensions","exclude","extension","decode"],"mappings":";;;;;;;;;;;;;;;;AAOA;;AACA;;AACA;;AACA;;AAKO,IAAMA,UAAU,GAAG;AAKxBC,EAAAA,0BAA0B,EAA1BA,0BALwB;AAMxBC,EAAAA,mBAAmB,EAAnBA,mBANwB;AAOxBC,EAAAA,mBAAmB,EAAnBA,mBAPwB;AAQxBC,EAAAA,oBAAoB,EAApBA;AARwB,CAAnB;;;SAWeC,gB;;;;;sFAAf,iBAAgCC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsCC,YAAAA,OAAtC,2DAAgD,EAAhD;AAAoDC,YAAAA,OAApD;AACLD,YAAAA,OAAO,CAACD,IAAR,GAAeC,OAAO,CAACD,IAAR,IAAgB,EAA/B;AADK,uDAEuBN,UAFvB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEMS,YAAAA,aAFN;AAGGC,YAAAA,QAHH,GAGcH,OAAO,CAACD,IAAR,CAAaK,iBAAb,IAAkC,EAHhD;AAIGC,YAAAA,OAJH,GAIaH,aAAa,IAAIC,QAAjB,IAA6B,CAACA,QAAQ,CAACD,aAAD,CAJnD;;AAAA,gBAKEG,OALF;AAAA;AAAA;AAAA;;AAMKC,YAAAA,SANL,GAMiBb,UAAU,CAACS,aAAD,CAN3B;AAAA;AAAA,mBASKI,SAAS,CAACC,MAAV,CAAiBR,IAAjB,EAAuBC,OAAvB,EAAgCC,OAAhC,CATL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint-disable camelcase */\n\n// GLTF 1.0 extensions (read only)\n// Note: KHR_binary_gltf needs to be processed before other loading starts\n// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';\n\n// GLTF 2.0 extensions (read/write)\nimport * as KHR_draco_mesh_compression from './KHR_draco_mesh_compression';\nimport * as KHR_lights_punctual from './KHR_lights_punctual';\nimport * as KHR_materials_unlit from './KHR_materials_unlit';\nimport * as KHR_techniques_webgl from './KHR_techniques_webgl';\n\n// other extensions\n// import UBER_POINT_CLOUD_COMPRESSION from './KHR_draco_mesh_compression';\n\nexport const EXTENSIONS = {\n  // 1.0\n  // KHR_binary_gltf,\n\n  // 2.0\n  KHR_draco_mesh_compression,\n  KHR_lights_punctual,\n  KHR_materials_unlit,\n  KHR_techniques_webgl\n};\n\nexport async function decodeExtensions(gltf, options = {}, context) {\n  options.gltf = options.gltf || {};\n  for (const extensionName in EXTENSIONS) {\n    const excludes = options.gltf.excludeExtensions || {};\n    const exclude = extensionName in excludes && !excludes[extensionName];\n    if (!exclude) {\n      const extension = EXTENSIONS[extensionName];\n      // Note: We decode async extensions sequentially, this might not be necessary\n      // Currently we only have Draco, but when we add Basis we may revisit\n      await extension.decode(gltf, options, context);\n    }\n  }\n}\n"],"file":"gltf-extensions.js"}