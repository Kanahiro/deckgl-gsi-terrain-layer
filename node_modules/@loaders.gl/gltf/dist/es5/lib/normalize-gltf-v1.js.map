{"version":3,"sources":["../../../src/lib/normalize-gltf-v1.js"],"names":["GLTF_ARRAYS","accessors","animations","buffers","bufferViews","images","materials","meshes","nodes","samplers","scenes","skins","textures","GLTF_KEYS","accessor","buffer","bufferView","image","material","mesh","node","sampler","scene","skin","texture","GLTFV1Normalizer","gltf","idToIndexMap","options","json","asset","version","undefined","console","warn","normalize","Error","_addAsset","_convertTopLevelObjectsToArrays","KHR_binary_glTF","decode","_convertObjectIdsToArrayIndices","_updateObjects","generator","arrayName","_convertTopLevelObjectToArray","mapName","objectMap","Array","isArray","id","object","index","length","push","_convertIdsToIndices","_convertIdToIndex","_convertTextureIds","_convertMeshIds","_convertNodeIds","_convertSceneIds","source","primitives","primitive","attributes","indices","attributeName","children","map","child","topLevelArrayName","key","Number","isFinite","type","normalizeGLTFV1"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_binary_glTF from './extensions/KHR_binary_gltf';\n\n// Binary format changes (mainly implemented by GLBLoader)\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n\n// JSON format changes:\n// https://github.com/khronosgroup/gltf/issues/605\n\n// - [x] Top-level JSON objects are arrays now\n// - [ ] Removed indirection from animation: sampler now refers directly to accessors, #712\n// - [ ] material.parameter.value and technique.parameter.value must be an array, #690\n// - [ ] Node can have only one mesh #821\n// - [ ] Added reqs on JSON encoding\n// - [ ] Added reqs on binary data alignment #802 (comment)\n\n// Additions:\n// - [ ] Added accessor.normalized, #691, #706\n// - [ ] Added glExtensionsUsed property and 5125 (UNSIGNED_INT) accessor.componentType value, #619\n// - [ ] Added extensionsRequired property, #720, #721\n// - [ ] Added \"STEP\" as valid animation.sampler.interpolation value, #712\n\n// Removals:\n// - [x] Removed buffer.type, #786, #629\n// - [ ] Removed revision number from profile.version, #709\n// - [ ] Removed technique.functions.scissor and removed 3089 (SCISSOR_TEST) as a valid value for technique.states.enable, #681\n// - [ ] Techniques, programs, and shaders were moved out to KHR_technique_webgl extension.\n\n// Other edits:\n// - [x] asset is now required, #642\n// - [ ] buffer.byteLength and bufferView.byteLength are now required, #560.\n// - [ ] accessor.min and accessor.max are now required, #593, and clarified that the JSON value and binary data must be the same, #628.\n// - [ ] Clarified animation.sampler and animation.channel restrictions, #712\n// - [ ] skin.inverseBindMatrices is now optional, #461.\n// - [ ] Attribute parameters can't have a value defined in the technique or parameter, #563 (comment).\n// - [ ] Only TEXCOORD and COLOR attribute semantics can be written in the form [semantic]_[set_index], #563 (comment).\n// - [ ] TEXCOORD and COLOR attribute semantics must be written in the form [semantic]_[set_index], e.g., just TEXCOORD should be TEXCOORD_0, and just COLOR should be COLOR_0, #649\n// - [ ] camera.perspective.aspectRatio and camera.perspective.yfov must now be > 0, not >= 0, #563 (comment).\n// - [ ] Application-specific parameter semantics must start with an underscore, e.g., _TEMPERATURE and _SIMULATION_TIME, #563 (comment).\n// - [ ] Properties in technique.parameters must be defined in technique.uniforms or technique.attributes,\n\n// #563 (comment).\n// - [ ] technique.parameter.count can only be defined when the semantic is JOINTMATRIX or an application-specific semantic is used. It can never be defined for attribute parameters; only uniforms, d2f6945\n// - [ ] technique.parameter.semantic is required when the parameter is an attribute, 28e113d\n// - [ ] Mesh-only models are allowed, e.g., without materials, #642\n// - [ ] Skeleton hierarchies (nodes containing jointName) must be separated from non-skeleton hierarchies., #647\n// - [ ] technique.states.functions.blendColor and technique.states.functions.depthRange parameters now must match WebGL function min/max, #707\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\n\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\n/**\n * Converts (normalizes) glTF v1 to v2\n */\nclass GLTFV1Normalizer {\n  constructor(gltf) {\n    this.idToIndexMap = {\n      animations: {},\n      accessors: {},\n      buffers: {},\n      bufferViews: {},\n      images: {},\n      materials: {},\n      meshes: {},\n      nodes: {},\n      samplers: {},\n      scenes: {},\n      skins: {},\n      textures: {}\n    };\n  }\n\n  /**\n   * Convert (normalize) glTF < 2.0 to glTF 2.0\n   * @param {*} gltf - object with json and binChunks\n   * @param {object} options\n   * @param {boolean} [options.normalize] Whether to actually normalize\n   */\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    // Check version\n    switch (json.asset && json.asset.version) {\n      // We are converting to v2 format. Return if there is nothing to do\n      case '2.0':\n        return;\n\n      // This class is written to convert 1.0\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        // eslint-disable-next-line no-undef, no-console\n        console.warn(`glTF: Unknown version ${json.asset.version}`);\n        return;\n    }\n\n    if (!options.normalize) {\n      // We are still missing a few conversion tricks, remove once addressed\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    // eslint-disable-next-line no-undef, no-console\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    // In glTF2 top-level fields are Arrays not Object maps\n    this._convertTopLevelObjectsToArrays(json);\n\n    // Extract bufferView indices for images\n    // (this extension needs to be invoked early in the normalization process)\n    KHR_binary_glTF.decode(gltf, options);\n\n    // Convert object references from ids to indices\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n  }\n\n  // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    // We are normalizing to glTF v2, so change version to \"2.0\"\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    // TODO check that all arrays are covered\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  /** Convert one top level object to array */\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    // Rewrite the top-level field as an array\n    json[mapName] = [];\n    // Copy the map key into object.id\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id; // Mutates the loaded object\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  /** Go through all objects in all top-level arrays and replace ids with indices */\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    // Convert any index references that are not using array names\n\n    // texture.source (image)\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {attributes, indices, material} = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map(child => this._convertIdToIndex(child, 'node'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map(node => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  /** Go through all objects in a top-level array and replace ids with indices */\n  _convertIdsToIndices(json, topLevelArrayName) {\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);\n      }\n      return index;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @param {*} json\n   */\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      // - [x] Removed buffer.type, #786, #629\n      delete buffer.type;\n    }\n  }\n}\n\nexport default function normalizeGLTFV1(gltf, options = {}) {\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n"],"file":"normalize-gltf-v1.js"}