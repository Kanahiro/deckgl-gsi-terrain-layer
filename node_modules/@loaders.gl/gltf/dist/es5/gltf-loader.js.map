{"version":3,"sources":["../../src/gltf-loader.js"],"names":["VERSION","GLTFLoader","id","name","version","extensions","mimeTypes","text","binary","tests","parse","options","gltf","normalize","loadBuffers","loadImages","decompressMeshes","postProcess","uri","log","console","deprecatedOptions","fetchImages","createImages","decompress","arrayBuffer","context","addDeprecatedGLTFOptions","byteOffset","fetchBuffers","fetchLinkedResources"],"mappings":"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","sourcesContent":["import {parseGLTF} from './lib/parse-gltf';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {LoaderObject} */\nconst GLTFLoader = {\n  id: 'gltf',\n  name: 'glTF',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n\n  options: {\n    gltf: {\n      normalize: false, // Normalize glTF v1 to glTF v2 format (not yet stable)\n      loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n      loadImages: true, // Create image objects\n      decompressMeshes: true, // Decompress Draco encoded meshes\n      postProcess: true // Postprocess glTF and return json structure directly\n    },\n\n    // common?\n    uri: '', // base URI\n    log: console // eslint-disable-line\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\n\nexport default GLTFLoader;\n\nexport async function parse(arrayBuffer, options = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GLTFLoader.options, ...options};\n  // @ts-ignore\n  options.gltf = {...GLTFLoader.options.gltf, ...options.gltf};\n  addDeprecatedGLTFOptions(options);\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n\n// DEPRECATED\n\nfunction addDeprecatedGLTFOptions(options) {\n  if ('fetchImages' in options) {\n    options.gltf.loadImages = options.fetchImages;\n  }\n  if ('createImages' in options) {\n    options.gltf.loadImages = options.createImages;\n  }\n  if ('fetchLinkedResources' in options) {\n    options.gltf.fetchBuffers = options.fetchLinkedResources;\n  }\n  if ('decompress' in options) {\n    options.gltf.decompressMeshes = options.decompress;\n  }\n  if ('decompress' in options.gltf) {\n    options.gltf.decompressMeshes = options.gltf.decompress;\n  }\n  if ('postProcess' in options) {\n    options.gltf.postProcess = options.postProcess;\n  }\n}\n"],"file":"gltf-loader.js"}