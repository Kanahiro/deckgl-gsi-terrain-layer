{"version":3,"sources":["../../../src/lib/parse-gltf.js"],"names":["ImageLoader","parseJSON","getZeroOffsetArrayBuffer","assert","resolveUrl","getTypedArrayForBufferView","decodeExtensions","parseGLBSync","isGLB","normalizeGLTFV1","postProcessGLTF","isGLTF","arrayBuffer","options","dataView","DataView","byteOffset","parseGLTF","gltf","arrayBufferOrString","context","parseGLTFContainerSync","normalize","promises","loadImages","promise","push","loadBuffers","Promise","all","postProcess","data","uri","baseUri","ArrayBuffer","textDecoder","TextDecoder","decode","json","glb","type","_glb","buffers","Array","length","fill","header","hasBinChunk","binChunks","byteLength","images","i","buffer","fetch","response","loadImage","image","parse","Number","isFinite","bufferView","array","parsedImage"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\n/* global TextDecoder */\nimport {ImageLoader} from '@loaders.gl/images';\nimport {parseJSON, getZeroOffsetArrayBuffer} from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport {resolveUrl} from './gltf-utils/resolve-url';\nimport {getTypedArrayForBufferView} from './gltf-utils/get-typed-array';\nimport {decodeExtensions} from './extensions/gltf-extensions';\nimport parseGLBSync, {isGLB} from './parse-glb';\nimport normalizeGLTFV1 from './normalize-gltf-v1';\nimport postProcessGLTF from './post-process-gltf';\n\nexport function isGLTF(arrayBuffer, options = {}) {\n  const dataView = new DataView(arrayBuffer);\n  const byteOffset = 0;\n  return isGLB(dataView, byteOffset);\n}\n\nexport async function parseGLTF(gltf, arrayBufferOrString, byteOffset = 0, options, context) {\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  normalizeGLTFV1(gltf, {normalize: options.gltf.normalize});\n\n  /** @type {Promise[]} */\n  const promises = [];\n\n  if (options.gltf.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options.gltf.loadBuffers) {\n    await loadBuffers(gltf, options, context);\n  }\n\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  // Post processing resolves indices to objects, buffers\n  return options.gltf.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// `data` - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    const glb = {};\n    byteOffset = parseGLBSync(glb, data, byteOffset, options);\n\n    assert(glb.type === 'glTF', `Invalid GLB magic string ${glb.type}`);\n\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, `GLTF: must be ArrayBuffer or string`);\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {binChunks} = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n\n    // TODO - this modifies JSON and is a post processing thing\n    // gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    // gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n// Asynchronously fetch and parse buffers, store in buffers array outside of json\nasync function loadBuffers(gltf, options, context) {\n  for (let i = 0; i < gltf.json.buffers.length; ++i) {\n    const buffer = gltf.json.buffers[i];\n    if (buffer.uri) {\n      const {fetch} = context;\n      assert(fetch);\n\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await fetch(uri);\n      const arrayBuffer = await response.arrayBuffer();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    }\n  }\n}\n\nasync function loadImages(gltf, options, context) {\n  const images = gltf.json.images || [];\n\n  const promises = [];\n  for (let i = 0; i < images.length; ++i) {\n    promises.push(loadImage(gltf, images[i], i, options, context));\n  }\n\n  return await Promise.all(promises);\n}\n\n// Asynchronously fetches and parses one image, store in images array outside of json\nasync function loadImage(gltf, image, i, options, context) {\n  const {fetch, parse} = context;\n\n  let arrayBuffer;\n\n  if (image.uri) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n  }\n\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = getZeroOffsetArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n  }\n\n  assert(arrayBuffer, 'glTF image has no data');\n\n  // Call `parse`\n  const parsedImage = await parse(arrayBuffer, ImageLoader, {}, context);\n  // TODO making sure ImageLoader is overridable by using array of loaders\n  // const parsedImage = await parse(arrayBuffer, [ImageLoader]);\n\n  gltf.images[i] = parsedImage;\n}\n"],"file":"parse-gltf.js"}