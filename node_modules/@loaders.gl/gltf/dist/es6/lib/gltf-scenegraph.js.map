{"version":3,"sources":["../../../src/lib/gltf-scenegraph.js"],"names":["getBinaryImageMIMEType","padTo4Bytes","copyToArray","assert","getAccessorArrayTypeAndLength","getAccessorTypeFromSize","getComponentTypeFromArray","GLTFScenegraph","constructor","gltf","json","asset","version","generator","buffers","byteLength","getApplicationData","key","data","getExtraData","extras","getExtension","extensionName","isExtension","getUsedExtensions","find","name","extensions","getRequiredExtension","isRequired","getRequiredExtensions","extensionsRequired","extensionsUsed","getObjectExtension","object","getScene","index","getObject","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","Error","getTypedArrayForBufferView","bufferView","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","getTypedArrayForAccessor","accessor","ArrayType","length","getTypedArrayForImageData","image","addApplicationData","addExtraData","addObjectExtension","registerUsedExtension","setObjectExtension","removeObjectExtension","extension","addExtension","extensionData","addRequiredExtension","registerRequiredExtension","ext","push","removeExtension","_removeStringFromArray","addMesh","attributes","indices","mode","accessors","_addAttributes","glTFMesh","primitives","meshes","addPointCloud","accessorIndices","addImage","imageData","mimeType","bufferViewIndex","addBufferView","glTFImage","images","Number","isFinite","sourceBuffers","glTFBufferView","bufferViews","addAccessor","glTFAccessor","type","size","componentType","count","addBinaryBuffer","sourceBuffer","accessorDefaults","Math","round","Object","assign","createBinaryChunk","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","i","string","found","indexOf","splice"],"mappings":"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","sourcesContent":["import {getBinaryImageMIMEType} from '@loaders.gl/images';\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from './gltf-utils/gltf-utils';\n\n// Class for structured access to GLTF data\nexport default class GLTFScenegraph {\n  // eslint-disable-next-line consistent-return\n  constructor(gltf) {\n    // Signature: new GLTFScenegraph(data : GLTFScenegraph)\n    // Allow creation of a `GLTFScenegraph` object from gltf data without checking if already a `GLTFScenegraph`\n    if (gltf instanceof GLTFScenegraph) {\n      return gltf;\n    }\n\n    if (!gltf) {\n      gltf = {\n        json: {\n          asset: {\n            version: '2.0',\n            generator: 'loaders.gl'\n          },\n          buffers: []\n        },\n        buffers: []\n      };\n    }\n\n    this.byteLength = 0;\n    // TODO - this is too sloppy, define inputs more clearly\n    this.gltf = gltf;\n    assert(this.gltf.json);\n  }\n\n  // Accessors\n\n  get json() {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index) {\n    return this.getObject('scenes', index);\n  }\n\n  getNode(index) {\n    return this.getObject('nodes', index);\n  }\n\n  getSkin(index) {\n    return this.getObject('skins', index);\n  }\n\n  getMesh(index) {\n    return this.getObject('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this.getObject('materials', index);\n  }\n\n  getAccessor(index) {\n    return this.getObject('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this.getObject('textures', index);\n  }\n\n  getSampler(index) {\n    return this.getObject('samplers', index);\n  }\n\n  getImage(index) {\n    return this.getObject('images', index);\n  }\n\n  getBufferView(index) {\n    return this.getObject('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this.getObject('buffers', index);\n  }\n\n  getObject(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // accepts buffer view index or buffer view object\n  // returns a `Uint8Array`\n  getTypedArrayForBufferView(bufferView) {\n    bufferView = this.getBufferView(bufferView);\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a typed array with type that matches the types\n  getTypedArrayForAccessor(accessor) {\n    accessor = this.getAccessor(accessor);\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a `Uint8Array`\n  getTypedArrayForImageData(image) {\n    image = this.getAccessor(image);\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  // Add an extra application-defined key to the top-level data structure\n  addApplicationData(key, data) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  addExtraData(key, data) {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object, extensionName, data) {\n    assert(data);\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object, extensionName, data) {\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  addExtension(extensionName, extensionData = {}) {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  addRequiredExtension(extensionName, extensionData = {}) {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // Removes an extension from the top-level list\n  removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  addMesh(attributes, indices, mode = 4) {\n    // @ts-ignore\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData, mimeType) {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    mimeType = mimeType || getBinaryImageMIMEType(imageData);\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBinaryBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Pack the binary chunk\n  createBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"],"file":"gltf-scenegraph.js"}