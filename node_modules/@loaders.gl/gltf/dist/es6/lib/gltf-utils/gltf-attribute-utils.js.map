{"version":3,"sources":["../../../../src/lib/gltf-utils/gltf-attribute-utils.js"],"names":["getAccessorTypeFromSize","getComponentTypeFromArray","getGLTFAccessors","attributes","accessors","name","attribute","glTFAccessor","getGLTFAccessor","gltfAttributeName","buffer","size","count","getAccessorData","value","bufferView","byteOffset","type","componentType","getGLTFAttribute","data","glTFAttributeMap","attributeName","ArrayBuffer","isView","toTypedArray","Float32Array","length","array","ArrayType","convertTypedArrays","Array","isArray"],"mappings":"AACA,SAAQA,uBAAR,EAAiCC,yBAAjC,QAAiE,cAAjE;AAKA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsC;AAC3C,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,MAAMC,IAAX,IAAmBF,UAAnB,EAA+B;AAC7B,UAAMG,SAAS,GAAGH,UAAU,CAACE,IAAD,CAA5B;;AACA,QAAIA,IAAI,KAAK,SAAb,EAAwB;AACtB,YAAME,YAAY,GAAGC,eAAe,CAACF,SAAD,CAApC;AACAF,MAAAA,SAAS,CAACC,IAAD,CAAT,GAAkBE,YAAlB;AACD;AACF;;AACD,SAAOH,SAAP;AACD;AAKD,OAAO,SAASI,eAAT,CAAyBF,SAAzB,EAAoCG,iBAApC,EAAuD;AAC5D,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAAwBC,eAAe,CAACP,SAAD,EAAYG,iBAAZ,CAA7C;AAEA,QAAMF,YAAY,GAAG;AAEnBO,IAAAA,KAAK,EAAEJ,MAFY;AAGnBC,IAAAA,IAHmB;AAOnBI,IAAAA,UAAU,EAAE,IAPO;AAQnBC,IAAAA,UAAU,EAAE,CARO;AASnBJ,IAAAA,KATmB;AAUnBK,IAAAA,IAAI,EAAEjB,uBAAuB,CAACW,IAAD,CAVV;AAWnBO,IAAAA,aAAa,EAAEjB,yBAAyB,CAACS,MAAD;AAXrB,GAArB;AAcA,SAAOH,YAAP;AACD;AAED,OAAO,SAASY,gBAAT,CAA0BC,IAA1B,EAAgCX,iBAAhC,EAAmD;AACxD,SAAOW,IAAI,CAACjB,UAAL,CAAgBiB,IAAI,CAACC,gBAAL,CAAsBZ,iBAAtB,CAAhB,CAAP;AACD;;AAED,SAASI,eAAT,CAAyBP,SAAzB,EAAoCgB,aAApC,EAAmD;AACjD,MAAIZ,MAAM,GAAGJ,SAAb;AACA,MAAIK,IAAI,GAAG,CAAX;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,MAAIN,SAAS,IAAIA,SAAS,CAACQ,KAA3B,EAAkC;AAChCJ,IAAAA,MAAM,GAAGJ,SAAS,CAACQ,KAAnB;AACAH,IAAAA,IAAI,GAAGL,SAAS,CAACK,IAAV,IAAkB,CAAzB;AACD;;AAED,MAAID,MAAJ,EAAY;AACV,QAAI,CAACa,WAAW,CAACC,MAAZ,CAAmBd,MAAnB,CAAL,EAAiC;AAC/BA,MAAAA,MAAM,GAAGe,YAAY,CAACf,MAAD,EAASgB,YAAT,CAArB;AACD;;AACDd,IAAAA,KAAK,GAAGF,MAAM,CAACiB,MAAP,GAAgBhB,IAAxB;AACD;;AAED,SAAO;AAACD,IAAAA,MAAD;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,GAAP;AACD;;AAGD,SAASa,YAAT,CAAsBG,KAAtB,EAA6BC,SAA7B,EAAwCC,kBAAkB,GAAG,KAA7D,EAAoE;AAClE,MAAI,CAACF,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AACxB,WAAO,IAAIC,SAAJ,CAAcD,KAAd,CAAP;AACD;;AACD,MAAIE,kBAAkB,IAAI,EAAEF,KAAK,YAAYC,SAAnB,CAA1B,EAAyD;AACvD,WAAO,IAAIA,SAAJ,CAAcD,KAAd,CAAP;AACD;;AACD,SAAOA,KAAP;AACD","sourcesContent":["// TODO - remove\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-utils';\n\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes) {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute, gltfAttributeName) {\n  const {buffer, size, count} = getAccessorData(attribute, gltfAttributeName);\n\n  const glTFAccessor = {\n    // TODO: Deprecate `value` in favor of bufferView?\n    value: buffer,\n    size, // Decoded `type` (e.g. SCALAR)\n\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    bufferView: null,\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n\n  return glTFAccessor;\n}\n\nexport function getGLTFAttribute(data, gltfAttributeName) {\n  return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n}\n\nfunction getAccessorData(attribute, attributeName) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n\n  return {buffer, size, count};\n}\n\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n"],"file":"gltf-attribute-utils.js"}