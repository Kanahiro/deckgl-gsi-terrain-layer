{"version":3,"sources":["../../../../src/lib/deprecated/glb-builder.js"],"names":["padTo4Bytes","copyToArray","isImage","getAccessorTypeFromSize","getComponentTypeFromArray","encodeGLBSync","GLBBuilder","constructor","options","byteLength","json","buffers","bufferViews","accessors","images","meshes","sourceBuffers","log","console","getByteLength","imageData","encodeSync","encodeAsGLB","_packBinaryChunk","magic","warn","glb","version","binary","arrayBuffer","glbArrayBuffer","ArrayBuffer","dataView","DataView","addApplicationData","key","data","packOptions","addBuffer","sourceBuffer","accessor","size","bufferViewIndex","addBufferView","accessorDefaults","componentType","count","Math","round","length","addAccessor","Object","assign","buffer","push","byteOffset","bufferView","type","_pack","totalByteLength","targetArray","Uint8Array","dstByteOffset","i","_getInternalCounts"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n/* eslint-disable camelcase, max-statements */\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {isImage} from '@loaders.gl/images';\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from '../gltf-utils/gltf-utils';\nimport encodeGLBSync from '../encode-glb';\n\nexport default class GLBBuilder {\n  constructor(options = {}) {\n    // Lets us keep track of how large the body will be, as well as the offset for each of the\n    // original buffers.\n    this.byteLength = 0;\n\n    this.json = {\n      buffers: [\n        {\n          // Just the single BIN chunk buffer\n          byteLength: 0 // Updated at end of conversion\n        }\n      ],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n\n    // list of binary buffers to be written to the BIN chunk\n    // (Each call to addBuffer, addImage etc adds an entry here)\n    this.sourceBuffers = [];\n\n    this.log = options.log || console; // eslint-disable-line\n  }\n\n  // ACCESSORS\n\n  getByteLength() {\n    return this.byteLength;\n  }\n\n  // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)\n  isImage(imageData) {\n    return isImage(imageData);\n  }\n\n  // MODIFERS\n  encodeSync(options = {}) {\n    return this.encodeAsGLB(options);\n  }\n\n  // Encode the full glTF file as a binary GLB file\n  // Returns an ArrayBuffer that represents the complete GLB image that can be saved to file\n  // Encode the full GLB buffer with header etc\n  // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n  // glb-file-format-specification\n  encodeAsGLB(options = {}) {\n    // TODO - avoid double array buffer creation\n    this._packBinaryChunk();\n\n    if (options.magic) {\n      console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line\n    }\n\n    const glb = {\n      version: 2,\n      json: this.json,\n      binary: this.arrayBuffer\n    };\n\n    // Calculate length and allocate buffer\n    const byteLength = encodeGLBSync(glb, null, 0, options);\n    const glbArrayBuffer = new ArrayBuffer(byteLength);\n\n    // Encode into buffer\n    const dataView = new DataView(glbArrayBuffer);\n    encodeGLBSync(glb, dataView, 0, options);\n\n    return glbArrayBuffer;\n  }\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Basic glTF adders: basic memory buffer/image type fields\n  // Scenegraph specific adders are placed in glTFBuilder\n  // TODO: These should be moved to glTFBuilder once addBuffer\n  // have been rewritten to not depend on these.\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength || buffer.length;\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews.push({\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    });\n\n    // We've now written the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte aligned\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers.push(buffer);\n\n    // Return the index to the just created bufferView\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    // Add an accessor pointing to the new buffer view\n    this.json.accessors.push({\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    });\n\n    return this.json.accessors.length - 1;\n  }\n\n  // PRIVATE\n\n  // For testing\n  _pack() {\n    this._packBinaryChunk();\n    return {arrayBuffer: this.arrayBuffer, json: this.json};\n  }\n\n  // Pack the binary chunk\n  _packBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // Report internal buffer sizes for debug and testing purposes\n  _getInternalCounts() {\n    return {\n      buffers: this.json.buffers.length,\n      bufferViews: this.json.bufferViews.length,\n      accessors: this.json.accessors.length,\n      images: this.json.images.length\n    };\n  }\n}\n"],"file":"glb-builder.js"}