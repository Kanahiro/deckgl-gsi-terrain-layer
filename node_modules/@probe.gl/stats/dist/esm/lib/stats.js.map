{"version":3,"sources":["../../../src/lib/stats.js"],"names":["Stat","Stats","id","stats","_initializeStats","Object","seal","name","type","_getOrCreate","key","reset","fn","table","forEach","stat","time","count","average","getAverageTime","hz","getHz","keys","length"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,QAAjB;;IAEqBC,K;AACnB,uBAAyB;AAAA,QAAZC,EAAY,QAAZA,EAAY;AAAA,QAARC,KAAQ,QAARA,KAAQ;;AAAA;;AACvB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAa,EAAb;;AAEA,SAAKC,gBAAL,CAAsBD,KAAtB;;AAEAE,IAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;;;wBAGGC,I,EAAsB;AAAA,UAAhBC,IAAgB,uEAAT,OAAS;AACxB,aAAO,KAAKC,YAAL,CAAkB;AAACF,QAAAA,IAAI,EAAJA,IAAD;AAAOC,QAAAA,IAAI,EAAJA;AAAP,OAAlB,CAAP;AACD;;;4BAOO;AACN,WAAK,IAAME,GAAX,IAAkB,KAAKP,KAAvB,EAA8B;AAC5B,aAAKA,KAAL,CAAWO,GAAX,EAAgBC,KAAhB;AACD;;AAED,aAAO,IAAP;AACD;;;4BAEOC,E,EAAI;AACV,WAAK,IAAMF,GAAX,IAAkB,KAAKP,KAAvB,EAA8B;AAC5BS,QAAAA,EAAE,CAAC,KAAKT,KAAL,CAAWO,GAAX,CAAD,CAAF;AACD;AACF;;;+BAEU;AACT,UAAMG,KAAK,GAAG,EAAd;AACA,WAAKC,OAAL,CAAa,UAAAC,IAAI,EAAI;AACnBF,QAAAA,KAAK,CAACE,IAAI,CAACR,IAAN,CAAL,GAAmB;AACjBS,UAAAA,IAAI,EAAED,IAAI,CAACC,IAAL,IAAa,CADF;AAEjBC,UAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,IAAc,CAFJ;AAGjBC,UAAAA,OAAO,EAAEH,IAAI,CAACI,cAAL,MAAyB,CAHjB;AAIjBC,UAAAA,EAAE,EAAEL,IAAI,CAACM,KAAL,MAAgB;AAJH,SAAnB;AAMD,OAPD;AASA,aAAOR,KAAP;AACD;;;uCAE4B;AAAA;;AAAA,UAAZV,KAAY,uEAAJ,EAAI;AAC3BA,MAAAA,KAAK,CAACW,OAAN,CAAc,UAAAC,IAAI;AAAA,eAAI,KAAI,CAACN,YAAL,CAAkBM,IAAlB,CAAJ;AAAA,OAAlB;AACD;;;iCAEYA,I,EAAM;AACjB,UAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACR,IAAnB,EAAyB;AACvB,eAAO,IAAP;AACD;;AAHgB,UAKVA,IALU,GAKIQ,IALJ,CAKVR,IALU;AAAA,UAKJC,IALI,GAKIO,IALJ,CAKJP,IALI;;AAMjB,UAAI,CAAC,KAAKL,KAAL,CAAWI,IAAX,CAAL,EAAuB;AACrB,YAAIQ,IAAI,YAAYf,IAApB,EAA0B;AACxB,eAAKG,KAAL,CAAWI,IAAX,IAAmBQ,IAAnB;AACD,SAFD,MAEO;AACL,eAAKZ,KAAL,CAAWI,IAAX,IAAmB,IAAIP,IAAJ,CAASO,IAAT,EAAeC,IAAf,CAAnB;AACD;AACF;;AACD,aAAO,KAAKL,KAAL,CAAWI,IAAX,CAAP;AACD;;;wBAnDU;AACT,aAAOF,MAAM,CAACiB,IAAP,CAAY,KAAKnB,KAAjB,EAAwBoB,MAA/B;AACD;;;;;;SAjBkBtB,K","sourcesContent":["import Stat from './stat';\n\nexport default class Stats {\n  constructor({id, stats}) {\n    this.id = id;\n    this.stats = {};\n\n    this._initializeStats(stats);\n\n    Object.seal(this);\n  }\n\n  // Acquire a stat. Create if it doesn't exist.\n  get(name, type = 'count') {\n    return this._getOrCreate({name, type});\n  }\n\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n\n  // Reset all stats\n  reset() {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn) {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats = []) {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat) {\n    if (!stat || !stat.name) {\n      return null;\n    }\n\n    const {name, type} = stat;\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n    return this.stats[name];\n  }\n}\n"],"file":"stats.js"}