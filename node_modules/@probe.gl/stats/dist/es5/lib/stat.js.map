{"version":3,"sources":["../../../src/lib/stat.js"],"names":["Stat","name","type","sampleSize","reset","samples","addCount","subtractCount","value","_count","_samples","_checkSampling","time","_time","lastTiming","_startTime","_timerPending","addTime","lastSampleCount","lastSampleTime","count"],"mappings":";;;;;;;;;;;;;AAAA;;IAEqBA,I;AACnB,gBAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AAAA;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,KAAL;AACD;;;;kCAEaC,O,EAAS;AACrB,WAAKF,UAAL,GAAkBE,OAAlB;AAEA,aAAO,IAAP;AACD;;;qCAGgB;AACf,WAAKC,QAAL,CAAc,CAAd;AAEA,aAAO,IAAP;AACD;;;qCAGgB;AACf,WAAKC,aAAL,CAAmB,CAAnB;AAEA,aAAO,IAAP;AACD;;;6BAGQC,K,EAAO;AACd,WAAKC,MAAL,IAAeD,KAAf;AACA,WAAKE,QAAL;;AACA,WAAKC,cAAL;;AAEA,aAAO,IAAP;AACD;;;kCAGaH,K,EAAO;AACnB,WAAKC,MAAL,IAAeD,KAAf;AACA,WAAKE,QAAL;;AACA,WAAKC,cAAL;;AAEA,aAAO,IAAP;AACD;;;4BAGOC,I,EAAM;AACZ,WAAKC,KAAL,IAAcD,IAAd;AACA,WAAKE,UAAL,GAAkBF,IAAlB;AACA,WAAKF,QAAL;;AACA,WAAKC,cAAL;;AAEA,aAAO,IAAP;AACD;;;gCAGW;AACV,WAAKI,UAAL,GAAkB,iCAAlB;AACA,WAAKC,aAAL,GAAqB,IAArB;AAEA,aAAO,IAAP;AACD;;;8BAGS;AACR,UAAI,CAAC,KAAKA,aAAV,EAAyB;AACvB,eAAO,IAAP;AACD;;AAED,WAAKC,OAAL,CAAa,oCAAsB,KAAKF,UAAxC;AACA,WAAKC,aAAL,GAAqB,KAArB;;AACA,WAAKL,cAAL;;AAEA,aAAO,IAAP;AACD;;;4CAEuB;AACtB,aAAO,KAAKR,UAAL,GAAkB,CAAlB,GAAsB,KAAKe,eAAL,GAAuB,KAAKf,UAAlD,GAA+D,CAAtE;AACD;;;2CAGsB;AACrB,aAAO,KAAKA,UAAL,GAAkB,CAAlB,GAAsB,KAAKgB,cAAL,GAAsB,KAAKhB,UAAjD,GAA8D,CAArE;AACD;;;kCAGa;AACZ,aAAO,KAAKgB,cAAL,GAAsB,CAAtB,GAA0B,KAAKhB,UAAL,IAAmB,KAAKgB,cAAL,GAAsB,IAAzC,CAA1B,GAA2E,CAAlF;AACD;;;sCAEiB;AAChB,aAAO,KAAKd,OAAL,GAAe,CAAf,GAAmB,KAAKe,KAAL,GAAa,KAAKf,OAArC,GAA+C,CAAtD;AACD;;;qCAGgB;AACf,aAAO,KAAKA,OAAL,GAAe,CAAf,GAAmB,KAAKO,IAAL,GAAY,KAAKP,OAApC,GAA8C,CAArD;AACD;;;4BAGO;AACN,aAAO,KAAKO,IAAL,GAAY,CAAZ,GAAgB,KAAKP,OAAL,IAAgB,KAAKO,IAAL,GAAY,IAA5B,CAAhB,GAAoD,CAA3D;AACD;;;4BAEO;AACN,WAAKA,IAAL,GAAY,CAAZ;AACA,WAAKQ,KAAL,GAAa,CAAb;AACA,WAAKf,OAAL,GAAe,CAAf;AACA,WAAKS,UAAL,GAAkB,CAAlB;AACA,WAAKK,cAAL,GAAsB,CAAtB;AACA,WAAKD,eAAL,GAAuB,CAAvB;AACA,WAAKT,MAAL,GAAc,CAAd;AACA,WAAKI,KAAL,GAAa,CAAb;AACA,WAAKH,QAAL,GAAgB,CAAhB;AACA,WAAKK,UAAL,GAAkB,CAAlB;AACA,WAAKC,aAAL,GAAqB,KAArB;AAEA,aAAO,IAAP;AACD;;;qCAEgB;AACf,UAAI,KAAKN,QAAL,KAAkB,KAAKP,UAA3B,EAAuC;AACrC,aAAKgB,cAAL,GAAsB,KAAKN,KAA3B;AACA,aAAKK,eAAL,GAAuB,KAAKT,MAA5B;AACA,aAAKW,KAAL,IAAc,KAAKX,MAAnB;AACA,aAAKG,IAAL,IAAa,KAAKC,KAAlB;AACA,aAAKR,OAAL,IAAgB,KAAKK,QAArB;AACA,aAAKG,KAAL,GAAa,CAAb;AACA,aAAKJ,MAAL,GAAc,CAAd;AACA,aAAKC,QAAL,GAAgB,CAAhB;AACD;AACF","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  constructor(name, type) {\n    this.name = name;\n    this.type = type;\n    this.sampleSize = 1;\n    this.reset();\n  }\n\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n\n    return this;\n  }\n\n  // Call to increment count (+1)\n  incrementCount() {\n    this.addCount(1);\n\n    return this;\n  }\n\n  // Call to decrement count (-1)\n  decrementCount() {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  // Increase count\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Decrease count\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Add an arbitrary timing and bump the count\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Start a timer\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  // End a timer. Adds to time and bumps the timing count.\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  // Calculate average time / count for the previous window\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  // Calculate counts per second for the previous window\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  // Calculate average time / count\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  // Calculate counts per second\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"],"file":"stat.js"}