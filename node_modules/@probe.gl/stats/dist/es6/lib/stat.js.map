{"version":3,"sources":["../../../src/lib/stat.js"],"names":["getHiResTimestamp","Stat","constructor","name","type","sampleSize","reset","setSampleSize","samples","incrementCount","addCount","decrementCount","subtractCount","value","_count","_samples","_checkSampling","addTime","time","_time","lastTiming","timeStart","_startTime","_timerPending","timeEnd","getSampleAverageCount","lastSampleCount","getSampleAverageTime","lastSampleTime","getSampleHz","getAverageCount","count","getAverageTime","getHz"],"mappings":"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","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  constructor(name, type) {\n    this.name = name;\n    this.type = type;\n    this.sampleSize = 1;\n    this.reset();\n  }\n\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n\n    return this;\n  }\n\n  // Call to increment count (+1)\n  incrementCount() {\n    this.addCount(1);\n\n    return this;\n  }\n\n  // Call to decrement count (-1)\n  decrementCount() {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  // Increase count\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Decrease count\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Add an arbitrary timing and bump the count\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Start a timer\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  // End a timer. Adds to time and bumps the timing count.\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  // Calculate average time / count for the previous window\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  // Calculate counts per second for the previous window\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  // Calculate average time / count\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  // Calculate counts per second\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"],"file":"stat.js"}