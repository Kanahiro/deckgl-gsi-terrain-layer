{"version":3,"sources":["../../../src/lib/stats.js"],"names":["Stat","Stats","constructor","id","stats","_initializeStats","Object","seal","get","name","type","_getOrCreate","size","keys","length","reset","key","forEach","fn","getTable","table","stat","time","count","average","getAverageTime","hz","getHz"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AAEA,eAAe,MAAMC,KAAN,CAAY;AACzBC,EAAAA,WAAW,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,GAAD,EAAc;AACvB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAa,EAAb;;AAEA,SAAKC,gBAAL,CAAsBD,KAAtB;;AAEAE,IAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;AAGDC,EAAAA,GAAG,CAACC,IAAD,EAAOC,IAAI,GAAG,OAAd,EAAuB;AACxB,WAAO,KAAKC,YAAL,CAAkB;AAACF,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAlB,CAAP;AACD;;AAED,MAAIE,IAAJ,GAAW;AACT,WAAON,MAAM,CAACO,IAAP,CAAY,KAAKT,KAAjB,EAAwBU,MAA/B;AACD;;AAGDC,EAAAA,KAAK,GAAG;AACN,SAAK,MAAMC,GAAX,IAAkB,KAAKZ,KAAvB,EAA8B;AAC5B,WAAKA,KAAL,CAAWY,GAAX,EAAgBD,KAAhB;AACD;;AAED,WAAO,IAAP;AACD;;AAEDE,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,SAAK,MAAMF,GAAX,IAAkB,KAAKZ,KAAvB,EAA8B;AAC5Bc,MAAAA,EAAE,CAAC,KAAKd,KAAL,CAAWY,GAAX,CAAD,CAAF;AACD;AACF;;AAEDG,EAAAA,QAAQ,GAAG;AACT,UAAMC,KAAK,GAAG,EAAd;AACA,SAAKH,OAAL,CAAaI,IAAI,IAAI;AACnBD,MAAAA,KAAK,CAACC,IAAI,CAACZ,IAAN,CAAL,GAAmB;AACjBa,QAAAA,IAAI,EAAED,IAAI,CAACC,IAAL,IAAa,CADF;AAEjBC,QAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,IAAc,CAFJ;AAGjBC,QAAAA,OAAO,EAAEH,IAAI,CAACI,cAAL,MAAyB,CAHjB;AAIjBC,QAAAA,EAAE,EAAEL,IAAI,CAACM,KAAL,MAAgB;AAJH,OAAnB;AAMD,KAPD;AASA,WAAOP,KAAP;AACD;;AAEDf,EAAAA,gBAAgB,CAACD,KAAK,GAAG,EAAT,EAAa;AAC3BA,IAAAA,KAAK,CAACa,OAAN,CAAcI,IAAI,IAAI,KAAKV,YAAL,CAAkBU,IAAlB,CAAtB;AACD;;AAEDV,EAAAA,YAAY,CAACU,IAAD,EAAO;AACjB,QAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACZ,IAAnB,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,UAAM;AAACA,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAeW,IAArB;;AACA,QAAI,CAAC,KAAKjB,KAAL,CAAWK,IAAX,CAAL,EAAuB;AACrB,UAAIY,IAAI,YAAYrB,IAApB,EAA0B;AACxB,aAAKI,KAAL,CAAWK,IAAX,IAAmBY,IAAnB;AACD,OAFD,MAEO;AACL,aAAKjB,KAAL,CAAWK,IAAX,IAAmB,IAAIT,IAAJ,CAASS,IAAT,EAAeC,IAAf,CAAnB;AACD;AACF;;AACD,WAAO,KAAKN,KAAL,CAAWK,IAAX,CAAP;AACD;;AAlEwB","sourcesContent":["import Stat from './stat';\n\nexport default class Stats {\n  constructor({id, stats}) {\n    this.id = id;\n    this.stats = {};\n\n    this._initializeStats(stats);\n\n    Object.seal(this);\n  }\n\n  // Acquire a stat. Create if it doesn't exist.\n  get(name, type = 'count') {\n    return this._getOrCreate({name, type});\n  }\n\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n\n  // Reset all stats\n  reset() {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn) {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats = []) {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat) {\n    if (!stat || !stat.name) {\n      return null;\n    }\n\n    const {name, type} = stat;\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n    return this.stats[name];\n  }\n}\n"],"file":"stats.js"}