{"version":3,"sources":["../../../src/polyfill/polyfill-context.js"],"names":["polyfillContext","gl","luma","polyfilled","initializeExtensions","installPolyfills","WEBGL2_CONTEXT_POLYFILLS","installOverrides","target","target2","global_","global","window","extensions","EXTENSIONS","getSupportedExtensions","extension","getExtension","Object","keys","WEBGL2_CONTEXT_OVERRIDES","forEach","key","originalFunc","bind","polyfill","polyfills","getOwnPropertyNames","polyfillExtension","defaults","meta","suffix","ext","extKey"],"mappings":"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","sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/* eslint-disable camelcase, brace-style */\nimport {polyfillVertexArrayObject} from './polyfill-vertex-array-object';\nimport {assert} from '../utils';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n// Registers extensions, polyfills or mock functions for extensions in the polyfills list\n// TODO - remove use of name `luma`.\nexport default function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  if (!gl.luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: gl.luma, target2: gl});\n    gl.luma.polyfilled = true;\n  }\n  return gl;\n}\n\n// TODO - is this still required?\n/* global window, global */\nconst global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n"],"file":"polyfill-context.js"}