{"version":3,"sources":["../../../src/state-tracker/unified-parameter-api.js"],"names":["setParameters","gl","values","compositeSetters","key","glConstant","Number","setter","GL_PARAMETER_SETTERS","cache","state","compositeSetter","GL_COMPOSITE_PARAMETER_SETTERS","getParameters","parameters","GL_PARAMETER_DEFAULTS","getter","GL_PARAMETER_GETTERS","getParameter","parameterKeys","Array","isArray","Object","keys","resetParameters","withParameters","func","nocatch","value"],"mappings":";;;;;;;;;;AAGA;;AAOA;;AACA;;AAKO,SAASA,aAAT,CAAuBC,EAAvB,EAA2BC,MAA3B,EAAmC;AACxC,qBAAO,oBAAQD,EAAR,CAAP,EAAoB,wCAApB;;AAEA,MAAI,0BAAcC,MAAd,CAAJ,EAA2B;AACzB;AACD;;AAED,MAAMC,gBAAgB,GAAG,EAAzB;;AAIA,OAAK,IAAMC,GAAX,IAAkBF,MAAlB,EAA0B;AACxB,QAAMG,UAAU,GAAGC,MAAM,CAACF,GAAD,CAAzB;AACA,QAAMG,MAAM,GAAGC,2CAAqBJ,GAArB,CAAf;;AACA,QAAIG,MAAJ,EAAY;AAEV,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9BJ,QAAAA,gBAAgB,CAACI,MAAD,CAAhB,GAA2B,IAA3B;AACD,OAFD,MAEO;AAKLA,QAAAA,MAAM,CAACN,EAAD,EAAKC,MAAM,CAACE,GAAD,CAAX,EAAkBC,UAAlB,CAAN;AACD;AACF;AACF;;AASD,MAAMI,KAAK,GAAGR,EAAE,CAACS,KAAH,IAAYT,EAAE,CAACS,KAAH,CAASD,KAAnC;;AACA,MAAIA,KAAJ,EAAW;AACT,SAAK,IAAML,IAAX,IAAkBD,gBAAlB,EAAoC;AAElC,UAAMQ,eAAe,GAAGC,qDAA+BR,IAA/B,CAAxB;AAGAO,MAAAA,eAAe,CAACV,EAAD,EAAKC,MAAL,EAAaO,KAAb,CAAf;AACD;AACF;AAGF;;AAQM,SAASI,aAAT,CAAuBZ,EAAvB,EAA2Ba,UAA3B,EAAuC;AAE5CA,EAAAA,UAAU,GAAGA,UAAU,IAAIC,2CAA3B;;AAGA,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAElC,QAAMV,GAAG,GAAGU,UAAZ;AACA,QAAME,MAAM,GAAGC,2CAAqBb,GAArB,CAAf;AACA,WAAOY,MAAM,GAAGA,MAAM,CAACf,EAAD,EAAKG,GAAL,CAAT,GAAqBH,EAAE,CAACiB,YAAH,CAAgBd,GAAhB,CAAlC;AACD;;AAED,MAAMe,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcP,UAAd,IAA4BA,UAA5B,GAAyCQ,MAAM,CAACC,IAAP,CAAYT,UAAZ,CAA/D;AAEA,MAAMJ,KAAK,GAAG,EAAd;AAd4C;AAAA;AAAA;;AAAA;AAe5C,yBAAkBS,aAAlB,8HAAiC;AAAA,UAAtBf,KAAsB;AAC/B,UAAMY,OAAM,GAAGC,2CAAqBb,KAArB,CAAf;AACAM,MAAAA,KAAK,CAACN,KAAD,CAAL,GAAaY,OAAM,GAAGA,OAAM,CAACf,EAAD,EAAKK,MAAM,CAACF,KAAD,CAAX,CAAT,GAA6BH,EAAE,CAACiB,YAAH,CAAgBZ,MAAM,CAACF,KAAD,CAAtB,CAAhD;AACD;AAlB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmB5C,SAAOM,KAAP;AACD;;AAMM,SAASc,eAAT,CAAyBvB,EAAzB,EAA6B;AAClCD,EAAAA,aAAa,CAACC,EAAD,EAAKc,2CAAL,CAAb;AACD;;AAIM,SAASU,cAAT,CAAwBxB,EAAxB,EAA4Ba,UAA5B,EAAwCY,IAAxC,EAA8C;AACnD,MAAI,0BAAcZ,UAAd,CAAJ,EAA+B;AAE7B,WAAOY,IAAI,CAACzB,EAAD,CAAX;AACD;;AAJkD,4BAM1Ba,UAN0B,CAM5Ca,OAN4C;AAAA,MAM5CA,OAN4C,oCAMlC,IANkC;AAQnD,2CAAiB1B,EAAjB;AACAD,EAAAA,aAAa,CAACC,EAAD,EAAKa,UAAL,CAAb;AAGA,MAAIc,KAAJ;;AAEA,MAAID,OAAJ,EAAa;AAEXC,IAAAA,KAAK,GAAGF,IAAI,CAACzB,EAAD,CAAZ;AACA,4CAAgBA,EAAhB;AACD,GAJD,MAIO;AAEL,QAAI;AACF2B,MAAAA,KAAK,GAAGF,IAAI,CAACzB,EAAD,CAAZ;AACD,KAFD,SAEU;AACR,8CAAgBA,EAAhB;AACD;AACF;;AAED,SAAO2B,KAAP;AACD","sourcesContent":["// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport {pushContextState, popContextState} from './track-context-state';\nimport {isObjectEmpty, isWebGL, assert} from '../utils';\n\n// Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\nexport function setParameters(gl, values) {\n  assert(isWebGL(gl), 'setParameters requires a WebGL context');\n\n  if (isObjectEmpty(values)) {\n    return;\n  }\n\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, values, cache);\n    }\n  }\n\n  // Add a log for the else case?\n}\n\n// Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n  // support both arrays of parameters and objects (keys represent parameters)\n\n  if (typeof parameters === 'number') {\n    // single GL enum\n    const key = parameters;\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    const getter = GL_PARAMETER_GETTERS[key];\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n  return state;\n}\n\n// Reset all parameters to a (almost) pure context state\n// NOTE: viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,\n//   NOT the canvas size dimensions, so they will have to be properly set after\n//   calling this function.\nexport function resetParameters(gl) {\n  setParameters(gl, GL_PARAMETER_DEFAULTS);\n}\n\n// Stores current \"global\" WebGL context settings, changes selected parameters,\n// executes function, restores parameters\nexport function withParameters(gl, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  pushContextState(gl);\n  setParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n"],"file":"unified-parameter-api.js"}