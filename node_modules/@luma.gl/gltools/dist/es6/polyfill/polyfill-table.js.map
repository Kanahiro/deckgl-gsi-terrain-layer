{"version":3,"sources":["../../../src/polyfill/polyfill-table.js"],"names":["assert","isWebGL2","getParameterPolyfill","OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","getExtensionData","gl","extension","webgl2","ext","getExtension","WEBGL2_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","location","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","handle","pname","getQueryObject","getQueryParameter","WEBGL2_CONTEXT_OVERRIDES","readBuffer","originalFunc","attachment","getVertexAttrib","result","undefined","getProgramParameter","program","getInternalformatParameter","target","format","Int32Array","getTexParameter","extensions","luma","TEXTURE_MAX_ANISOTROPY_EXT","getParameter","hint","value"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {assert, isWebGL2} from '../utils';\n\nimport {getParameterPolyfill} from './get-parameter-polyfill';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: () => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n"],"file":"polyfill-table.js"}