{"version":3,"sources":["../../../src/webgl-utils/texture-utils.js"],"names":["Texture2D","TextureCube","Texture3D","Framebuffer","assert","cloneTextureFrom","refTexture","overrides","TextureType","constructor","gl","width","height","format","type","dataFormat","border","mipmaps","textureOptions","Object","assign","toFramebuffer","texture","opts","id","framebuffer","attachments"],"mappings":";AACA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,SAAQC,MAAR,QAAqB,UAArB;AAGA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,SAAtC,EAAiD;AACtDH,EAAAA,MAAM,CACJE,UAAU,YAAYN,SAAtB,IACEM,UAAU,YAAYL,WADxB,IAEEK,UAAU,YAAYJ,SAHpB,CAAN;AAMA,MAAMM,WAAW,GAAGF,UAAU,CAACG,WAA/B;AAPsD,MAS/CC,EAT+C,GASiBJ,UATjB,CAS/CI,EAT+C;AAAA,MAS3CC,KAT2C,GASiBL,UATjB,CAS3CK,KAT2C;AAAA,MASpCC,MAToC,GASiBN,UATjB,CASpCM,MAToC;AAAA,MAS5BC,MAT4B,GASiBP,UATjB,CAS5BO,MAT4B;AAAA,MASpBC,IAToB,GASiBR,UATjB,CASpBQ,IAToB;AAAA,MASdC,UATc,GASiBT,UATjB,CASdS,UATc;AAAA,MASFC,MATE,GASiBV,UATjB,CASFU,MATE;AAAA,MASMC,OATN,GASiBX,UATjB,CASMW,OATN;AAWtD,MAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CACrB;AACET,IAAAA,KAAK,EAALA,KADF;AAEEC,IAAAA,MAAM,EAANA,MAFF;AAGEC,IAAAA,MAAM,EAANA,MAHF;AAIEC,IAAAA,IAAI,EAAJA,IAJF;AAKEC,IAAAA,UAAU,EAAVA,UALF;AAMEC,IAAAA,MAAM,EAANA,MANF;AAOEC,IAAAA,OAAO,EAAPA;AAPF,GADqB,EAUrBV,SAVqB,CAAvB;AAcA,SAAO,IAAIC,WAAJ,CAAgBE,EAAhB,EAAoBQ,cAApB,CAAP;AACD;AAID,OAAO,SAASG,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;AAAA,MACpCb,EADoC,GACXY,OADW,CACpCZ,EADoC;AAAA,MAChCC,KADgC,GACXW,OADW,CAChCX,KADgC;AAAA,MACzBC,MADyB,GACXU,OADW,CACzBV,MADyB;AAAA,MACjBY,EADiB,GACXF,OADW,CACjBE,EADiB;AAE3C,MAAMC,WAAW,GAAG,IAAItB,WAAJ,CAClBO,EADkB,EAElBS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,IAAlB,EAAwB;AACtBC,IAAAA,EAAE,4BAAqBA,EAArB,CADoB;AAEtBb,IAAAA,KAAK,EAALA,KAFsB;AAGtBC,IAAAA,MAAM,EAANA,MAHsB;AAItBc,IAAAA,WAAW,6BACeJ,OADf;AAJW,GAAxB,CAFkB,CAApB;AAWA,SAAOG,WAAP;AACD","sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Clone a new texture object from a reference texture object.\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"],"file":"texture-utils.js"}