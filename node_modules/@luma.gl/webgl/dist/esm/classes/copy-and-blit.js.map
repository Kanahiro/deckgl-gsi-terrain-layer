{"version":3,"sources":["../../../src/classes/copy-and-blit.js"],"names":["Buffer","Framebuffer","Texture","withParameters","log","assertWebGL2Context","flipRows","scalePixels","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","toFramebuffer","assert","readPixelsToArray","source","sourceX","sourceY","sourceFormat","sourceAttachment","target","sourceWidth","sourceHeight","sourceType","getFramebuffer","framebuffer","deleteFramebuffer","gl","handle","attachments","width","height","type","getPixelArray","prevHandle","bindFramebuffer","readPixels","readPixelsToBuffer","targetByteOffset","components","byteCount","byteLength","accessor","size","bind","unbind","copyToDataUrl","targetMaxHeight","Number","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","copyToImage","targetImage","dataUrl","Image","src","copyToTexture","targetX","targetY","targetZ","targetMipmaplevel","targetInternalFormat","isSubCopy","texture","isFinite","copyTexImage2D","copyTexSubImage2D","copyTexSubImage3D","blit","sourceX0","sourceY0","sourceX1","sourceY1","targetX0","targetY0","targetX1","targetY1","color","depth","stencil","mask","filter","srcFramebuffer","deleteSrcFramebuffer","dstFramebuffer","deleteDstFramebuffer","readBuffer","warn","undefined","prevDrawHandle","prevReadHandle","blitFramebuffer","pixelArray","format","ArrayType","clamped"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport {withParameters, log} from '@luma.gl/gltools';\nimport {assertWebGL2Context, flipRows, scalePixels} from '../webgl-utils';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {toFramebuffer} from '../webgl-utils/texture-utils';\nimport {assert} from '../utils';\n\n// NOTE: Slow requires roundtrip to GPU\n// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.\n// App can provide targetPixelArray or have it auto allocated by this method\n// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n//  newly allocated by this method unless provided by app.\nexport function readPixelsToArray(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle, attachments} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // TODO - Set and unset gl.readBuffer\n  if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  assert(attachments[sourceAttachment]);\n\n  // Deduce the type from color attachment if not provided.\n  sourceType = sourceType || attachments[sourceAttachment].type;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n\n  // Pixel array available, if necessary, deduce type from it.\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\n\n// NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n// Copies data from a Framebuffer or a Texture object into a Buffer object.\nexport function readPixelsToBuffer(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    target = null, // A new Buffer object is created when not provided.\n    targetByteOffset = 0, // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  }\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  assertWebGL2Context(gl);\n\n  // deduce type if not available.\n  sourceType = sourceType || (target ? target.type : GL.UNSIGNED_BYTE);\n\n  if (!target) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl, {byteLength, accessor: {type: sourceType, size: components}});\n  }\n\n  target.bind({target: GL.PIXEL_PACK_BUFFER});\n  withParameters(gl, {framebuffer}, () => {\n    gl.readPixels(\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      targetByteOffset\n    );\n  });\n  target.unbind({target: GL.PIXEL_PACK_BUFFER});\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\n\n// Reads pixels from a Framebuffer or Texture object to a dataUrl\nexport function copyToDataUrl(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = {}\n) {\n  let data = readPixelsToArray(source, {sourceAttachment});\n\n  // Scale down\n  let {width, height} = source;\n  while (height > targetMaxHeight) {\n    ({data, width, height} = scalePixels({data, width, height}));\n  }\n\n  // Flip to top down coordinate system\n  flipRows({data, width, height});\n\n  /* global document */\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n\n  // Copy the pixels to a 2D canvas\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\n// Reads pixels from a Framebuffer or Texture object into an HTML Image\nexport function copyToImage(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetImage = null\n  } = {}\n) {\n  /* global Image */\n  const dataUrl = copyToDataUrl(source, {sourceAttachment});\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\n\n// Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(\n  source,\n  target,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n\n    targetX,\n    targetY,\n    targetZ,\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA,\n\n    width, // defaults to target width\n    height // defaults to target height\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle} = framebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(\n      target,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (target) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        gl.copyTexSubImage2D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.copyTexSubImage3D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\n\n// NOTE: WEBLG2 only\n// Copies a rectangle of pixels between Framebuffer or Texture objects\n// eslint-disable-next-line max-statements, complexity\nexport function blit(\n  source,\n  target,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0,\n    sourceX0 = 0,\n    sourceY0 = 0,\n    sourceX1,\n    sourceY1,\n    targetX0 = 0,\n    targetY0 = 0,\n    targetX1,\n    targetY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  } = {}\n) {\n  const {framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer} = getFramebuffer(\n    source\n  );\n  const {framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer} = getFramebuffer(\n    target\n  );\n\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  const {gl, handle, width, height, readBuffer} = dstFramebuffer;\n  assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === GL.COLOR_ATTACHMENT0) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  if (color) {\n    mask |= GL.COLOR_BUFFER_BIT;\n  }\n  if (depth) {\n    mask |= GL.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    mask |= GL.STENCIL_BUFFER_BIT;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.\n    // Overwrite the mask to `COLOR_BUFFER_BIT`\n    if (mask & (GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT)) {\n      mask = GL.COLOR_BUFFER_BIT;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n\n  const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, handle);\n  const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n  gl.readBuffer(sourceAttachment);\n  gl.blitFramebuffer(\n    sourceX0,\n    sourceY0,\n    sourceX1,\n    sourceY1,\n    targetX0,\n    targetY0,\n    targetX1,\n    targetY1,\n    mask,\n    filter\n  );\n  gl.readBuffer(readBuffer);\n  gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n  gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\n// Helper methods\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source, deleteFramebuffer: false};\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // Allocate pixel array if not already available, using supplied type\n  type = type || GL.UNSIGNED_BYTE;\n  const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n  const components = glFormatToComponents(format);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components);\n}\n"],"file":"copy-and-blit.js"}