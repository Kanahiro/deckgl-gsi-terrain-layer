{"version":3,"sources":["../../../src/classes/renderbuffer.js"],"names":["Resource","RENDERBUFFER_FORMATS","isWebGL2","assert","isFormatSupported","gl","format","formats","info","value","gl2","gl1","getExtension","Renderbuffer","getInternalformatParameter","opts","initialize","Object","seal","width","height","samples","_trackDeallocatedMemory","bindRenderbuffer","handle","renderbufferStorageMultisample","renderbufferStorage","_trackAllocatedMemory","bpp","createRenderbuffer","deleteRenderbuffer","getParameter","pname","getRenderbufferParameter"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {format: null}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // @ts-ignore\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      // @ts-ignore\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n"],"file":"renderbuffer.js"}