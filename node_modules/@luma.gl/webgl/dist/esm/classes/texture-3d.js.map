{"version":3,"sources":["../../../src/classes/texture-3d.js"],"names":["isWebGL2","withParameters","assertWebGL2Context","Texture","DATA_FORMAT_CHANNELS","TYPE_SIZES","Buffer","Texture3D","gl","props","Object","assign","depth","target","unpackFlipY","initialize","seal","level","dataFormat","width","height","border","format","type","offset","data","parameters","_trackDeallocatedMemory","bindTexture","handle","ArrayBuffer","isView","texImage3D","bindBuffer","byteLength","_trackAllocatedMemory","channels","channelSize","loaded"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, withParameters} from '@luma.gl/gltools';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport Texture from './texture';\nimport {DATA_FORMAT_CHANNELS, TYPE_SIZES} from './texture-formats';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    props = Object.assign({depth: 1}, props, {target: GL.TEXTURE_3D, unpackFlipY: false});\n    super(gl, props);\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImageData({\n    level = 0,\n    dataFormat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    data,\n    parameters = {}\n  }) {\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        // @ts-ignore\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          data\n        );\n      }\n\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        // @ts-ignore\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      // @ts-ignore\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      // @ts-ignore\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(\n        this.width * this.height * this.depth * channels * channelSize,\n        'Texture'\n      );\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n}\n"],"file":"texture-3d.js"}