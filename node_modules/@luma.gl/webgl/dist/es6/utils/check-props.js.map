{"version":3,"sources":["../../../src/utils/check-props.js"],"names":["log","checkProps","className","props","propChecks","removedProps","deprecatedProps","replacedProps","propName","replacementProp","replacement","removed","deprecated","newProps","Object","assign"],"mappings":"AA6BA,SAAQA,GAAR,QAAkB,kBAAlB;AAEA,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,UAAtC,EAAkD;AACvD,QAAM;AAACC,IAAAA,YAAY,GAAG,EAAhB;AAAoBC,IAAAA,eAAe,GAAG,EAAtC;AAA0CC,IAAAA,aAAa,GAAG;AAA1D,MAAgEH,UAAtE;;AAIA,OAAK,MAAMI,QAAX,IAAuBH,YAAvB,EAAqC;AACnC,QAAIG,QAAQ,IAAIL,KAAhB,EAAuB;AACrB,YAAMM,eAAe,GAAGJ,YAAY,CAACG,QAAD,CAApC;AACA,YAAME,WAAW,GAAGD,eAAe,aAAMP,SAAN,cAAmBG,YAAY,CAACG,QAAD,CAA/B,IAA8C,KAAjF;AACAR,MAAAA,GAAG,CAACW,OAAJ,WAAeT,SAAf,cAA4BM,QAA5B,GAAwCE,WAAxC;AACD;AACF;;AAID,OAAK,MAAMF,QAAX,IAAuBF,eAAvB,EAAwC;AACtC,QAAIE,QAAQ,IAAIL,KAAhB,EAAuB;AACrB,YAAMM,eAAe,GAAGH,eAAe,CAACE,QAAD,CAAvC;AACAR,MAAAA,GAAG,CAACY,UAAJ,WAAkBV,SAAlB,cAA+BM,QAA/B,aAA8CN,SAA9C,cAA2DO,eAA3D;AACD;AACF;;AAID,MAAII,QAAQ,GAAG,IAAf;;AACA,OAAK,MAAML,QAAX,IAAuBD,aAAvB,EAAsC;AACpC,QAAIC,QAAQ,IAAIL,KAAhB,EAAuB;AACrB,YAAMM,eAAe,GAAGF,aAAa,CAACC,QAAD,CAArC;AACAR,MAAAA,GAAG,CAACY,UAAJ,WAAkBV,SAAlB,cAA+BM,QAA/B,aAA8CN,SAA9C,cAA2DO,eAA3D;AACAI,MAAAA,QAAQ,GAAGA,QAAQ,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,CAAvB;AACAU,MAAAA,QAAQ,CAACJ,eAAD,CAAR,GAA4BN,KAAK,CAACK,QAAD,CAAjC;AACA,aAAOK,QAAQ,CAACL,QAAD,CAAf;AACD;AACF;;AAED,SAAOK,QAAQ,IAAIV,KAAnB;AACD","sourcesContent":["/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport {log} from '@luma.gl/gltools';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n"],"file":"check-props.js"}