{"version":3,"sources":["../../src/init.js"],"names":["log","Stats","isBrowser","global","VERSION","STARTUP_MESSAGE","StatsManager","constructor","stats","Map","get","name","has","set","id","lumaStats","luma","Error","version","globals","modules","nodeIO"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,kBAAlB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,SAAR,EAAmBC,MAAnB,QAAgC,cAAhC;AAIA,MAAMC,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,qBAAnE;AAEA,MAAMC,eAAe,GAAG,qDAAxB;;AAKA,MAAMC,YAAN,CAAmB;AACjBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,QAAI,CAAC,KAAKH,KAAL,CAAWI,GAAX,CAAeD,IAAf,CAAL,EAA2B;AACzB,WAAKH,KAAL,CAAWK,GAAX,CAAeF,IAAf,EAAqB,IAAIV,KAAJ,CAAU;AAACa,QAAAA,EAAE,EAAEH;AAAL,OAAV,CAArB;AACD;;AAED,WAAO,KAAKH,KAAL,CAAWE,GAAX,CAAeC,IAAf,CAAP;AACD;;AAXgB;;AAcnB,MAAMI,SAAS,GAAG,IAAIT,YAAJ,EAAlB;;AAEA,IAAIH,MAAM,CAACa,IAAP,IAAeb,MAAM,CAACa,IAAP,CAAYZ,OAAZ,KAAwBA,OAA3C,EAAoD;AAClD,QAAM,IAAIa,KAAJ,iDAAmDd,MAAM,CAACa,IAAP,CAAYZ,OAA/D,iBAA6EA,OAA7E,EAAN;AACD;;AAED,IAAI,CAACD,MAAM,CAACa,IAAZ,EAAkB;AAChB,MAAId,SAAS,EAAb,EAAiB;AACfF,IAAAA,GAAG,CAACA,GAAJ,CAAQ,CAAR,oBAAsBI,OAAtB,gBAAmCC,eAAnC;AACD;;AAEDF,EAAAA,MAAM,CAACa,IAAP,GAAcb,MAAM,CAACa,IAAP,IAAe;AAC3BZ,IAAAA,OAD2B;AAE3Bc,IAAAA,OAAO,EAAEd,OAFkB;AAG3BJ,IAAAA,GAH2B;AAO3BQ,IAAAA,KAAK,EAAEO,SAPoB;AAc3BI,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,EADF;AAEPC,MAAAA,MAAM,EAAE;AAFD;AAdkB,GAA7B;AAmBD;;AAED,SAAQN,SAAR;AACA,eAAeZ,MAAM,CAACa,IAAtB","sourcesContent":["import {log} from '@luma.gl/gltools';\nimport {Stats} from 'probe.gl';\nimport {isBrowser, global} from 'probe.gl/env';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n// Assign luma.log.level in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nclass StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${global.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!global.luma) {\n  if (isBrowser()) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  global.luma = global.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {lumaStats};\nexport default global.luma;\n"],"file":"init.js"}