{"version":3,"sources":["../../../src/classes/uniform-buffer-layout.js"],"names":["decomposeCompositeGLType","assert","ERR_ARGUMENT","GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","constructor","layout","size","key","_addUniform","data","Float32Array","typedArray","Int32Array","buffer","Uint32Array","getBytes","getData","getSubData","index","offset","undefined","begin","offsets","end","sizes","subarray","setUniforms","values","_setValue","value","type","set","uniformType","typeAndComponents","components","count","_alignTo"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n"],"file":"uniform-buffer-layout.js"}