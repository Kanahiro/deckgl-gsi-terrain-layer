{"version":3,"sources":["../../../src/classes/resource.js"],"names":["isWebGL2","lumaStats","assertWebGLContext","getKey","getKeyValue","uid","assert","stubRemovedMethods","ERR_RESOURCE_METHOD_UNDEFINED","Resource","constructor","gl","opts","id","userData","name","_bound","_handle","handle","undefined","_createHandle","byteLength","_addStats","toString","delete","deleteChildren","children","_deleteHandle","_removeStats","filter","Boolean","forEach","child","bind","funcOrHandle","_bindHandle","value","unbind","getParameter","pname","parameters","PARAMETERS","parameter","isWebgl2","parameterAvailable","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","defaultValue","_getParameter","getParameters","keys","values","parameterKeys","Object","key","type","setParameter","Error","_setParameter","setParameters","className","version","methodNames","initialize","_getOptsFromHandle","_context","luma","stats","get","incrementCount","decrementCount","_trackAllocatedMemory","bytes","addCount","_trackDeallocatedMemory","subtractCount"],"mappings":"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","sourcesContent":["import {isWebGL2} from '@luma.gl/gltools';\nimport {lumaStats} from '../init';\nimport {assertWebGLContext, getKey, getKeyValue} from '../webgl-utils';\nimport {uid, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => {\n        child.delete();\n      });\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(opts = {}) {\n    const {parameters, keys} = {};\n\n    // Get parameter definitions for this Resource\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, opts);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {GLenum} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /**\n   * @param {GLenum} pname\n   * @param {GLint|GLfloat|GLenum} param\n   * @return {Sampler} returns self to enable chaining\n   */\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n}\n"],"file":"resource.js"}