{"version":3,"sources":["../../../src/classes/buffer.js"],"names":["Resource","Accessor","assertWebGL2Context","getGLTypeFromTypedArray","getTypedArrayFromGLType","log","assert","checkProps","DEBUG_DATA_LENGTH","DEPRECATED_PROPS","offset","stride","type","size","divisor","normalized","integer","instanced","isInstanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","bytes","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","constructor","gl","props","stubRemovedMethods","target","webgl2","initialize","Object","seal","getElementCount","accessor","Math","round","byteLength","getBytesPerElement","getVertexCount","getBytesPerVertex","ArrayBuffer","isView","data","Number","isFinite","usage","debugData","setAccessor","assign","_setData","_setByteLength","setProps","buffer","reallocate","bytesUsed","setData","subData","srcOffset","length","bindBuffer","handle","undefined","bufferSubData","_inferType","copyData","sourceBuffer","readOffset","writeOffset","copyBufferSubData","getData","dstData","srcByteOffset","dstOffset","ArrayType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","dstAvailableElementCount","dstElementCount","min","copyElementCount","getBufferSubData","bind","index","bindBufferRange","bindBufferBase","unbind","isIndexedBuffer","getDebugData","changed","invalidateDebugData","_trackDeallocatedMemory","_getTarget","bufferData","slice","_trackAllocatedMemory","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","_createHandle","createBuffer","_deleteHandle","deleteBuffer","_getParameter","pname","value","getBufferParameter","deprecated","setByteLength","updateAccessor","opts"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {\n  assertWebGL2Context,\n  getGLTypeFromTypedArray,\n  getTypedArrayFromGLType\n} from '../webgl-utils';\nimport {log} from '@luma.gl/gltools';\nimport {assert, checkProps} from '../utils';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data, props.offset, props.byteLength);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, offset = 0, byteLength = data.byteLength + offset) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, byteLength, this.usage);\n    this.gl.bufferSubData(target, offset, data);\n    this.gl.bindBuffer(target, null);\n\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n"],"file":"buffer.js"}