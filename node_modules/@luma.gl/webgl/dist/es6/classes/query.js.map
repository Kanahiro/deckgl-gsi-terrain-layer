{"version":3,"sources":["../../../src/classes/query.js"],"names":["Resource","FEATURES","hasFeatures","isWebGL2","assert","GL_QUERY_RESULT","GL_QUERY_RESULT_AVAILABLE","GL_TIME_ELAPSED_EXT","GL_GPU_DISJOINT_EXT","GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","GL_ANY_SAMPLES_PASSED","GL_ANY_SAMPLES_PASSED_CONSERVATIVE","Query","isSupported","gl","opts","webgl2","hasTimerQuery","TIMER_QUERY","supported","key","constructor","target","_queryPending","_pollingPromise","Object","seal","beginTimeElapsedQuery","begin","beginOcclusionQuery","conservative","beginTransformFeedbackQuery","beginQuery","handle","end","endQuery","isResultAvailable","resultAvailable","getQueryParameter","isTimerDisjoint","getParameter","getResult","getTimerMilliseconds","createPoll","limit","Number","POSITIVE_INFINITY","counter","Promise","resolve","reject","poll","requestAnimationFrame","_createHandle","createQuery","_deleteHandle","deleteQuery"],"mappings":"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","sourcesContent":["// WebGL2 Query (also handles disjoint timer extensions)\n/* global requestAnimationFrame */\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../features';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils';\n\nconst GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88bf; // Elapsed time (in nanoseconds).\nconst GL_GPU_DISJOINT_EXT = 0x8fbb; // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8c2f; // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a; // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n        case 'queries':\n          supported = supported && webgl2;\n          break;\n        case 'timers':\n          supported = supported && hasTimerQuery;\n          break;\n        default:\n          assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.target = null;\n    this._queryPending = false;\n    this._pollingPromise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // Don't start a new query if one is already active.\n    if (this._queryPending) {\n      return this;\n    }\n\n    this.target = target;\n    this.gl.beginQuery(this.target, this.handle);\n\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Can't end a new query if the last one hasn't been resolved.\n    if (this._queryPending) {\n      return this;\n    }\n\n    if (this.target) {\n      this.gl.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n    return resultAvailable;\n  }\n\n  // Timing query is disjoint, i.e. results are invalid\n  isTimerDisjoint() {\n    return this.gl.getParameter(GL_GPU_DISJOINT_EXT);\n  }\n\n  // Returns query result.\n  getResult() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  // Polls the query\n  createPoll(limit = Number.POSITIVE_INFINITY) {\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n\n    return this._pollingPromise;\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    this.gl.deleteQuery(this.handle);\n  }\n}\n"],"file":"query.js"}