{"version":3,"sources":["../../../src/classes/shader.js"],"names":["log","parseGLSLCompilerError","getShaderName","assertWebGLContext","uid","assert","Resource","ERR_SOURCE","Shader","getTypeName","shaderType","constructor","gl","props","source","id","initialize","shaderName","_compile","getParameter","pname","getShaderParameter","handle","toString","getName","getSource","getShaderSource","getTranslatedSource","extension","getExtension","getTranslatedShaderSource","startsWith","shaderSource","compileShader","compileStatus","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","_deleteHandle","deleteShader","_getOptsFromHandle","type","VertexShader","Object","assign","_createHandle","createShader","FragmentShader"],"mappings":"AACA,SAAQA,GAAR,QAAkB,kBAAlB;AACA,SAAQC,sBAAR,EAAgCC,aAAhC,QAAoD,eAApD;AACA,SAAQC,kBAAR,QAAiC,gBAAjC;AACA,SAAQC,GAAR,EAAaC,MAAb,QAA0B,UAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,UAAU,GAAG,sDAAnB;AAGA,OAAO,MAAMC,MAAN,SAAqBF,QAArB,CAA8B;AACnC,SAAOG,WAAP,CAAmBC,UAAnB,EAA+B;AAC7B,YAAQA,UAAR;AACE;AACE,eAAO,eAAP;;AACF;AACE,eAAO,iBAAP;;AACF;AACEL,QAAAA,MAAM,CAAC,KAAD,CAAN;AACA,eAAO,SAAP;AAPJ;AASD;;AAGDM,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAY;AACrBV,IAAAA,kBAAkB,CAACS,EAAD,CAAlB;AAGAP,IAAAA,MAAM,CAAC,OAAOQ,KAAK,CAACC,MAAb,KAAwB,QAAzB,EAAmCP,UAAnC,CAAN;AAGA,UAAMQ,EAAE,GACNb,aAAa,CAACW,KAAK,CAACC,MAAP,EAAe,IAAf,CAAb,IACAD,KAAK,CAACE,EADN,IAEAX,GAAG,mBAAYI,MAAM,CAACC,WAAP,CAAmBI,KAAK,CAACH,UAAzB,CAAZ,EAHL;AAKA,UAAME,EAAN,EAAU;AAACG,MAAAA;AAAD,KAAV;AAEA,SAAKL,UAAL,GAAkBG,KAAK,CAACH,UAAxB;AACA,SAAKI,MAAL,GAAcD,KAAK,CAACC,MAApB;AAEA,SAAKE,UAAL,CAAgBH,KAAhB;AACD;;AAEDG,EAAAA,UAAU,CAAC;AAACF,IAAAA;AAAD,GAAD,EAAW;AACnB,UAAMG,UAAU,GAAGf,aAAa,CAACY,MAAD,EAAS,IAAT,CAAhC;;AACA,QAAIG,UAAJ,EAAgB;AACd,WAAKF,EAAL,GAAUX,GAAG,CAACa,UAAD,CAAb;AACD;;AACD,SAAKC,QAAL,CAAcJ,MAAd;AACD;;AAIDK,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,WAAO,KAAKR,EAAL,CAAQS,kBAAR,CAA2B,KAAKC,MAAhC,EAAwCF,KAAxC,CAAP;AACD;;AAEDG,EAAAA,QAAQ,GAAG;AACT,qBAAUf,MAAM,CAACC,WAAP,CAAmB,KAAKC,UAAxB,CAAV,cAAiD,KAAKK,EAAtD;AACD;;AAEDS,EAAAA,OAAO,GAAG;AACR,WAAOtB,aAAa,CAAC,KAAKY,MAAN,CAAb,IAA8B,gBAArC;AACD;;AAEDW,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKb,EAAL,CAAQc,eAAR,CAAwB,KAAKJ,MAA7B,CAAP;AACD;;AAGDK,EAAAA,mBAAmB,GAAG;AACpB,UAAMC,SAAS,GAAG,KAAKhB,EAAL,CAAQiB,YAAR,CAAqB,qBAArB,CAAlB;AACA,WAAOD,SAAS,GACZA,SAAS,CAACE,yBAAV,CAAoC,KAAKR,MAAzC,CADY,GAEZ,qEAFJ;AAGD;;AAGDJ,EAAAA,QAAQ,CAACJ,MAAM,GAAG,KAAKA,MAAf,EAAuB;AAC7B,QAAI,CAACA,MAAM,CAACiB,UAAP,CAAkB,WAAlB,CAAL,EAAqC;AACnCjB,MAAAA,MAAM,2BAAoBA,MAApB,CAAN;AACD;;AACD,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKF,EAAL,CAAQoB,YAAR,CAAqB,KAAKV,MAA1B,EAAkC,KAAKR,MAAvC;AACA,SAAKF,EAAL,CAAQqB,aAAR,CAAsB,KAAKX,MAA3B;AAKA,UAAMY,aAAa,GAAG,KAAKf,YAAL,OAAtB;;AACA,QAAI,CAACe,aAAL,EAAoB;AAClB,YAAMC,OAAO,GAAG,KAAKvB,EAAL,CAAQwB,gBAAR,CAAyB,KAAKd,MAA9B,CAAhB;AACA,YAAM;AAACL,QAAAA,UAAD;AAAaoB,QAAAA,MAAb;AAAqBC,QAAAA;AAArB,UAAiCrC,sBAAsB,CAC3DkC,OAD2D,EAE3D,KAAKrB,MAFsD,EAG3D,KAAKJ,UAHsD,EAI3D,KAAKK,EAJsD,CAA7D;AAMAf,MAAAA,GAAG,CAACuC,KAAJ,sCAAwCtB,UAAxC,eAAuDoB,MAAvD;AACArC,MAAAA,GAAG,CAACwC,IAAJ,wCAAyCvB,UAAzC,eAAwDqB,QAAxD;AACA,YAAM,IAAIG,KAAJ,sCAAwCxB,UAAxC,EAAN;AACD;AACF;;AAEDyB,EAAAA,aAAa,GAAG;AACd,SAAK9B,EAAL,CAAQ+B,YAAR,CAAqB,KAAKrB,MAA1B;AACD;;AAEDsB,EAAAA,kBAAkB,GAAG;AACnB,WAAO;AACLC,MAAAA,IAAI,EAAE,KAAK1B,YAAL,OADD;AAELL,MAAAA,MAAM,EAAE,KAAKW,SAAL;AAFH,KAAP;AAID;;AAxGkC;AA2GrC,OAAO,MAAMqB,YAAN,SAA2BtC,MAA3B,CAAkC;AACvCG,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAY;AAErB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAG;AAACC,QAAAA,MAAM,EAAED;AAAT,OAAR;AACD;;AACD,UAAMD,EAAN,EAAUmC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnC,KAAlB,EAAyB;AAACH,MAAAA,UAAU;AAAX,KAAzB,CAAV;AACD;;AAGDuC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKrC,EAAL,CAAQsC,YAAR,OAAP;AACD;;AAZsC;AAezC,OAAO,MAAMC,cAAN,SAA6B3C,MAA7B,CAAoC;AACzCG,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAY;AAErB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAG;AAACC,QAAAA,MAAM,EAAED;AAAT,OAAR;AACD;;AAED,UAAMD,EAAN,EAAUmC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnC,KAAlB,EAAyB;AAACH,MAAAA,UAAU;AAAX,KAAzB,CAAV;AACD;;AAGDuC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKrC,EAAL,CAAQsC,YAAR,OAAP;AACD;;AAbwC","sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, assert} from '../utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL.debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL.debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile(source = this.source) {\n    if (!source.startsWith('#version ')) {\n      source = `#version 100\\n${source}`;\n    }\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}