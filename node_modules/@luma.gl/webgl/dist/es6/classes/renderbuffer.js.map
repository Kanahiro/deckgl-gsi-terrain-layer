{"version":3,"sources":["../../../src/classes/renderbuffer.js"],"names":["Resource","RENDERBUFFER_FORMATS","isWebGL2","assert","isFormatSupported","gl","format","formats","info","value","gl2","gl1","getExtension","Renderbuffer","isSupported","getSamplesForFormat","getInternalformatParameter","constructor","opts","initialize","Object","seal","width","height","samples","_trackDeallocatedMemory","bindRenderbuffer","handle","renderbufferStorageMultisample","renderbufferStorage","_trackAllocatedMemory","bpp","resize","_createHandle","createRenderbuffer","_deleteHandle","deleteRenderbuffer","_bindHandle","_syncHandle","getParameter","_getParameter","pname","getRenderbufferParameter"],"mappings":"AAEA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,MAAR,QAAqB,UAArB;;AAEA,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AAC9C,QAAMC,IAAI,GAAGD,OAAO,CAACD,MAAD,CAApB;;AACA,MAAI,CAACE,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AACD,QAAMC,KAAK,GAAGP,QAAQ,CAACG,EAAD,CAAR,GAAeG,IAAI,CAACE,GAAL,IAAYF,IAAI,CAACG,GAAhC,GAAsCH,IAAI,CAACG,GAAzD;;AACA,MAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOJ,EAAE,CAACO,YAAH,CAAgBH,KAAhB,CAAP;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,eAAe,MAAMI,YAAN,SAA2Bb,QAA3B,CAAoC;AACjD,SAAOc,WAAP,CAAmBT,EAAnB,EAAuB;AAACC,IAAAA;AAAD,MAAW;AAACA,IAAAA,MAAM,EAAE;AAAT,GAAlC,EAAkD;AAChD,WAAO,CAACA,MAAD,IAAWF,iBAAiB,CAACC,EAAD,EAAKC,MAAL,EAAaL,oBAAb,CAAnC;AACD;;AAED,SAAOc,mBAAP,CAA2BV,EAA3B,EAA+B;AAACC,IAAAA;AAAD,GAA/B,EAAyC;AAEvC,WAAOD,EAAE,CAACW,0BAAH,QAA+CV,MAA/C,QAAP;AACD;;AAEDW,EAAAA,WAAW,CAACZ,EAAD,EAAKa,IAAI,GAAG,EAAZ,EAAgB;AACzB,UAAMb,EAAN,EAAUa,IAAV;AAGA,SAAKC,UAAL,CAAgBD,IAAhB;AAEAE,IAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;AAGDF,EAAAA,UAAU,CAAC;AAACb,IAAAA,MAAD;AAASgB,IAAAA,KAAK,GAAG,CAAjB;AAAoBC,IAAAA,MAAM,GAAG,CAA7B;AAAgCC,IAAAA,OAAO,GAAG;AAA1C,GAAD,EAA+C;AACvDrB,IAAAA,MAAM,CAACG,MAAD,EAAS,cAAT,CAAN;;AAEA,SAAKmB,uBAAL;;AAEA,SAAKpB,EAAL,CAAQqB,gBAAR,QAA0C,KAAKC,MAA/C;;AAEA,QAAIH,OAAO,KAAK,CAAZ,IAAiBtB,QAAQ,CAAC,KAAKG,EAAN,CAA7B,EAAwC;AAEtC,WAAKA,EAAL,CAAQuB,8BAAR,QAAwDJ,OAAxD,EAAiElB,MAAjE,EAAyEgB,KAAzE,EAAgFC,MAAhF;AACD,KAHD,MAGO;AACL,WAAKlB,EAAL,CAAQwB,mBAAR,QAA6CvB,MAA7C,EAAqDgB,KAArD,EAA4DC,MAA5D;AACD;;AAID,SAAKjB,MAAL,GAAcA,MAAd;AACA,SAAKgB,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;;AAEA,SAAKM,qBAAL,CACE,KAAKR,KAAL,GAAa,KAAKC,MAAlB,IAA4B,KAAKC,OAAL,IAAgB,CAA5C,IAAiDvB,oBAAoB,CAAC,KAAKK,MAAN,CAApB,CAAkCyB,GADrF;;AAIA,WAAO,IAAP;AACD;;AAEDC,EAAAA,MAAM,CAAC;AAACV,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAkB;AAEtB,QAAID,KAAK,KAAK,KAAKA,KAAf,IAAwBC,MAAM,KAAK,KAAKA,MAA5C,EAAoD;AAClD,aAAO,KAAKJ,UAAL,CAAgB;AAACG,QAAAA,KAAD;AAAQC,QAAAA,MAAR;AAAgBjB,QAAAA,MAAM,EAAE,KAAKA,MAA7B;AAAqCkB,QAAAA,OAAO,EAAE,KAAKA;AAAnD,OAAhB,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAGDS,EAAAA,aAAa,GAAG;AACd,WAAO,KAAK5B,EAAL,CAAQ6B,kBAAR,EAAP;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,SAAK9B,EAAL,CAAQ+B,kBAAR,CAA2B,KAAKT,MAAhC;;AACA,SAAKF,uBAAL;AACD;;AAEDY,EAAAA,WAAW,CAACV,MAAD,EAAS;AAClB,SAAKtB,EAAL,CAAQqB,gBAAR,QAA0CC,MAA1C;AACD;;AAEDW,EAAAA,WAAW,CAACX,MAAD,EAAS;AAClB,SAAKrB,MAAL,GAAc,KAAKiC,YAAL,OAAd;AACA,SAAKjB,KAAL,GAAa,KAAKiB,YAAL,OAAb;AACA,SAAKhB,MAAL,GAAc,KAAKgB,YAAL,OAAd;AACA,SAAKf,OAAL,GAAe,KAAKe,YAAL,OAAf;AACD;;AAIDC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,SAAKpC,EAAL,CAAQqB,gBAAR,QAA0C,KAAKC,MAA/C;AACA,UAAMlB,KAAK,GAAG,KAAKJ,EAAL,CAAQqC,wBAAR,QAAkDD,KAAlD,CAAd;AAEA,WAAOhC,KAAP;AACD;;AApFgD","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {format: null}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // @ts-ignore\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      // @ts-ignore\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n"],"file":"renderbuffer.js"}