{"version":3,"sources":["../../../src/classes/texture.js"],"names":["Resource","Buffer","TEXTURE_FORMATS","DATA_FORMAT_CHANNELS","TYPE_SIZES","isFormatSupported","isLinearFilteringSupported","isWebGL2","withParameters","log","global","assertWebGL2Context","uid","isPowerOfTwo","assert","NPOT_MIN_FILTERS","WebGLBuffer","Texture","isSupported","gl","format","linearFiltering","supported","constructor","props","id","handle","target","textureUnit","undefined","loaded","width","height","depth","type","dataFormat","border","mipmaps","toString","initialize","data","Promise","then","resolvedImageData","Object","assign","pixels","recreate","parameters","pixelStore","_deduceParameters","compressed","Number","isFinite","activeTexture","bindTexture","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","resize","params","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","texImage2D","bindBuffer","compressedTexImage2D","byteLength","_trackAllocatedMemory","channels","channelSize","setSubImageData","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","copyFramebuffer","opts","error","getActiveUnit","getParameter","bind","unbind","textureFormat","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","HTMLVideoElement","videoWidth","videoHeight","_createHandle","createTexture","_deleteHandle","deleteTexture","_getParameter","pname","value","getTexParameter","_setParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf"],"mappings":"AAEA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SACEC,eADF,EAEEC,oBAFF,EAGEC,UAHF,EAIEC,iBAJF,EAKEC,0BALF,QAMO,mBANP;AAQA,SAAQC,QAAR,EAAkBC,cAAlB,EAAkCC,GAAlC,QAA4C,kBAA5C;AACA,SAAQC,MAAR,QAAqB,cAArB;AACA,SAAQC,mBAAR,QAAkC,gBAAlC;AACA,SAAQC,GAAR,EAAaC,YAAb,EAA2BC,MAA3B,QAAwC,UAAxC;AAGA,MAAMC,gBAAgB,GAAG,YAAzB;;AAIA,MAAMC,WAAW,GAAGN,MAAM,CAACM,WAAP,IAAsB,SAASA,WAAT,GAAuB,CAAE,CAAnE;;AAEA,eAAe,MAAMC,OAAN,SAAsBjB,QAAtB,CAA+B;AAC5C,SAAOkB,WAAP,CAAmBC,EAAnB,EAAuB;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAA4B,EAAnD,EAAuD;AACrD,QAAIC,SAAS,GAAG,IAAhB;;AACA,QAAIF,MAAJ,EAAY;AACVE,MAAAA,SAAS,GAAGA,SAAS,IAAIjB,iBAAiB,CAACc,EAAD,EAAKC,MAAL,CAA1C;AACAE,MAAAA,SAAS,GAAGA,SAAS,KAAK,CAACD,eAAD,IAAoBf,0BAA0B,CAACa,EAAD,EAAKC,MAAL,CAAnD,CAArB;AACD;;AACD,WAAOE,SAAP;AACD;;AAYDC,EAAAA,WAAW,CAACJ,EAAD,EAAKK,KAAL,EAAY;AACrB,UAAM;AACJC,MAAAA,EAAE,GAAGb,GAAG,CAAC,SAAD,CADJ;AAEJc,MAAAA,MAFI;AAGJC,MAAAA;AAHI,QAKFH,KALJ;AAOA,UAAML,EAAN,EAAU;AAACM,MAAAA,EAAD;AAAKC,MAAAA;AAAL,KAAV;AAEA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAmBC,SAAnB;AAKA,SAAKC,MAAL,GAAc,KAAd;AAEA,SAAKC,KAAL,GAAaF,SAAb;AACA,SAAKG,MAAL,GAAcH,SAAd;AACA,SAAKI,KAAL,GAAaJ,SAAb;AACA,SAAKT,MAAL,GAAcS,SAAd;AACA,SAAKK,IAAL,GAAYL,SAAZ;AACA,SAAKM,UAAL,GAAkBN,SAAlB;AACA,SAAKO,MAAL,GAAcP,SAAd;AACA,SAAKD,WAAL,GAAmBC,SAAnB;AACA,SAAKQ,OAAL,GAAeR,SAAf;AACD;;AAEDS,EAAAA,QAAQ,GAAG;AACT,6BAAkB,KAAKb,EAAvB,cAA6B,KAAKM,KAAlC,cAA2C,KAAKC,MAAhD;AACD;;AAGDO,EAAAA,UAAU,CAACf,KAAK,GAAG,EAAT,EAAa;AACrB,QAAIgB,IAAI,GAAGhB,KAAK,CAACgB,IAAjB;;AAEA,QAAIA,IAAI,YAAYC,OAApB,EAA6B;AAC3BD,MAAAA,IAAI,CAACE,IAAL,CAAUC,iBAAiB,IACzB,KAAKJ,UAAL,CACEK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,KAAlB,EAAyB;AACvBsB,QAAAA,MAAM,EAAEH,iBADe;AAEvBH,QAAAA,IAAI,EAAEG;AAFiB,OAAzB,CADF,CADF;AAQA,aAAO,IAAP;AACD;;AAED,UAAM;AACJG,MAAAA,MAAM,GAAG,IADL;AAEJ1B,MAAAA,MAAM,OAFF;AAGJgB,MAAAA,MAAM,GAAG,CAHL;AAIJW,MAAAA,QAAQ,GAAG,KAJP;AAKJC,MAAAA,UAAU,GAAG,EALT;AAMJC,MAAAA,UAAU,GAAG,EANT;AAOJrB,MAAAA,WAAW,GAAGC;AAPV,QAQFL,KARJ;AAUA,QAAI;AAACa,MAAAA,OAAO,GAAG;AAAX,QAAmBb,KAAvB;;AAGA,QAAI,CAACgB,IAAL,EAAW;AAITA,MAAAA,IAAI,GAAGM,MAAP;AACD;;AAED,QAAI;AAACf,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBG,MAAAA,UAAhB;AAA4BD,MAAAA;AAA5B,QAAoCV,KAAxC;AACA,UAAM;AAACS,MAAAA,KAAK,GAAG;AAAT,QAAcT,KAApB;AAGA,KAAC;AAACO,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBG,MAAAA,UAAhB;AAA4BD,MAAAA;AAA5B,QAAoC,KAAKgB,iBAAL,CAAuB;AAC1D9B,MAAAA,MAD0D;AAE1Dc,MAAAA,IAF0D;AAG1DC,MAAAA,UAH0D;AAI1DgB,MAAAA,UAAU,EAAE,KAJ8C;AAK1DX,MAAAA,IAL0D;AAM1DT,MAAAA,KAN0D;AAO1DC,MAAAA;AAP0D,KAAvB,CAArC;AAWA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKb,MAAL,GAAcA,MAAd;AACA,SAAKc,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKR,WAAL,GAAmBA,WAAnB;;AAEA,QAAIwB,MAAM,CAACC,QAAP,CAAgB,KAAKzB,WAArB,CAAJ,EAAuC;AACrC,WAAKT,EAAL,CAAQmC,aAAR,CAAsB,QAAc,KAAK1B,WAAzC;AACA,WAAKT,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,KAAKD,MAAtC;AACD;;AAED,QAAIW,OAAO,IAAI,KAAKmB,OAAL,EAAf,EAA+B;AAC7B/C,MAAAA,GAAG,CAACgD,IAAJ,oBAAqB,IAArB;AACApB,MAAAA,OAAO,GAAG,KAAV;;AAEA,WAAKqB,cAAL,CAAoBV,UAApB;AACD;;AAED,SAAKX,OAAL,GAAeA,OAAf;AAEA,SAAKsB,YAAL,CAAkB;AAChBnB,MAAAA,IADgB;AAEhBT,MAAAA,KAFgB;AAGhBC,MAAAA,MAHgB;AAIhBC,MAAAA,KAJgB;AAKhBb,MAAAA,MALgB;AAMhBc,MAAAA,IANgB;AAOhBC,MAAAA,UAPgB;AAQhBC,MAAAA,MARgB;AAShBC,MAAAA,OATgB;AAUhBW,MAAAA,UAAU,EAAEC;AAVI,KAAlB;;AAaA,QAAIZ,OAAJ,EAAa;AACX,WAAKuB,cAAL;AACD;;AAGD,SAAKC,aAAL,CAAmBb,UAAnB;;AAGA,QAAID,QAAJ,EAAc;AACZ,WAAKP,IAAL,GAAYA,IAAZ;AACD;;AAED,WAAO,IAAP;AACD;;AAIDsB,EAAAA,MAAM,CAAC;AAAC9B,IAAAA,MAAD;AAASD,IAAAA,KAAT;AAAgBM,IAAAA,OAAO,GAAG;AAA1B,GAAD,EAAmC;AACvC,QAAIN,KAAK,KAAK,KAAKA,KAAf,IAAwBC,MAAM,KAAK,KAAKA,MAA5C,EAAoD;AAClD,aAAO,KAAKO,UAAL,CAAgB;AACrBR,QAAAA,KADqB;AAErBC,QAAAA,MAFqB;AAGrBZ,QAAAA,MAAM,EAAE,KAAKA,MAHQ;AAIrBc,QAAAA,IAAI,EAAE,KAAKA,IAJU;AAKrBC,QAAAA,UAAU,EAAE,KAAKA,UALI;AAMrBC,QAAAA,MAAM,EAAE,KAAKA,MANQ;AAOrBC,QAAAA;AAPqB,OAAhB,CAAP;AASD;;AACD,WAAO,IAAP;AACD;;AAGDuB,EAAAA,cAAc,CAACG,MAAM,GAAG,EAAV,EAAc;AAC1B,QAAI,KAAKP,OAAL,EAAJ,EAAoB;AAClB/C,MAAAA,GAAG,CAACgD,IAAJ,oBAAqB,IAArB;AACA,aAAO,IAAP;AACD;;AAED,SAAKpB,OAAL,GAAe,IAAf;AAEA,SAAKlB,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,KAAKD,MAAtC;AACAlB,IAAAA,cAAc,CAAC,KAAKW,EAAN,EAAU4C,MAAV,EAAkB,MAAM;AACpC,WAAK5C,EAAL,CAAQyC,cAAR,CAAuB,KAAKjC,MAA5B;AACD,KAFa,CAAd;AAGA,SAAKR,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,IAAjC;AACA,WAAO,IAAP;AACD;;AAwBDgC,EAAAA,YAAY,CAACK,OAAD,EAAU;AACpB,SAAKC,uBAAL,CAA6B,SAA7B;;AAEA,UAAM;AACJtC,MAAAA,MAAM,GAAG,KAAKA,MADV;AAEJmB,MAAAA,MAAM,GAAG,IAFL;AAGJoB,MAAAA,KAAK,GAAG,CAHJ;AAIJ9C,MAAAA,MAAM,GAAG,KAAKA,MAJV;AAKJgB,MAAAA,MAAM,GAAG,KAAKA,MALV;AAMJ+B,MAAAA,MAAM,GAAG,CANL;AAOJnB,MAAAA,UAAU,GAAG;AAPT,QAQFgB,OARJ;AAUA,QAAI;AACFxB,MAAAA,IAAI,GAAG,IADL;AAEFN,MAAAA,IAAI,GAAG,KAAKA,IAFV;AAGFH,MAAAA,KAAK,GAAG,KAAKA,KAHX;AAIFC,MAAAA,MAAM,GAAG,KAAKA,MAJZ;AAKFG,MAAAA,UAAU,GAAG,KAAKA,UALhB;AAMFgB,MAAAA,UAAU,GAAG;AANX,QAOAa,OAPJ;;AAUA,QAAI,CAACxB,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGM,MAAP;AACD;;AAED,KAAC;AAACZ,MAAAA,IAAD;AAAOC,MAAAA,UAAP;AAAmBgB,MAAAA,UAAnB;AAA+BpB,MAAAA,KAA/B;AAAsCC,MAAAA;AAAtC,QAAgD,KAAKkB,iBAAL,CAAuB;AACtE9B,MAAAA,MADsE;AAEtEc,MAAAA,IAFsE;AAGtEC,MAAAA,UAHsE;AAItEgB,MAAAA,UAJsE;AAKtEX,MAAAA,IALsE;AAMtET,MAAAA,KANsE;AAOtEC,MAAAA;AAPsE,KAAvB,CAAjD;AAUA,UAAM;AAACb,MAAAA;AAAD,QAAO,IAAb;AACAA,IAAAA,EAAE,CAACoC,WAAH,CAAe,KAAK5B,MAApB,EAA4B,KAAKD,MAAjC;AAEA,QAAI0C,QAAQ,GAAG,IAAf;AACA,KAAC;AAAC5B,MAAAA,IAAD;AAAO4B,MAAAA;AAAP,QAAmB,KAAKC,YAAL,CAAkB;AAAC7B,MAAAA,IAAD;AAAOW,MAAAA;AAAP,KAAlB,CAApB;AAEA3C,IAAAA,cAAc,CAAC,KAAKW,EAAN,EAAU6B,UAAV,EAAsB,MAAM;AACxC,cAAQoB,QAAR;AACE,aAAK,MAAL;AACEjD,UAAAA,EAAE,CAACmD,UAAH,CAAc3C,MAAd,EAAsBuC,KAAtB,EAA6B9C,MAA7B,EAAqCW,KAArC,EAA4CC,MAA5C,EAAoDI,MAApD,EAA4DD,UAA5D,EAAwED,IAAxE,EAA8EM,IAA9E;AACA;;AACF,aAAK,aAAL;AAGErB,UAAAA,EAAE,CAACmD,UAAH,CACE3C,MADF,EAEEuC,KAFF,EAGE9C,MAHF,EAIEW,KAJF,EAKEC,MALF,EAMEI,MANF,EAOED,UAPF,EAQED,IARF,EASEM,IATF,EAUE2B,MAVF;AAYA;;AACF,aAAK,QAAL;AAEExD,UAAAA,mBAAmB,CAACQ,EAAD,CAAnB;AACAA,UAAAA,EAAE,CAACoD,UAAH,QAAsC/B,IAAI,CAACd,MAAL,IAAec,IAArD;AACArB,UAAAA,EAAE,CAACmD,UAAH,CAAc3C,MAAd,EAAsBuC,KAAtB,EAA6B9C,MAA7B,EAAqCW,KAArC,EAA4CC,MAA5C,EAAoDI,MAApD,EAA4DD,UAA5D,EAAwED,IAAxE,EAA8EiC,MAA9E;AACAhD,UAAAA,EAAE,CAACoD,UAAH,QAAsC,IAAtC;AACA;;AACF,aAAK,gBAAL;AACE,cAAIhE,QAAQ,CAACY,EAAD,CAAZ,EAAkB;AAChBA,YAAAA,EAAE,CAACmD,UAAH,CAAc3C,MAAd,EAAsBuC,KAAtB,EAA6B9C,MAA7B,EAAqCW,KAArC,EAA4CC,MAA5C,EAAoDI,MAApD,EAA4DD,UAA5D,EAAwED,IAAxE,EAA8EM,IAA9E;AACD,WAFD,MAEO;AACLrB,YAAAA,EAAE,CAACmD,UAAH,CAAc3C,MAAd,EAAsBuC,KAAtB,EAA6B9C,MAA7B,EAAqCe,UAArC,EAAiDD,IAAjD,EAAuDM,IAAvD;AACD;;AACD;;AACF,aAAK,YAAL;AACErB,UAAAA,EAAE,CAACqD,oBAAH,CAAwB7C,MAAxB,EAAgCuC,KAAhC,EAAuC9C,MAAvC,EAA+CW,KAA/C,EAAsDC,MAAtD,EAA8DI,MAA9D,EAAsEI,IAAtE;AACA;;AACF;AACE1B,UAAAA,MAAM,CAAC,KAAD,EAAQ,yBAAR,CAAN;AAtCJ;AAwCD,KAzCa,CAAd;;AA2CA,QAAI0B,IAAI,IAAIA,IAAI,CAACiC,UAAjB,EAA6B;AAC3B,WAAKC,qBAAL,CAA2BlC,IAAI,CAACiC,UAAhC,EAA4C,SAA5C;AACD,KAFD,MAEO;AAEL,YAAME,QAAQ,GAAGxE,oBAAoB,CAAC,KAAKgC,UAAN,CAApB,IAAyC,CAA1D;AACA,YAAMyC,WAAW,GAAGxE,UAAU,CAAC,KAAK8B,IAAN,CAAV,IAAyB,CAA7C;;AAEA,WAAKwC,qBAAL,CAA2B,KAAK3C,KAAL,GAAa,KAAKC,MAAlB,GAA2B2C,QAA3B,GAAsCC,WAAjE,EAA8E,SAA9E;AACD;;AAED,SAAK9C,MAAL,GAAc,IAAd;AAEA,WAAO,IAAP;AACD;;AA+BD+C,EAAAA,eAAe,CAAC;AACdlD,IAAAA,MAAM,GAAG,KAAKA,MADA;AAEdmB,IAAAA,MAAM,GAAG,IAFK;AAGdN,IAAAA,IAAI,GAAG,IAHO;AAIdsC,IAAAA,CAAC,GAAG,CAJU;AAKdC,IAAAA,CAAC,GAAG,CALU;AAMdhD,IAAAA,KAAK,GAAG,KAAKA,KANC;AAOdC,IAAAA,MAAM,GAAG,KAAKA,MAPA;AAQdkC,IAAAA,KAAK,GAAG,CARM;AASd9C,IAAAA,MAAM,GAAG,KAAKA,MATA;AAUdc,IAAAA,IAAI,GAAG,KAAKA,IAVE;AAWdC,IAAAA,UAAU,GAAG,KAAKA,UAXJ;AAYdgB,IAAAA,UAAU,GAAG,KAZC;AAadgB,IAAAA,MAAM,GAAG,CAbK;AAcd/B,IAAAA,MAAM,GAAG,KAAKA,MAdA;AAedY,IAAAA,UAAU,GAAG;AAfC,GAAD,EAgBZ;AACD,KAAC;AAACd,MAAAA,IAAD;AAAOC,MAAAA,UAAP;AAAmBgB,MAAAA,UAAnB;AAA+BpB,MAAAA,KAA/B;AAAsCC,MAAAA;AAAtC,QAAgD,KAAKkB,iBAAL,CAAuB;AACtE9B,MAAAA,MADsE;AAEtEc,MAAAA,IAFsE;AAGtEC,MAAAA,UAHsE;AAItEgB,MAAAA,UAJsE;AAKtEX,MAAAA,IALsE;AAMtET,MAAAA,KANsE;AAOtEC,MAAAA;AAPsE,KAAvB,CAAjD;AAUAlB,IAAAA,MAAM,CAAC,KAAKmB,KAAL,KAAe,CAAhB,EAAmB,2CAAnB,CAAN;;AAGA,QAAI,CAACO,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGM,MAAP;AACD;;AAGD,QAAIN,IAAI,IAAIA,IAAI,CAACA,IAAjB,EAAuB;AACrB,YAAMwC,OAAO,GAAGxC,IAAhB;AACAA,MAAAA,IAAI,GAAGwC,OAAO,CAACxC,IAAf;AACAT,MAAAA,KAAK,GAAGiD,OAAO,CAACC,KAAR,CAAc,CAAd,CAAR;AACAjD,MAAAA,MAAM,GAAGgD,OAAO,CAACC,KAAR,CAAc,CAAd,CAAT;AACD;;AAGD,QAAIzC,IAAI,YAAYvC,MAApB,EAA4B;AAC1BuC,MAAAA,IAAI,GAAGA,IAAI,CAACd,MAAZ;AACD;;AAED,SAAKP,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,KAAKD,MAAtC;AAEAlB,IAAAA,cAAc,CAAC,KAAKW,EAAN,EAAU6B,UAAV,EAAsB,MAAM;AAExC,UAAIG,UAAJ,EAAgB;AACd,aAAKhC,EAAL,CAAQ+D,uBAAR,CAAgCvD,MAAhC,EAAwCuC,KAAxC,EAA+CY,CAA/C,EAAkDC,CAAlD,EAAqDhD,KAArD,EAA4DC,MAA5D,EAAoEZ,MAApE,EAA4EoB,IAA5E;AACD,OAFD,MAEO,IAAIA,IAAI,KAAK,IAAb,EAAmB;AACxB,aAAKrB,EAAL,CAAQgE,aAAR,CAAsBxD,MAAtB,EAA8BuC,KAA9B,EAAqCY,CAArC,EAAwCC,CAAxC,EAA2ChD,KAA3C,EAAkDC,MAAlD,EAA0DG,UAA1D,EAAsED,IAAtE,EAA4E,IAA5E;AACD,OAFM,MAEA,IAAIkD,WAAW,CAACC,MAAZ,CAAmB7C,IAAnB,CAAJ,EAA8B;AACnC,aAAKrB,EAAL,CAAQgE,aAAR,CAAsBxD,MAAtB,EAA8BuC,KAA9B,EAAqCY,CAArC,EAAwCC,CAAxC,EAA2ChD,KAA3C,EAAkDC,MAAlD,EAA0DG,UAA1D,EAAsED,IAAtE,EAA4EM,IAA5E,EAAkF2B,MAAlF;AACD,OAFM,MAEA,IAAI3B,IAAI,YAAYxB,WAApB,EAAiC;AAEtCL,QAAAA,mBAAmB,CAAC,KAAKQ,EAAN,CAAnB;AAEA,aAAKA,EAAL,CAAQoD,UAAR,QAA2C/B,IAA3C;AACA,aAAKrB,EAAL,CAAQgE,aAAR,CAAsBxD,MAAtB,EAA8BuC,KAA9B,EAAqCY,CAArC,EAAwCC,CAAxC,EAA2ChD,KAA3C,EAAkDC,MAAlD,EAA0DG,UAA1D,EAAsED,IAAtE,EAA4EiC,MAA5E;AACA,aAAKhD,EAAL,CAAQoD,UAAR,QAA2C,IAA3C;AACD,OAPM,MAOA,IAAIhE,QAAQ,CAAC,KAAKY,EAAN,CAAZ,EAAuB;AAE5B,aAAKA,EAAL,CAAQgE,aAAR,CAAsBxD,MAAtB,EAA8BuC,KAA9B,EAAqCY,CAArC,EAAwCC,CAAxC,EAA2ChD,KAA3C,EAAkDC,MAAlD,EAA0DG,UAA1D,EAAsED,IAAtE,EAA4EM,IAA5E;AACD,OAHM,MAGA;AACL,aAAKrB,EAAL,CAAQgE,aAAR,CAAsBxD,MAAtB,EAA8BuC,KAA9B,EAAqCY,CAArC,EAAwCC,CAAxC,EAA2C5C,UAA3C,EAAuDD,IAAvD,EAA6DM,IAA7D;AACD;AACF,KArBa,CAAd;AAuBA,SAAKrB,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,IAAjC;AACD;;AAWD2D,EAAAA,eAAe,CAACC,IAAI,GAAG,EAAR,EAAY;AACzB9E,IAAAA,GAAG,CAAC+E,KAAJ,CACE,iGADF;AAGA,WAAO,IAAP;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKtE,EAAL,CAAQuE,YAAR,eAAP;AACD;;AAaDC,EAAAA,IAAI,CAAC/D,WAAW,GAAG,KAAKA,WAApB,EAAiC;AACnC,UAAM;AAACT,MAAAA;AAAD,QAAO,IAAb;;AAEA,QAAIS,WAAW,KAAKC,SAApB,EAA+B;AAC7B,WAAKD,WAAL,GAAmBA,WAAnB;AACAT,MAAAA,EAAE,CAACmC,aAAH,CAAiB,QAAc1B,WAA/B;AACD;;AAEDT,IAAAA,EAAE,CAACoC,WAAH,CAAe,KAAK5B,MAApB,EAA4B,KAAKD,MAAjC;AACA,WAAOE,WAAP;AACD;;AAEDgE,EAAAA,MAAM,CAAChE,WAAW,GAAG,KAAKA,WAApB,EAAiC;AACrC,UAAM;AAACT,MAAAA;AAAD,QAAO,IAAb;;AAEA,QAAIS,WAAW,KAAKC,SAApB,EAA+B;AAC7B,WAAKD,WAAL,GAAmBA,WAAnB;AACAT,MAAAA,EAAE,CAACmC,aAAH,CAAiB,QAAc1B,WAA/B;AACD;;AAEDT,IAAAA,EAAE,CAACoC,WAAH,CAAe,KAAK5B,MAApB,EAA4B,IAA5B;AACA,WAAOC,WAAP;AACD;;AAIDyC,EAAAA,YAAY,CAAC;AAAC7B,IAAAA,IAAD;AAAOW,IAAAA,UAAU,GAAG;AAApB,GAAD,EAA6B;AACvC,QAAIA,UAAJ,EAAgB;AACd,aAAO;AAACX,QAAAA,IAAD;AAAO4B,QAAAA,QAAQ,EAAE;AAAjB,OAAP;AACD;;AACD,QAAI5B,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAO;AAACA,QAAAA,IAAD;AAAO4B,QAAAA,QAAQ,EAAE;AAAjB,OAAP;AACD;;AACD,QAAIgB,WAAW,CAACC,MAAZ,CAAmB7C,IAAnB,CAAJ,EAA8B;AAC5B,aAAO;AAACA,QAAAA,IAAD;AAAO4B,QAAAA,QAAQ,EAAE;AAAjB,OAAP;AACD;;AACD,QAAI5B,IAAI,YAAYvC,MAApB,EAA4B;AAC1B,aAAO;AAACuC,QAAAA,IAAI,EAAEA,IAAI,CAACd,MAAZ;AAAoB0C,QAAAA,QAAQ,EAAE;AAA9B,OAAP;AACD;;AACD,QAAI5B,IAAI,YAAYxB,WAApB,EAAiC;AAC/B,aAAO;AAACwB,QAAAA,IAAD;AAAO4B,QAAAA,QAAQ,EAAE;AAAjB,OAAP;AACD;;AAED,WAAO;AAAC5B,MAAAA,IAAD;AAAO4B,MAAAA,QAAQ,EAAE;AAAjB,KAAP;AACD;;AA+EDlB,EAAAA,iBAAiB,CAACqC,IAAD,EAAO;AACtB,UAAM;AAACnE,MAAAA,MAAD;AAASoB,MAAAA;AAAT,QAAiB+C,IAAvB;AACA,QAAI;AAACxD,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBG,MAAAA,UAAhB;AAA4BD,MAAAA,IAA5B;AAAkCiB,MAAAA;AAAlC,QAAgDoC,IAApD;AAGA,UAAMM,aAAa,GAAG3F,eAAe,CAACkB,MAAD,CAArC;AACAe,IAAAA,UAAU,GAAGA,UAAU,IAAK0D,aAAa,IAAIA,aAAa,CAAC1D,UAA3D;AACAD,IAAAA,IAAI,GAAGA,IAAI,IAAK2D,aAAa,IAAIA,aAAa,CAACC,KAAd,CAAoB,CAApB,CAAjC;AAGA3C,IAAAA,UAAU,GAAGA,UAAU,IAAK0C,aAAa,IAAIA,aAAa,CAAC1C,UAA3D;AAEA,KAAC;AAACpB,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkB,KAAK+D,gBAAL,CAAsBvD,IAAtB,EAA4BT,KAA5B,EAAmCC,MAAnC,CAAnB;AAEA,WAAO;AAACG,MAAAA,UAAD;AAAaD,MAAAA,IAAb;AAAmBiB,MAAAA,UAAnB;AAA+BpB,MAAAA,KAA/B;AAAsCC,MAAAA,MAAtC;AAA8CZ,MAAAA,MAA9C;AAAsDoB,MAAAA;AAAtD,KAAP;AACD;;AAIDuD,EAAAA,gBAAgB,CAACvD,IAAD,EAAOT,KAAP,EAAcC,MAAd,EAAsB;AACpC,QAAIgE,IAAJ;;AAEA,QAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCzD,IAAI,YAAYyD,SAAxD,EAAmE;AACjED,MAAAA,IAAI,GAAG;AAACjE,QAAAA,KAAK,EAAES,IAAI,CAACT,KAAb;AAAoBC,QAAAA,MAAM,EAAEQ,IAAI,CAACR;AAAjC,OAAP;AACD,KAFD,MAEO,IAAI,OAAOkE,gBAAP,KAA4B,WAA5B,IAA2C1D,IAAI,YAAY0D,gBAA/D,EAAiF;AACtFF,MAAAA,IAAI,GAAG;AAACjE,QAAAA,KAAK,EAAES,IAAI,CAAC2D,YAAb;AAA2BnE,QAAAA,MAAM,EAAEQ,IAAI,CAAC4D;AAAxC,OAAP;AACD,KAFM,MAEA,IAAI,OAAOC,iBAAP,KAA6B,WAA7B,IAA4C7D,IAAI,YAAY6D,iBAAhE,EAAmF;AACxFL,MAAAA,IAAI,GAAG;AAACjE,QAAAA,KAAK,EAAES,IAAI,CAACT,KAAb;AAAoBC,QAAAA,MAAM,EAAEQ,IAAI,CAACR;AAAjC,OAAP;AACD,KAFM,MAEA,IAAI,OAAOsE,WAAP,KAAuB,WAAvB,IAAsC9D,IAAI,YAAY8D,WAA1D,EAAuE;AAC5EN,MAAAA,IAAI,GAAG;AAACjE,QAAAA,KAAK,EAAES,IAAI,CAACT,KAAb;AAAoBC,QAAAA,MAAM,EAAEQ,IAAI,CAACR;AAAjC,OAAP;AACD,KAFM,MAEA,IAAI,OAAOuE,gBAAP,KAA4B,WAA5B,IAA2C/D,IAAI,YAAY+D,gBAA/D,EAAiF;AACtFP,MAAAA,IAAI,GAAG;AAACjE,QAAAA,KAAK,EAAES,IAAI,CAACgE,UAAb;AAAyBxE,QAAAA,MAAM,EAAEQ,IAAI,CAACiE;AAAtC,OAAP;AACD,KAFM,MAEA,IAAI,CAACjE,IAAL,EAAW;AAChBwD,MAAAA,IAAI,GAAG;AAACjE,QAAAA,KAAK,EAAEA,KAAK,IAAI,CAAT,GAAaA,KAAb,GAAqB,CAA7B;AAAgCC,QAAAA,MAAM,EAAEA,MAAM,IAAI,CAAV,GAAcA,MAAd,GAAuB;AAA/D,OAAP;AACD,KAFM,MAEA;AACLgE,MAAAA,IAAI,GAAG;AAACjE,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAP;AACD;;AAEDlB,IAAAA,MAAM,CAACkF,IAAD,EAAO,gCAAP,CAAN;AACAlF,IAAAA,MAAM,CACJiB,KAAK,KAAKF,SAAV,IAAuBmE,IAAI,CAACjE,KAAL,KAAeA,KADlC,EAEJ,qDAFI,CAAN;AAIAjB,IAAAA,MAAM,CACJkB,MAAM,KAAKH,SAAX,IAAwBmE,IAAI,CAAChE,MAAL,KAAgBA,MADpC,EAEJ,uDAFI,CAAN;AAKA,WAAOgE,IAAP;AACD;;AAIDU,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKvF,EAAL,CAAQwF,aAAR,EAAP;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,SAAKzF,EAAL,CAAQ0F,aAAR,CAAsB,KAAKnF,MAA3B;;AACA,SAAKuC,uBAAL,CAA6B,SAA7B;AACD;;AAED6C,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,YAAQA,KAAR;AACE;AACE,eAAO,KAAKhF,KAAZ;;AACF;AACE,eAAO,KAAKC,MAAZ;;AACF;AACE,aAAKb,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,KAAKD,MAAtC;AACA,cAAMsF,KAAK,GAAG,KAAK7F,EAAL,CAAQ8F,eAAR,CAAwB,KAAKtF,MAA7B,EAAqCoF,KAArC,CAAd;AACA,aAAK5F,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,IAAjC;AACA,eAAOqF,KAAP;AATJ;AAWD;;AAEDE,EAAAA,aAAa,CAACH,KAAD,EAAQI,KAAR,EAAe;AAC1B,SAAKhG,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,KAAKD,MAAtC;AAGAyF,IAAAA,KAAK,GAAG,KAAKC,aAAL,CAAmBL,KAAnB,EAA0BI,KAA1B,CAAR;;AAKA,YAAQJ,KAAR;AACE;AACA;AACE,aAAK5F,EAAL,CAAQkG,aAAR,CAAsB,KAAK3F,MAA3B,EAAmCqF,KAAnC,EAA0CI,KAA1C;AACA;;AAEF;AACA;AACErG,QAAAA,MAAM,CAAC,KAAD,CAAN;AACA;;AAEF;AACE,aAAKK,EAAL,CAAQmG,aAAR,CAAsB,KAAK3F,MAA3B,EAAmCoF,KAAnC,EAA0CI,KAA1C;AACA;AAbJ;;AAgBA,SAAKhG,EAAL,CAAQoC,WAAR,CAAoB,KAAK5B,MAAzB,EAAiC,IAAjC;AACA,WAAO,IAAP;AACD;;AAED6B,EAAAA,OAAO,GAAG;AACR,QAAIjD,QAAQ,CAAC,KAAKY,EAAN,CAAZ,EAAuB;AAErB,aAAO,KAAP;AACD;;AAED,QAAI,CAAC,KAAKY,KAAN,IAAe,CAAC,KAAKC,MAAzB,EAAiC;AAC/B,aAAO,KAAP;AACD;;AACD,WAAO,CAACnB,YAAY,CAAC,KAAKkB,KAAN,CAAb,IAA6B,CAAClB,YAAY,CAAC,KAAKmB,MAAN,CAAjD;AACD;;AAGD0B,EAAAA,cAAc,CAACV,UAAD,EAAa;AACzB,QAAIA,UAAU,CAAC,KAAK7B,EAAL,CAAQoG,kBAAT,CAAV,KAA2C1F,SAA/C,EAA0D;AAExDmB,MAAAA,UAAU,CAAC,KAAK7B,EAAL,CAAQoG,kBAAT,CAAV,GAAyC,KAAKpG,EAAL,CAAQqG,MAAjD;AACD;;AACD,QAAIxE,UAAU,CAAC,KAAK7B,EAAL,CAAQsG,cAAT,CAAV,KAAuC5F,SAA3C,EAAsD;AAEpDmB,MAAAA,UAAU,CAAC,KAAK7B,EAAL,CAAQsG,cAAT,CAAV,GAAqC,KAAKtG,EAAL,CAAQuG,aAA7C;AACD;;AACD,QAAI1E,UAAU,CAAC,KAAK7B,EAAL,CAAQwG,cAAT,CAAV,KAAuC9F,SAA3C,EAAsD;AAEpDmB,MAAAA,UAAU,CAAC,KAAK7B,EAAL,CAAQwG,cAAT,CAAV,GAAqC,KAAKxG,EAAL,CAAQuG,aAA7C;AACD;AACF;;AAEDN,EAAAA,aAAa,CAACL,KAAD,EAAQI,KAAR,EAAe;AAC1B,QAAI,KAAK3D,OAAL,EAAJ,EAAoB;AAClB,cAAQuD,KAAR;AACE;AACE,cAAIhG,gBAAgB,CAAC6G,OAAjB,CAAyBT,KAAzB,MAAoC,CAAC,CAAzC,EAA4C;AAE1CA,YAAAA,KAAK,OAAL;AACD;;AACD;;AACF;AACA;AACE,cAAIA,KAAK,UAAT,EAAgC;AAE9BA,YAAAA,KAAK,QAAL;AACD;;AACD;;AACF;AACE;AAfJ;AAiBD;;AACD,WAAOA,KAAP;AACD;;AAptB2C","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\n\nimport {isWebGL2, withParameters, log} from '@luma.gl/gltools';\nimport {global} from 'probe.gl/env';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {uid, isPowerOfTwo, assert} from '../utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = global.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    let {mipmaps = true} = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed: false,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n\n    return this;\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          assertWebGL2Context(gl);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          gl.compressedTexImage2D(target, level, format, width, height, border, data);\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, ImageBitmap */\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}