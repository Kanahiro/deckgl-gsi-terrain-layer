{"version":3,"sources":["../../../src/classes/texture.js"],"names":["NPOT_MIN_FILTERS","WebGLBuffer","global","Texture","gl","format","linearFiltering","supported","props","id","handle","target","textureUnit","undefined","loaded","width","height","depth","type","dataFormat","border","mipmaps","data","Promise","then","resolvedImageData","initialize","Object","assign","pixels","recreate","parameters","pixelStore","_deduceParameters","compressed","Number","isFinite","activeTexture","bindTexture","_isNPOT","log","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","params","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","texImage2D","bindBuffer","compressedTexImage2D","byteLength","_trackAllocatedMemory","channels","DATA_FORMAT_CHANNELS","channelSize","TYPE_SIZES","x","y","ndarray","shape","Buffer","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","opts","error","getParameter","textureFormat","TEXTURE_FORMATS","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","HTMLVideoElement","videoWidth","videoHeight","createTexture","deleteTexture","pname","value","getTexParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf","Resource"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\n\nimport {isWebGL2, withParameters, log} from '@luma.gl/gltools';\nimport {global} from 'probe.gl/env';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {uid, isPowerOfTwo, assert} from '../utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = global.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    let {mipmaps = true} = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed: false,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n\n    return this;\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          assertWebGL2Context(gl);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          gl.compressedTexImage2D(target, level, format, width, height, border, data);\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, ImageBitmap */\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}