{"version":3,"sources":["../../../src/classes/uniform-buffer-layout.js"],"names":["ERR_ARGUMENT","GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","layout","size","key","_addUniform","data","Float32Array","typedArray","Int32Array","buffer","Uint32Array","index","offset","undefined","begin","offsets","end","sizes","subarray","values","_setValue","value","type","set","uniformType","typeAndComponents","count","components","_alignTo"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n"],"file":"uniform-buffer-layout.js"}