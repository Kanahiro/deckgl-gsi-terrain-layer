{"version":3,"sources":["../../../src/classes/program.js"],"names":["LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","gl","props","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","hash","vs","fs","varyings","bufferMode","VertexShader","source","FragmentShader","uniforms","_textureUniforms","_texturesRenderable","length","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","ProgramConfiguration","setProps","options","setUniforms","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","instanceCount","isInstanced","vertexArray","transformFeedback","framebuffer","parameters","samplers","log","deprecated","priority","fb","message","useProgram","_areTexturesRenderable","bindForDraw","undefined","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_uniformSetters","uniformName","uniform","uniformSetter","value","textureUpdate","Framebuffer","texture","Texture","textureIndex","_textureIndexCounter","bind","loaded","createProgram","deleteProgram","shaderHandles","getAttachedShaders","opts","shaderHandle","type","getShaderParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","level","linked","Error","getProgramInfoLog","validateProgram","validated","_uniformCount","_getParameter","i","info","getActiveUniform","name","isArray","location","getUniformLocation","size","l","uniformIndices","getActiveUniforms","blockName","getUniformBlockIndex","blockIndex","getActiveUniformBlockParameter","blockBinding","uniformBlockBinding","Resource"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {copyUniform, checkUniformValues} from './uniforms';\n\nimport {isWebGL2, withParameters, log} from '@luma.gl/gltools';\nimport {assertWebGL2Context, getKey} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {uid, assert} from '../utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n\n    this.hash = hash || ''; // Used by ProgramManager\n\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    this._textureUniforms = {};\n    this._texturesRenderable = true;\n\n    // Setup varyings if supplied\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    instanceCount = 0,\n    isInstanced = instanceCount > 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (log.priority >= logPriority) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    if (\n      // Note: async textures set as uniforms might still be loading.\n      // Now that all uniforms have been updated, check if any texture\n      // in the uniforms is not yet initialized, then we don't draw\n      !this._areTexturesRenderable() ||\n      // Avoid WebGL draw call when not rendering any data\n      vertexCount === 0 ||\n      (isInstanced && instanceCount === 0)\n    ) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}) {\n    if (log.priority >= 2) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof Framebuffer) {\n          value = value.texture;\n        }\n        if (value instanceof Texture) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            // eslint-disable-next-line max-depth\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            // Bind texture to index\n            const texture = value;\n            const {textureIndex} = uniformSetter;\n\n            texture.bind(textureIndex);\n            value = textureIndex;\n\n            if (!texture.loaded) {\n              this._texturesRenderable = false;\n            }\n\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        // NOTE(Tarek): uniformSetter returns whether\n        //   value had to be updated or not.\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    if (this._texturesRenderable) {\n      return true;\n    }\n\n    this._texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      this._texturesRenderable = this._texturesRenderable && texture.loaded;\n    }\n\n    return this._texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.level > 0) {\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n\n      gl.validateProgram(this.handle);\n      const validated = gl.getProgramParameter(this.handle, gl.VALIDATE_STATUS);\n      if (!validated) {\n        throw new Error(`Error validating: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info, isArray);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}