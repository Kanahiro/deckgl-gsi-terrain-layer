{"version":3,"sources":["../../../src/classes/clear.js"],"names":["GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","clear","gl","framebuffer","color","depth","stencil","parameters","clearFlags","clearColor","clearDepth","clearStencil","clearBuffer","buffer","drawBuffer","value","constructor","Int32Array","clearBufferiv","Uint32Array","clearBufferuiv","Float32Array","clearBufferfv","clearBufferfi"],"mappings":"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","sourcesContent":["import {withParameters} from '@luma.gl/gltools';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {assert} from '../utils';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"],"file":"clear.js"}