{"version":3,"sources":["../../../src/classes/buffer.js"],"names":["DEBUG_DATA_LENGTH","DEPRECATED_PROPS","offset","stride","type","size","divisor","normalized","integer","instanced","isInstanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","bytes","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","gl","props","stubRemovedMethods","target","webgl2","initialize","Object","seal","accessor","Math","round","byteLength","Accessor","getBytesPerElement","getBytesPerVertex","ArrayBuffer","isView","data","Number","isFinite","usage","debugData","setAccessor","assign","_setData","_setByteLength","buffer","bytesUsed","srcOffset","length","bindBuffer","handle","undefined","bufferSubData","_inferType","sourceBuffer","readOffset","writeOffset","copyBufferSubData","dstData","srcByteOffset","dstOffset","ArrayType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","dstAvailableElementCount","dstElementCount","min","copyElementCount","getBufferSubData","index","bindBufferRange","bindBufferBase","isIndexedBuffer","getData","changed","_trackDeallocatedMemory","_getTarget","bufferData","slice","_trackAllocatedMemory","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","getElementCount","createBuffer","deleteBuffer","pname","value","getBufferParameter","log","deprecated","reallocate","opts","Resource"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {\n  assertWebGL2Context,\n  getGLTypeFromTypedArray,\n  getTypedArrayFromGLType\n} from '../webgl-utils';\nimport {log} from '@luma.gl/gltools';\nimport {assert, checkProps} from '../utils';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data, props.offset, props.byteLength);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, offset = 0, byteLength = data.byteLength + offset) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, byteLength, this.usage);\n    this.gl.bufferSubData(target, offset, data);\n    this.gl.bindBuffer(target, null);\n\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n"],"file":"buffer.js"}