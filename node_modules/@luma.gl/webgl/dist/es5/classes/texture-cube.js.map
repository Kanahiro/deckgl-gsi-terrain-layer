{"version":3,"sources":["../../../src/classes/texture-cube.js"],"names":["FACES","TextureCube","gl","props","Object","assign","target","initialize","seal","mipmaps","parameters","opts","setCubeMapImageData","then","loaded","generateMipmap","setParameters","face","data","x","y","mipmapLevel","_subImage","width","height","pixels","border","format","type","imageDataMap","Promise","all","map","facePixels","Array","isArray","resolvedFaces","bind","forEach","index","length","log","warn","id","image","lodLevel","texImage2D","unbind","options","imageData","resolvedImageData","setImageDataForFace","Texture"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    const {mipmaps = true, parameters = {}} = props;\n\n    // Store props for accessors\n    this.opts = props;\n\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"],"file":"texture-cube.js"}