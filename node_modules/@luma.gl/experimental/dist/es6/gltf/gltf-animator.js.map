{"version":3,"sources":["../../../src/gltf/gltf-animator.js"],"names":["assert","log","Matrix4","Quaternion","ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","accessorToJsArray","accessor","_animation","ArrayType","componentType","components","type","length","count","buffer","byteOffset","bufferView","data","array","Array","from","slicedArray","i","push","slice","helperMatrix","applyTranslationRotationScale","gltfNode","node","matrix","identity","translation","translate","rotation","rotationMatrix","fromQuaternion","multiplyRight","scale","quaternion","linearInterpolate","target","path","start","stop","ratio","slerp","cubicsplineInterpolate","p0","outTangent0","inTangent1","p1","tDiff","t","m0","m1","Math","pow","stepInterpolate","value","interpolate","time","input","interpolation","output","maxTime","animationTime","nextIndex","findIndex","previousIndex","max","isArray","warn","previousTime","nextTime","GLTFAnimation","constructor","props","startTime","playing","speed","Object","assign","animate","timeMs","absTime","channels","forEach","sampler","_node","GLTFAnimator","gltf","animations","map","animation","index","name","samplers","accessors","nodes","setTime","getAnimations"],"mappings":"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","sourcesContent":["import {assert, log} from '@luma.gl/webgl';\nimport {Matrix4, Quaternion} from 'math.gl';\n\n// TODO: import from loaders.gl?\nexport const ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n//\n\nfunction accessorToJsArray(accessor) {\n  if (!accessor._animation) {\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n    const length = components * accessor.count;\n    const {buffer, byteOffset} = accessor.bufferView.data;\n\n    const array = new ArrayType(buffer, byteOffset + (accessor.byteOffset || 0), length);\n\n    if (components === 1) {\n      accessor._animation = Array.from(array);\n    } else {\n      // Slice array\n      const slicedArray = [];\n      for (let i = 0; i < array.length; i += components) {\n        slicedArray.push(Array.from(array.slice(i, i + components)));\n      }\n      accessor._animation = slicedArray;\n    }\n  }\n\n  return accessor._animation;\n}\n\n// TODO: share with GLTFInstantiator\nconst helperMatrix = new Matrix4();\nfunction applyTranslationRotationScale(gltfNode, node) {\n  node.matrix.identity();\n\n  if (gltfNode.translation) {\n    node.matrix.translate(gltfNode.translation);\n  }\n\n  if (gltfNode.rotation) {\n    const rotationMatrix = helperMatrix.fromQuaternion(gltfNode.rotation);\n    node.matrix.multiplyRight(rotationMatrix);\n  }\n\n  if (gltfNode.scale) {\n    node.matrix.scale(gltfNode.scale);\n  }\n}\n\nconst quaternion = new Quaternion();\nfunction linearInterpolate(target, path, start, stop, ratio) {\n  if (path === 'rotation') {\n    // SLERP when path is rotation\n    quaternion.slerp({start, target: stop, ratio});\n    for (let i = 0; i < quaternion.length; i++) {\n      target[path][i] = quaternion[i];\n    }\n  } else {\n    // regular interpolation\n    for (let i = 0; i < start.length; i++) {\n      target[path][i] = ratio * stop[i] + (1 - ratio) * start[i];\n    }\n  }\n}\n\nfunction cubicsplineInterpolate(target, path, {p0, outTangent0, inTangent1, p1, tDiff, ratio: t}) {\n  // TODO: Quaternion might need normalization\n  for (let i = 0; i < target[path].length; i++) {\n    const m0 = outTangent0[i] * tDiff;\n    const m1 = inTangent1[i] * tDiff;\n    target[path][i] =\n      (2 * Math.pow(t, 3) - 3 * Math.pow(t, 2) + 1) * p0[i] +\n      (Math.pow(t, 3) - 2 * Math.pow(t, 2) + t) * m0 +\n      (-2 * Math.pow(t, 3) + 3 * Math.pow(t, 2)) * p1[i] +\n      (Math.pow(t, 3) - Math.pow(t, 2)) * m1;\n  }\n}\n\nfunction stepInterpolate(target, path, value) {\n  for (let i = 0; i < value.length; i++) {\n    target[path][i] = value[i];\n  }\n}\n\nfunction interpolate(time, {input, interpolation, output}, target, path) {\n  const maxTime = input[input.length - 1];\n  const animationTime = time % maxTime;\n\n  const nextIndex = input.findIndex(t => t >= animationTime);\n  const previousIndex = Math.max(0, nextIndex - 1);\n\n  if (!Array.isArray(target[path])) {\n    switch (path) {\n      case 'translation':\n        target[path] = [0, 0, 0];\n        break;\n\n      case 'rotation':\n        target[path] = [0, 0, 0, 1];\n        break;\n\n      case 'scale':\n        target[path] = [1, 1, 1];\n        break;\n\n      default:\n        log.warn(`Bad animation path ${path}`)();\n    }\n  }\n\n  assert(target[path].length === output[previousIndex].length);\n  const previousTime = input[previousIndex];\n  const nextTime = input[nextIndex];\n\n  switch (interpolation) {\n    case 'STEP':\n      stepInterpolate(target, path, output[previousIndex]);\n      break;\n\n    case 'LINEAR':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        linearInterpolate(target, path, output[previousIndex], output[nextIndex], ratio);\n      }\n      break;\n\n    case 'CUBICSPLINE':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        const tDiff = nextTime - previousTime;\n\n        const p0 = output[3 * previousIndex + 1];\n        const outTangent0 = output[3 * previousIndex + 2];\n        const inTangent1 = output[3 * nextIndex + 0];\n        const p1 = output[3 * nextIndex + 1];\n\n        cubicsplineInterpolate(target, path, {p0, outTangent0, inTangent1, p1, tDiff, ratio});\n      }\n      break;\n\n    default:\n      log.warn(`Interpolation ${interpolation} not supported`)();\n      break;\n  }\n}\n\nclass GLTFAnimation {\n  constructor(props) {\n    this.startTime = 0;\n    this.playing = true;\n    this.speed = 1;\n\n    Object.assign(this, props);\n  }\n\n  animate(timeMs) {\n    if (!this.playing) {\n      return;\n    }\n\n    const absTime = timeMs / 1000;\n    const time = (absTime - this.startTime) * this.speed;\n\n    this.channels.forEach(({sampler, target, path}) => {\n      interpolate(time, sampler, target, path);\n      applyTranslationRotationScale(target, target._node);\n    });\n  }\n}\n\nexport default class GLTFAnimator {\n  constructor(gltf) {\n    this.animations = gltf.animations.map((animation, index) => {\n      const name = animation.name || `Animation-${index}`;\n      const samplers = animation.samplers.map(({input, interpolation = 'LINEAR', output}) => ({\n        input: accessorToJsArray(gltf.accessors[input]),\n        interpolation,\n        output: accessorToJsArray(gltf.accessors[output])\n      }));\n      const channels = animation.channels.map(({sampler, target}) => ({\n        sampler: samplers[sampler],\n        target: gltf.nodes[target.node],\n        path: target.path\n      }));\n      return new GLTFAnimation({name, channels});\n    });\n  }\n\n  // TODO(Tarek): This should be removed? (deck.gl is using this)\n  animate(time) {\n    this.setTime(time);\n  }\n\n  setTime(time) {\n    this.animations.forEach(animation => animation.animate(time));\n  }\n\n  getAnimations() {\n    return this.animations;\n  }\n}\n"],"file":"gltf-animator.js"}