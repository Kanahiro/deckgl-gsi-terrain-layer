{"version":3,"sources":["../../../src/gltf/gltf-environment.js"],"names":["Texture2D","TextureCube","loadImage","GLTFEnvironment","constructor","gl","brdfLutUrl","getTexUrl","specularMipLevels","makeCube","id","getTextureForFace","parameters","pixels","FACES","forEach","face","mipmaps","getDiffuseEnvSampler","_DiffuseEnvSampler","dir","getSpecularEnvSampler","_SpecularEnvSampler","imageArray","lod","push","getBrdfTexture","_BrdfTexture","data","delete"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Texture2D, TextureCube} from '@luma.gl/webgl';\nimport {loadImage} from '@loaders.gl/images';\n\nexport default class GLTFEnvironment {\n  constructor(gl, {brdfLutUrl, getTexUrl, specularMipLevels = 10}) {\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n\n  makeCube({id, getTextureForFace, parameters}) {\n    const pixels = {};\n    TextureCube.FACES.forEach(face => {\n      pixels[face] = getTextureForFace(face);\n    });\n    return new TextureCube(this.gl, {\n      id,\n      mipmaps: false,\n      parameters,\n      pixels\n    });\n  }\n\n  getDiffuseEnvSampler() {\n    if (!this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler = this.makeCube({\n        id: 'DiffuseEnvSampler',\n        getTextureForFace: dir => loadImage(this.getTexUrl('diffuse', dir, 0)),\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._DiffuseEnvSampler;\n  }\n\n  getSpecularEnvSampler() {\n    if (!this._SpecularEnvSampler) {\n      this._SpecularEnvSampler = this.makeCube({\n        id: 'SpecularEnvSampler',\n        getTextureForFace: dir => {\n          const imageArray = [];\n          for (let lod = 0; lod <= this.specularMipLevels - 1; lod++) {\n            imageArray.push(loadImage(this.getTexUrl('specular', dir, lod)));\n          }\n          return imageArray;\n        },\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._SpecularEnvSampler;\n  }\n\n  getBrdfTexture() {\n    if (!this._BrdfTexture) {\n      this._BrdfTexture = new Texture2D(this.gl, {\n        id: 'brdfLUT',\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        },\n        // Texture2D accepts a promise that returns an image as data (Async Textures)\n        data: loadImage(this.brdfLutUrl)\n      });\n    }\n\n    return this._BrdfTexture;\n  }\n\n  delete() {\n    if (this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler.delete();\n      this._DiffuseEnvSampler = null;\n    }\n\n    if (this._SpecularEnvSampler) {\n      this._SpecularEnvSampler.delete();\n      this._SpecularEnvSampler = null;\n    }\n\n    if (this._BrdfTexture) {\n      this._BrdfTexture.delete();\n      this._BrdfTexture = null;\n    }\n  }\n}\n"],"file":"gltf-environment.js"}