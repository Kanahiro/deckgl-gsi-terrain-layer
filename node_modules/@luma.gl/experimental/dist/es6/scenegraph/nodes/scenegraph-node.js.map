{"version":3,"sources":["../../../../src/scenegraph/nodes/scenegraph-node.js"],"names":["Vector3","Matrix4","assert","uid","ScenegraphNode","constructor","props","id","name","display","position","rotation","scale","matrix","userData","_setScenegraphNodeProps","delete","setProps","toString","setPosition","length","setRotation","setScale","setMatrix","copyMatrix","copy","setMatrixComponents","update","updateMatrix","pos","rot","identity","translate","rotateXYZ","getCoordinateUniforms","viewMatrix","modelMatrix","worldMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","Object","assign"],"mappings":"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","sourcesContent":["import {Vector3, Matrix4} from 'math.gl';\nimport {assert, uid} from '@luma.gl/webgl';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update({position, rotation, scale} = {}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"],"file":"scenegraph-node.js"}