{"version":3,"sources":["../../../src/gltf/gltf-environment.js"],"names":["Texture2D","TextureCube","loadImage","GLTFEnvironment","gl","brdfLutUrl","getTexUrl","specularMipLevels","id","getTextureForFace","parameters","pixels","FACES","forEach","face","mipmaps","_DiffuseEnvSampler","makeCube","dir","_SpecularEnvSampler","imageArray","lod","push","_BrdfTexture","data"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Texture2D, TextureCube} from '@luma.gl/webgl';\nimport {loadImage} from '@loaders.gl/images';\n\nexport default class GLTFEnvironment {\n  constructor(gl, {brdfLutUrl, getTexUrl, specularMipLevels = 10}) {\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n\n  makeCube({id, getTextureForFace, parameters}) {\n    const pixels = {};\n    TextureCube.FACES.forEach(face => {\n      pixels[face] = getTextureForFace(face);\n    });\n    return new TextureCube(this.gl, {\n      id,\n      mipmaps: false,\n      parameters,\n      pixels\n    });\n  }\n\n  getDiffuseEnvSampler() {\n    if (!this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler = this.makeCube({\n        id: 'DiffuseEnvSampler',\n        getTextureForFace: dir => loadImage(this.getTexUrl('diffuse', dir, 0)),\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._DiffuseEnvSampler;\n  }\n\n  getSpecularEnvSampler() {\n    if (!this._SpecularEnvSampler) {\n      this._SpecularEnvSampler = this.makeCube({\n        id: 'SpecularEnvSampler',\n        getTextureForFace: dir => {\n          const imageArray = [];\n          for (let lod = 0; lod <= this.specularMipLevels - 1; lod++) {\n            imageArray.push(loadImage(this.getTexUrl('specular', dir, lod)));\n          }\n          return imageArray;\n        },\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._SpecularEnvSampler;\n  }\n\n  getBrdfTexture() {\n    if (!this._BrdfTexture) {\n      this._BrdfTexture = new Texture2D(this.gl, {\n        id: 'brdfLUT',\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        },\n        // Texture2D accepts a promise that returns an image as data (Async Textures)\n        data: loadImage(this.brdfLutUrl)\n      });\n    }\n\n    return this._BrdfTexture;\n  }\n\n  delete() {\n    if (this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler.delete();\n      this._DiffuseEnvSampler = null;\n    }\n\n    if (this._SpecularEnvSampler) {\n      this._SpecularEnvSampler.delete();\n      this._SpecularEnvSampler = null;\n    }\n\n    if (this._BrdfTexture) {\n      this._BrdfTexture.delete();\n      this._BrdfTexture = null;\n    }\n  }\n}\n"],"file":"gltf-environment.js"}