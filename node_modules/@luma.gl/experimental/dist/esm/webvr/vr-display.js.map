{"version":3,"sources":["../../../src/webvr/vr-display.js"],"names":["log","Display","createEnterVRButton","VRDisplay","navigator","window","props","_vrSupported","isSupported","vrFrameData","VRFrameData","vrPresenting","vrFrame","addEventListener","_vrDisplayPresentChange","bind","_removeVRButton","options","_addVRButton","vrDisplay","getFrameData","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","width","height","displayEye","projectionMatrix","viewMatrix","params","viewport","scissor","scissorTest","submitFrame","renderFrame","requestAnimationFrame","vrButton","canvas","_getCanvas","getVRDisplays","displays","length","info","title","displayName","onclick","_startDisplay","animationLoop","gl","requestPresent","source","isPresenting","style","display"],"mappings":"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","sourcesContent":["/* global window, navigator */\nimport {log} from '@luma.gl/webgl';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n"],"file":"vr-display.js"}