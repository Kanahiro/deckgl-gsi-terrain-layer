{"version":3,"sources":["../../../../src/gpgpu/point-in-polygon/gpu-point-in-polygon.js"],"names":["TEXTURE_SIZE","GPUPointInPolygon","gl","opts","textureSize","_setupResources","update","polygons","length","triangulatePolygons","vertices","indices","vertexCount","ids","_updateResources","positionBuffer","filterValueIndexBuffer","count","filterTransform","sourceBuffers","a_position","feedbackBuffers","filterValueIndex","elementCount","polygonTexture","boundingBox","run","moduleSettings","texture","Texture2D","format","type","dataFormat","border","mipmaps","parameters","Buffer","accessor","size","idBuffer","indexBuffer","target","polyTextureTransform","Transform","id","_targetTexture","_targetTextureVarying","vs","POLY_TEX_VS","drawMode","isIndexed","a_polygonID","FILTER_VS","modules","textureFilterModule","varyings","getBoundingBox","xMin","yMin","xMax","yMax","width","height","whRatio","texWidth","texHeight","resize","setData","Float32Array","Uint16Array","uniforms","boundingBoxOriginSize","positions","Infinity","y","x","i","SIZE","polygonId","normalized","Polygon","normalize","curVertices","curCount","curIds","Array","fill","push","curIndices","getSurfaceIndices","indexCount","j","getVertexCount"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer, Texture2D, assert} from '@luma.gl/webgl';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {Transform} from '@luma.gl/engine';\nimport {default as textureFilterModule} from './texture-filter';\nimport {POLY_TEX_VS, FILTER_VS} from './shaders';\nimport * as Polygon from './polygon';\nconst TEXTURE_SIZE = 512;\n\nexport default class GPUPointInPolygon {\n  constructor(gl, opts = {}) {\n    this.gl = gl;\n    assert(isWebGL2(gl)); // supports WebGL2 only\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n\n  update({polygons, textureSize} = {}) {\n    if (textureSize) {\n      this.textureSize = textureSize;\n    }\n    if (!polygons || polygons.length === 0) {\n      return;\n    }\n\n    const {vertices, indices, vertexCount, ids} = triangulatePolygons(polygons);\n    this._updateResources(vertices, indices, ids, vertexCount);\n  }\n\n  filter({positionBuffer, filterValueIndexBuffer, count}) {\n    this.filterTransform.update({\n      sourceBuffers: {\n        a_position: positionBuffer\n      },\n      feedbackBuffers: {\n        filterValueIndex: filterValueIndexBuffer\n      },\n      elementCount: count\n    });\n    const {polygonTexture, boundingBox} = this;\n\n    this.filterTransform.run({\n      moduleSettings: {boundingBox, texture: polygonTexture}\n    });\n  }\n\n  // PRIVATE\n\n  _setupResources() {\n    const {gl} = this;\n\n    // texture to render polygons to\n    this.polygonTexture = new Texture2D(gl, {\n      format: GL.RGB,\n      type: GL.UNSIGNED_BYTE,\n      dataFormat: GL.RGB,\n      border: 0,\n      mipmaps: false,\n      parameters: {\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n    this.positionBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 2}});\n    this.idBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 1}});\n    this.indexBuffer = new Buffer(gl, {\n      target: GL.ELEMENT_ARRAY_BUFFER,\n      accessor: {type: GL.UNSIGNED_SHORT}\n    });\n\n    // transform to generate polygon texture\n    this.polyTextureTransform = new Transform(gl, {\n      id: `polygon-texture-creation-transform`,\n      elementCount: 0,\n      _targetTexture: this.polygonTexture,\n      _targetTextureVarying: 'v_polygonColor',\n      vs: POLY_TEX_VS,\n      drawMode: GL.TRIANGLES,\n      isIndexed: true,\n      sourceBuffers: {\n        a_position: this.positionBuffer,\n        a_polygonID: this.idBuffer,\n        indices: this.indexBuffer\n      }\n    });\n\n    // transform to perform filtering\n    this.filterTransform = new Transform(gl, {\n      id: 'filter transform',\n      vs: FILTER_VS,\n      modules: [textureFilterModule],\n      varyings: ['filterValueIndex']\n    });\n  }\n\n  _updateResources(vertices, indices, ids, vertexCount) {\n    const boundingBox = getBoundingBox(vertices, vertexCount);\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const width = xMax - xMin;\n    const height = yMax - yMin;\n    const whRatio = width / height;\n    const {textureSize} = this;\n\n    // calculate max texture size with same aspect ratio\n    let texWidth = textureSize;\n    let texHeight = textureSize;\n    if (whRatio > 1) {\n      texHeight = texWidth / whRatio;\n    } else {\n      texWidth = texHeight * whRatio;\n    }\n\n    this.boundingBox = boundingBox;\n    this.polygonTexture.resize({width: texWidth, height: texHeight, mipmaps: false});\n    this.positionBuffer.setData(new Float32Array(vertices));\n    this.idBuffer.setData(new Float32Array(ids));\n    this.indexBuffer.setData(new Uint16Array(indices));\n    this.polyTextureTransform.update({\n      elementCount: indices.length,\n      _targetTexture: this.polygonTexture\n    });\n\n    this.polyTextureTransform.run({\n      uniforms: {\n        boundingBoxOriginSize: [xMin, yMin, width, height]\n      }\n    });\n  }\n}\n\n// Helper methods\n\nfunction getBoundingBox(positions, vertexCount) {\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction triangulatePolygons(polygons) {\n  const SIZE = 2;\n  const vertices = [];\n  const indices = [];\n  const ids = [];\n  let count = 0;\n  let polygonId = 0;\n  for (let i = 0; i < polygons.length; i++) {\n    const normalized = Polygon.normalize(polygons[i], SIZE);\n    const curVertices = normalized.positions || normalized;\n    const curCount = curVertices.length / SIZE;\n    const curIds = new Array(curCount).fill(polygonId);\n    vertices.push(...curVertices);\n    ids.push(...curIds);\n    const curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    const indexCount = curIndices.length;\n    for (let j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push(...curIndices);\n    polygonId++;\n  }\n\n  // UInt16 (UNSIGNED_SHORT) buffer is used for indices\n  assert(count < 65536); // 0xFFFF\n\n  const vertexCount = Polygon.getVertexCount(vertices, SIZE);\n\n  return {vertices, indices, ids, vertexCount};\n}\n"],"file":"gpu-point-in-polygon.js"}