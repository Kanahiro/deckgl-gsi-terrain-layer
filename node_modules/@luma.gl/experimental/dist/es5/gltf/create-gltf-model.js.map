{"version":3,"sources":["../../../src/gltf/create-gltf-model.js"],"names":["vs","fs","addVersionToShader","gl","source","createGLTFModel","options","id","drawMode","vertexCount","attributes","modelOptions","materialParser","GLTFMaterialParser","log","info","defines","managedResources","push","generatedTextures","Object","values","map","attribute","buffer","model","ModelNode","assign","modules","pbr","parameters","setProps","setUniforms","uniforms"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,EAAE,iuBAAR;AA2CA,IAAMC,EAAE,2LAAR;;AAYA,SAASC,kBAAT,CAA4BC,EAA5B,EAAgCC,MAAhC,EAAwC;AACtC,MAAI,uBAASD,EAAT,CAAJ,EAAkB;AAChB,sCAA2BC,MAA3B;AACD;;AAED,SAAOA,MAAP;AACD;;AAEc,SAASC,eAAT,CAAyBF,EAAzB,EAA6BG,OAA7B,EAAsC;AAAA,MAC5CC,EAD4C,GACWD,OADX,CAC5CC,EAD4C;AAAA,MACxCC,QADwC,GACWF,OADX,CACxCE,QADwC;AAAA,MAC9BC,WAD8B,GACWH,OADX,CAC9BG,WAD8B;AAAA,MACjBC,UADiB,GACWJ,OADX,CACjBI,UADiB;AAAA,MACLC,YADK,GACWL,OADX,CACLK,YADK;AAEnD,MAAMC,cAAc,GAAG,IAAIC,8BAAJ,CAAuBV,EAAvB,EAA2BG,OAA3B,CAAvB;;AAEAQ,aAAIC,IAAJ,CAAS,CAAT,EAAY,2BAAZ,EAAyCH,cAAc,CAACI,OAAxD;;AAKA,MAAMC,gBAAgB,GAAG,EAAzB;AACAA,EAAAA,gBAAgB,CAACC,IAAjB,OAAAD,gBAAgB,sCAASL,cAAc,CAACO,iBAAxB,EAAhB;AACAF,EAAAA,gBAAgB,CAACC,IAAjB,OAAAD,gBAAgB,sCAASG,MAAM,CAACC,MAAP,CAAcX,UAAd,EAA0BY,GAA1B,CAA8B,UAAAC,SAAS;AAAA,WAAIA,SAAS,CAACC,MAAd;AAAA,GAAvC,CAAT,EAAhB;AAEA,MAAMC,KAAK,GAAG,IAAIC,qBAAJ,CACZvB,EADY,EAEZiB,MAAM,CAACO,MAAP,CACE;AACEpB,IAAAA,EAAE,EAAFA,EADF;AAEEC,IAAAA,QAAQ,EAARA,QAFF;AAGEC,IAAAA,WAAW,EAAXA,WAHF;AAIEmB,IAAAA,OAAO,EAAE,CAACC,gBAAD,CAJX;AAKEb,IAAAA,OAAO,EAAEJ,cAAc,CAACI,OAL1B;AAMEc,IAAAA,UAAU,EAAElB,cAAc,CAACkB,UAN7B;AAOE9B,IAAAA,EAAE,EAAEE,kBAAkB,CAACC,EAAD,EAAKH,EAAL,CAPxB;AAQEC,IAAAA,EAAE,EAAEC,kBAAkB,CAACC,EAAD,EAAKF,EAAL,CARxB;AASEgB,IAAAA,gBAAgB,EAAhBA;AATF,GADF,EAYEN,YAZF,CAFY,CAAd;AAkBAc,EAAAA,KAAK,CAACM,QAAN,CAAe;AAACrB,IAAAA,UAAU,EAAVA;AAAD,GAAf;AACAe,EAAAA,KAAK,CAACO,WAAN,CAAkBpB,cAAc,CAACqB,QAAjC;AAEA,SAAOR,KAAP;AACD","sourcesContent":["import {isWebGL2} from '@luma.gl/gltools';\nimport {log} from '@luma.gl/webgl';\nimport {pbr} from '@luma.gl/shadertools';\nimport {ModelNode} from '../scenegraph';\nimport GLTFMaterialParser from './gltf-material-parser';\n\nconst vs = `\n#if (__VERSION__ < 300)\n  #define _attr attribute\n#else\n  #define _attr in\n#endif\n\n  _attr vec4 POSITION;\n\n  #ifdef HAS_NORMALS\n    _attr vec4 NORMAL;\n  #endif\n\n  #ifdef HAS_TANGENTS\n    _attr vec4 TANGENT;\n  #endif\n\n  #ifdef HAS_UV\n    _attr vec2 TEXCOORD_0;\n  #endif\n\n  void main(void) {\n    vec4 _NORMAL = vec4(0.);\n    vec4 _TANGENT = vec4(0.);\n    vec2 _TEXCOORD_0 = vec2(0.);\n\n    #ifdef HAS_NORMALS\n      _NORMAL = NORMAL;\n    #endif\n\n    #ifdef HAS_TANGENTS\n      _TANGENT = TANGENT;\n    #endif\n\n    #ifdef HAS_UV\n      _TEXCOORD_0 = TEXCOORD_0;\n    #endif\n\n    pbr_setPositionNormalTangentUV(POSITION, _NORMAL, _TANGENT, _TEXCOORD_0);\n    gl_Position = u_MVPMatrix * POSITION;\n  }\n`;\n\nconst fs = `\n#if (__VERSION__ < 300)\n  #define fragmentColor gl_FragColor\n#else\n  out vec4 fragmentColor;\n#endif\n\n  void main(void) {\n    fragmentColor = pbr_filterColor(vec4(0));\n  }\n`;\n\nfunction addVersionToShader(gl, source) {\n  if (isWebGL2(gl)) {\n    return `#version 300 es\\n${source}`;\n  }\n\n  return source;\n}\n\nexport default function createGLTFModel(gl, options) {\n  const {id, drawMode, vertexCount, attributes, modelOptions} = options;\n  const materialParser = new GLTFMaterialParser(gl, options);\n\n  log.info(4, 'createGLTFModel defines: ', materialParser.defines)();\n\n  // Calculate managedResources\n  // TODO: Implement resource management logic that will\n  // not deallocate resources/textures/buffers that are shared\n  const managedResources = [];\n  managedResources.push(...materialParser.generatedTextures);\n  managedResources.push(...Object.values(attributes).map(attribute => attribute.buffer));\n\n  const model = new ModelNode(\n    gl,\n    Object.assign(\n      {\n        id,\n        drawMode,\n        vertexCount,\n        modules: [pbr],\n        defines: materialParser.defines,\n        parameters: materialParser.parameters,\n        vs: addVersionToShader(gl, vs),\n        fs: addVersionToShader(gl, fs),\n        managedResources\n      },\n      modelOptions\n    )\n  );\n\n  model.setProps({attributes});\n  model.setUniforms(materialParser.uniforms);\n\n  return model;\n}\n"],"file":"create-gltf-model.js"}