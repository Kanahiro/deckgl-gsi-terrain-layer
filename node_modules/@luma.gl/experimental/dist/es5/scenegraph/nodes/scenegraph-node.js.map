{"version":3,"sources":["../../../../src/scenegraph/nodes/scenegraph-node.js"],"names":["ScenegraphNode","props","id","constructor","name","display","position","Vector3","rotation","scale","matrix","Matrix4","userData","_setScenegraphNodeProps","length","copyMatrix","copy","update","setPosition","setRotation","setScale","updateMatrix","pos","rot","identity","translate","rotateXYZ","viewMatrix","modelMatrix","worldMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","setMatrix","Object","assign"],"mappings":"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","sourcesContent":["import {Vector3, Matrix4} from 'math.gl';\nimport {assert, uid} from '@luma.gl/webgl';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update({position, rotation, scale} = {}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"],"file":"scenegraph-node.js"}