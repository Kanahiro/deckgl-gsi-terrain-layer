{"version":3,"sources":["../../../../src/modules/adjust-filters/huesaturation.js"],"names":["fs","uniforms","hue","value","min","max","saturation","name","passes","filter"],"mappings":"AAaA,MAAMA,EAAE,qyBAAR;AAgCA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,GAAG,EAAE;AAACC,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAC,CAAjB;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GADU;AAEfC,EAAAA,UAAU,EAAE;AAACH,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAC,CAAjB;AAAoBC,IAAAA,GAAG,EAAE;AAAzB;AAFG,CAAjB;AAKA,eAAe;AACbE,EAAAA,IAAI,EAAE,eADO;AAEbN,EAAAA,QAFa;AAGbD,EAAAA,EAHa;AAKbQ,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAD;AALK,CAAf","sourcesContent":["/**\n * @filter           Hue / Saturation\n * @description      Provides rotational hue and multiplicative saturation control. RGB color space\n *                   can be imagined as a cube where the axes are the red, green, and blue color\n *                   values. Hue changing works by rotating the color vector around the grayscale\n *                   line, which is the straight line from black (0, 0, 0) to white (1, 1, 1).\n *                   Saturation is implemented by scaling all color channel values either toward\n *                   or away from the average color channel value.\n * @param hue        -1 to 1 (-1 is 180 degree rotation in the negative direction, 0 is no change,\n *                   and 1 is 180 degree rotation in the positive direction)\n * @param saturation -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\n\nconst fs = `\\\nuniform float hue;\nuniform float saturation;\n\nvec4 hueSaturation_filterColor(vec4 color) {\n  // hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}]\n  float angle = hue * 3.14159265;\n  float s = sin(angle), c = cos(angle);\n  vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n  float len = length(color.rgb);\n  color.rgb = vec3(\n    dot(color.rgb, weights.xyz),\n    dot(color.rgb, weights.zxy),\n    dot(color.rgb, weights.yzx)\n  );\n\n  // saturation adjustment\n  float average = (color.r + color.g + color.b) / 3.0;\n  if (saturation > 0.0) {\n    color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - saturation));\n  } else {\n    color.rgb += (average - color.rgb) * (-saturation);\n  }\n\n  return color;\n}\n\nvec4 hueSaturation_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  return hueSaturation_filterColor(color);\n}\n`;\n\nconst uniforms = {\n  hue: {value: 0, min: -1, max: 1},\n  saturation: {value: 0, min: -1, max: 1}\n};\n\nexport default {\n  name: 'hueSaturation',\n  uniforms,\n  fs,\n\n  passes: [{filter: true}]\n};\n"],"file":"huesaturation.js"}