{"version":3,"sources":["../../../../src/modules/blur-filters/tiltshift.js"],"names":["random","fs","uniforms","blurRadius","value","min","max","gradientRadius","start","end","invert","private","name","dependencies","passes","sampler"],"mappings":"AAiBA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,EAAE,4lCAAR;AA4CA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAAE;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,GAAG,EAAE,CAAjB;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GADG;AAEfC,EAAAA,cAAc,EAAE;AAACH,IAAAA,KAAK,EAAE,GAAR;AAAaC,IAAAA,GAAG,EAAE,CAAlB;AAAqBC,IAAAA,GAAG,EAAE;AAA1B,GAFD;AAGfE,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAHQ;AAIfC,EAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,CAJU;AAKfC,EAAAA,MAAM,EAAE;AAACN,IAAAA,KAAK,EAAE,KAAR;AAAeO,IAAAA,OAAO,EAAE;AAAxB;AALO,CAAjB;AAQA,eAAe;AACbC,EAAAA,IAAI,EAAE,WADO;AAEbV,EAAAA,QAFa;AAGbD,EAAAA,EAHa;AAIbY,EAAAA,YAAY,EAAE,CAACb,MAAD,CAJD;AAMbc,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,OAAO,EAAE,IAAV;AAAgBb,IAAAA,QAAQ,EAAE;AAACQ,MAAAA,MAAM,EAAE;AAAT;AAA1B,GAAD,EAA6C;AAACK,IAAAA,OAAO,EAAE,IAAV;AAAgBb,IAAAA,QAAQ,EAAE;AAACQ,MAAAA,MAAM,EAAE;AAAT;AAA1B,GAA7C;AANK,CAAf","sourcesContent":["/**\n * @filter               Tilt Shift\n * @description          Simulates the shallow depth of field normally encountered in close-up\n *                       photography, which makes the scene seem much smaller than it actually\n *                       is. This filter assumes the scene is relatively planar, in which case\n *                       the part of the scene that is completely in focus can be described by\n *                       a line (the intersection of the focal plane and the scene). An example\n *                       of a planar scene might be looking at a road from above at a downward\n *                       angle. The image is then blurred with a blur radius that starts at zero\n *                       on the line and increases further from the line.\n * @param startX         The x coordinate of the start of the line segment.\n * @param startY         The y coordinate of the start of the line segment.\n * @param endX           The x coordinate of the end of the line segment.\n * @param endY           The y coordinate of the end of the line segment.\n * @param blurRadius     The maximum radius of the pyramid blur.\n * @param gradientRadius The distance from the line at which the maximum blur radius is reached.\n */\nimport random from '../utils/random';\n\nconst fs = `\\\nuniform float blurRadius;\nuniform float gradientRadius;\nuniform vec2 start;\nuniform vec2 end;\nuniform bool invert;\n\nvec2 tiltShift_getDelta(vec2 texSize) {\n  vec2 vector = normalize((end - start) * texSize);\n  return invert ? vec2(-vector.y, vector.x) : vector;\n}\n\nvec4 tiltShift_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  vec2 normal = normalize(vec2((start.y - end.y) * texSize.y, (end.x - start.x) * texSize.x));\n  float radius = smoothstep(0.0, 1.0,\n    abs(dot(texCoord * texSize - start * texSize, normal)) / gradientRadius) * blurRadius;\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec4 sample = texture2D(texture, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);\n\n    /* switch to pre-multiplied alpha to correctly blur transparent images */\n    sample.rgb *= sample.a;\n\n    color += sample * weight;\n    total += weight;\n  }\n\n  color = color / total;\n\n  /* switch back from pre-multiplied alpha */\n  color.rgb /= color.a + 0.00001;\n\n  return color;\n}\n`;\n\nconst uniforms = {\n  blurRadius: {value: 15, min: 0, max: 50},\n  gradientRadius: {value: 200, min: 0, max: 400},\n  start: [0, 0],\n  end: [1, 1],\n  invert: {value: false, private: true}\n};\n\nexport default {\n  name: 'tiltShift',\n  uniforms,\n  fs,\n  dependencies: [random],\n\n  passes: [{sampler: true, uniforms: {invert: false}}, {sampler: true, uniforms: {invert: true}}]\n};\n\n/*\nfunction tiltShift(startX, startY, endX, endY, blurRadius, gradientRadius) {\n  var dx = endX - startX;\n  var dy = endY - startY;\n  var d = Math.sqrt(dx * dx + dy * dy);\n  simpleShader.call(this, gl.tiltShift, {\n    blurRadius: blurRadius,\n    gradientRadius: gradientRadius,\n    start: [startX, startY],\n    end: [endX, endY],\n    delta: [dx / d, dy / d],\n    texSize: [this.width, this.height]\n  });\n  simpleShader.call(this, gl.tiltShift, {\n    blurRadius: blurRadius,\n    gradientRadius: gradientRadius,\n    start: [startX, startY],\n    end: [endX, endY],\n    delta: [-dy / d, dx / d],\n    texSize: [this.width, this.height]\n  });\n\n  return this;\n}\n*/\n"],"file":"tiltshift.js"}