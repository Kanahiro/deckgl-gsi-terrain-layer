{"version":3,"sources":["../../../../src/modules/fun-filters/colorhalftone.js"],"names":["fs","uniforms","center","angle","value","softMin","softMax","Math","PI","size","min","name","passes","filter"],"mappings":";;;;;;AAYA,IAAMA,EAAE,q5BAAR;AAmCA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,CADO;AAEfC,EAAAA,KAAK,EAAE;AAACC,IAAAA,KAAK,EAAE,GAAR;AAAaC,IAAAA,OAAO,EAAE,CAAtB;AAAyBC,IAAAA,OAAO,EAAEC,IAAI,CAACC,EAAL,GAAU;AAA5C,GAFQ;AAGfC,EAAAA,IAAI,EAAE;AAACL,IAAAA,KAAK,EAAE,CAAR;AAAWM,IAAAA,GAAG,EAAE,CAAhB;AAAmBL,IAAAA,OAAO,EAAE,CAA5B;AAA+BC,IAAAA,OAAO,EAAE;AAAxC;AAHS,CAAjB;eAMe;AACbK,EAAAA,IAAI,EAAE,eADO;AAEbV,EAAAA,QAAQ,EAARA,QAFa;AAGbD,EAAAA,EAAE,EAAFA,EAHa;AAKbY,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAD;AALK,C","sourcesContent":["/**\n * @filter        Color Halftone\n * @description   Simulates a CMYK halftone rendering of the image by multiplying pixel values\n *                with a four rotated 2D sine wave patterns, one each for cyan, magenta, yellow,\n *                and black.\n * @param centerX The x coordinate of the pattern origin.\n * @param centerY The y coordinate of the pattern origin.\n * @param angle   The rotation of the pattern in radians.\n * @param size    The diameter of a dot in pixels.\n */\n\n// TODO pass texCoord to angle\nconst fs = `\\\nuniform vec2 center;\nuniform float angle;\nuniform float size;\n\nfloat scale = 3.1514 / size;\n\nfloat pattern(float angle, vec2 texSize, vec2 texCoord) {\n  float s = sin(angle), c = cos(angle);\n  vec2 tex = texCoord * texSize - center * texSize;\n  vec2 point = vec2(\n\tc * tex.x - s * tex.y,\n\ts * tex.x + c * tex.y\n  ) * scale;\n  return (sin(point.x) * sin(point.y)) * 4.0;\n}\n\nvec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  vec3 cmy = 1.0 - color.rgb;\n  float k = min(cmy.x, min(cmy.y, cmy.z));\n  cmy = (cmy - k) / (1.0 - k);\n  cmy = clamp(\n\tcmy * 10.0 - 3.0 + vec3(\n    pattern(angle + 0.26179, texSize, texCoord),\n\t  pattern(angle + 1.30899, texSize, texCoord),\n    pattern(angle, texSize, texCoord)\n  ),\n\t0.0,\n\t1.0\n  );\n  k = clamp(k * 10.0 - 5.0 + pattern(angle + 0.78539, texSize, texCoord), 0.0, 1.0);\n  return vec4(1.0 - cmy - k, color.a);\n}\n`;\n\nconst uniforms = {\n  center: [0.5, 0.5],\n  angle: {value: 1.1, softMin: 0, softMax: Math.PI / 2},\n  size: {value: 4, min: 1, softMin: 3, softMax: 20}\n};\n\nexport default {\n  name: 'colorHalftone',\n  uniforms,\n  fs,\n\n  passes: [{filter: true}]\n};\n"],"file":"colorhalftone.js"}