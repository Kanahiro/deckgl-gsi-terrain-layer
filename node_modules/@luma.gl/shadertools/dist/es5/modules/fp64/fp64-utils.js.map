{"version":3,"sources":["../../../../src/modules/fp64/fp64-utils.js"],"names":["fp64ify","a","out","startIndex","hiPart","Math","fround","loPart","fp64LowPart","fp64ifyMatrix4","matrix","matrixFP64","Float32Array","i","j","index"],"mappings":";;;;;;;;;AAOO,SAASA,OAAT,CAAiBC,CAAjB,EAA8C;AAAA,MAA1BC,GAA0B,uEAApB,EAAoB;AAAA,MAAhBC,UAAgB,uEAAH,CAAG;AACnD,MAAMC,MAAM,GAAGC,IAAI,CAACC,MAAL,CAAYL,CAAZ,CAAf;AACA,MAAMM,MAAM,GAAGN,CAAC,GAAGG,MAAnB;AACAF,EAAAA,GAAG,CAACC,UAAD,CAAH,GAAkBC,MAAlB;AACAF,EAAAA,GAAG,CAACC,UAAU,GAAG,CAAd,CAAH,GAAsBI,MAAtB;AACA,SAAOL,GAAP;AACD;;AAOM,SAASM,WAAT,CAAqBP,CAArB,EAAwB;AAC7B,SAAOA,CAAC,GAAGI,IAAI,CAACC,MAAL,CAAYL,CAAZ,CAAX;AACD;;AAOM,SAASQ,cAAT,CAAwBC,MAAxB,EAAgC;AAErC,MAAMC,UAAU,GAAG,IAAIC,YAAJ,CAAiB,EAAjB,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,UAAMC,KAAK,GAAGF,CAAC,GAAG,CAAJ,GAAQC,CAAtB;AACAd,MAAAA,OAAO,CAACU,MAAM,CAACI,CAAC,GAAG,CAAJ,GAAQD,CAAT,CAAP,EAAoBF,UAApB,EAAgCI,KAAK,GAAG,CAAxC,CAAP;AACD;AACF;;AACD,SAAOJ,UAAP;AACD","sourcesContent":["/**\n * Calculate WebGL 64 bit float\n * @param a {number} - the input float number\n * @param out {array, optional} - the output array. If not supplied, a new array is created.\n * @param startIndex {integer, optional} - the index in the output array to fill from. Default 0.\n * @returns {array} - the fp64 representation of the input number\n */\nexport function fp64ify(a, out = [], startIndex = 0) {\n  const hiPart = Math.fround(a);\n  const loPart = a - hiPart;\n  out[startIndex] = hiPart;\n  out[startIndex + 1] = loPart;\n  return out;\n}\n\n/**\n * Calculate the low part of a WebGL 64 bit float\n * @param a {number} - the input float number\n * @returns {number} - the lower 32 bit of the number\n */\nexport function fp64LowPart(a) {\n  return a - Math.fround(a);\n}\n\n/**\n * Calculate WebGL 64 bit matrix (transposed \"Float64Array\")\n * @param matrix {Matrix4} - the input matrix\n * @returns {array} - the fp64 representation of the input matrix\n */\nexport function fp64ifyMatrix4(matrix) {\n  // Transpose the projection matrix to column major for GLSL.\n  const matrixFP64 = new Float32Array(32);\n  for (let i = 0; i < 4; ++i) {\n    for (let j = 0; j < 4; ++j) {\n      const index = i * 4 + j;\n      fp64ify(matrix[j * 4 + i], matrixFP64, index * 2);\n    }\n  }\n  return matrixFP64;\n}\n"],"file":"fp64-utils.js"}