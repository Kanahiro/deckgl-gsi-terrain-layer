{"version":3,"sources":["../../../src/lib/transpile-shader.js"],"names":["transpileShader","source","targetGLSLVersion","isVertex","convertVertexShaderTo300","convertFragmentShaderTo300","convertVertexShaderTo100","convertFragmentShaderTo100","Error","FS_OUTPUT_REGEX","replace","outputMatch","match","outputName","RegExp"],"mappings":"AAGA,eAAe,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,iBAAjC,EAAoDC,QAApD,EAA8D;AAC3E,UAAQD,iBAAR;AACE,SAAK,GAAL;AACE,aAAOC,QAAQ,GAAGC,wBAAwB,CAACH,MAAD,CAA3B,GAAsCI,0BAA0B,CAACJ,MAAD,CAA/E;;AACF,SAAK,GAAL;AACE,aAAOE,QAAQ,GAAGG,wBAAwB,CAACL,MAAD,CAA3B,GAAsCM,0BAA0B,CAACN,MAAD,CAA/E;;AACF;AACE,YAAM,IAAIO,KAAJ,gCAAkCN,iBAAlC,EAAN;AANJ;AAQD;AAED,IAAMO,eAAe,GAAG,4CAAxB;;AAEA,SAASL,wBAAT,CAAkCH,MAAlC,EAA0C;AACxC,SAAOA,MAAM,CACVS,OADI,CACI,6CADJ,EACmD,mBADnD,EAEJA,OAFI,CAEI,+BAFJ,EAEqC,OAFrC,EAGJA,OAHI,CAGI,6BAHJ,EAGmC,QAHnC,EAIJA,OAJI,CAII,gBAJJ,EAIsB,UAJtB,EAKJA,OALI,CAKI,mBALJ,EAKyB,UALzB,EAMJA,OANI,CAMI,sBANJ,EAM4B,aAN5B,EAOJA,OAPI,CAOI,wBAPJ,EAO8B,aAP9B,CAAP;AAQD;;AAED,SAASL,0BAAT,CAAoCJ,MAApC,EAA4C;AAC1C,SAAOA,MAAM,CACVS,OADI,CACI,6CADJ,EACmD,mBADnD,EAEJA,OAFI,CAEI,6BAFJ,EAEmC,OAFnC,EAGJA,OAHI,CAGI,gBAHJ,EAGsB,UAHtB,EAIJA,OAJI,CAII,kBAJJ,EAIwB,UAJxB,EAKJA,OALI,CAKI,sBALJ,EAK4B,aAL5B,EAMJA,OANI,CAMI,wBANJ,EAM8B,aAN9B,CAAP;AAOD;;AAED,SAASJ,wBAAT,CAAkCL,MAAlC,EAA0C;AAExC,SAAOA,MAAM,CACVS,OADI,CACI,4BADJ,EACkC,cADlC,EAEJA,OAFI,CAEI,wBAFJ,EAE8B,cAF9B,EAGJA,OAHI,CAGI,yBAHJ,EAG+B,YAH/B,EAIJA,OAJI,CAII,cAJJ,EAIoB,YAJpB,EAKJA,OALI,CAKI,iBALJ,EAKuB,kBALvB,CAAP;AAMD;;AAED,SAASH,0BAAT,CAAoCN,MAApC,EAA4C;AAE1CA,EAAAA,MAAM,GAAGA,MAAM,CACZS,OADM,CACE,4BADF,EACgC,cADhC,EAENA,OAFM,CAEE,mBAFF,EAEuB,UAFvB,EAGNA,OAHM,CAGE,cAHF,EAGkB,YAHlB,EAINA,OAJM,CAIE,iBAJF,EAIqB,kBAJrB,CAAT;AAMA,MAAMC,WAAW,GAAGV,MAAM,CAACW,KAAP,CAAaH,eAAb,CAApB;;AACA,MAAIE,WAAJ,EAAiB;AACf,QAAME,UAAU,GAAGF,WAAW,CAAC,CAAD,CAA9B;AACAV,IAAAA,MAAM,GAAGA,MAAM,CACZS,OADM,CACED,eADF,EACmB,EADnB,EAENC,OAFM,CAEE,IAAII,MAAJ,cAAiBD,UAAjB,UAAkC,GAAlC,CAFF,EAE0C,cAF1C,CAAT;AAGD;;AAED,SAAOZ,MAAP;AACD","sourcesContent":["// Transpiles shader source code to target GLSL version\n// Note: We always run transpiler even if same version e.g. 3.00 => 3.00\n// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\nexport default function transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);\n    case 100:\n      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);\n    default:\n      throw new Error(`unknown GLSL version ${targetGLSLVersion}`);\n  }\n}\n\nconst FS_OUTPUT_REGEX = /^[ \\t]*out[ \\t]+vec4[ \\t]+(\\w+)[ \\t]*;\\s+/m;\n\nfunction convertVertexShaderTo300(source) {\n  return source\n    .replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n')\n    .replace(/^[ \\t]*attribute[ \\t]+(.+;)/gm, 'in $1')\n    .replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'out $1')\n    .replace(/\\btexture2D\\(/g, 'texture(')\n    .replace(/\\btextureCube\\(+/g, 'texture(')\n    .replace(/\\btexture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertFragmentShaderTo300(source) {\n  return source\n    .replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n')\n    .replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'in $1')\n    .replace(/\\btexture2D\\(/g, 'texture(')\n    .replace(/\\btextureCube\\(/g, 'texture(')\n    .replace(/\\btexture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertVertexShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source\n    .replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100')\n    .replace(/^[ \\t]*in[ \\t]+(.+;)/gm, 'attribute $1')\n    .replace(/^[ \\t]*out[ \\t]+(.+;)/gm, 'varying $1')\n    .replace(/\\btexture\\(/g, 'texture2D(')\n    .replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n}\n\nfunction convertFragmentShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  source = source\n    .replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100')\n    .replace(/^[ \\t]*in[ \\t]+/gm, 'varying ')\n    .replace(/\\btexture\\(/g, 'texture2D(')\n    .replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n\n  const outputMatch = source.match(FS_OUTPUT_REGEX);\n  if (outputMatch) {\n    const outputName = outputMatch[1];\n    source = source\n      .replace(FS_OUTPUT_REGEX, '')\n      .replace(new RegExp(`\\\\b${outputName}\\\\b`, 'g'), 'gl_FragColor');\n  }\n\n  return source;\n}\n"],"file":"transpile-shader.js"}