{"version":3,"sources":["../../../src/lib/resolve-modules.js"],"names":["ShaderModule","assert","resolveModules","modules","getShaderDependencies","instantiateModules","moduleMap","moduleDepth","getDependencyGraph","level","Object","keys","sort","a","b","map","name","Error","module","undefined","dependencies","seen","TEST_EXPORTS"],"mappings":"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","sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\n// Instantiate shader modules and any dependencies resolve dependencies\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(\n      typeof module !== 'string',\n      `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`\n    );\n    assert(module.name, 'shader module has no name');\n\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"],"file":"resolve-modules.js"}