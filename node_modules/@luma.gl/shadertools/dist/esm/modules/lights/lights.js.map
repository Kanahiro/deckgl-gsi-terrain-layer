{"version":3,"sources":["../../../../src/modules/lights/lights.js"],"names":["lightingShader","name","vs","fs","getUniforms","defines","MAX_LIGHTS","INITIAL_MODULE_OPTIONS","convertColor","color","intensity","map","component","getLightSourceUniforms","ambientLight","pointLights","directionalLights","lightSourceUniforms","forEach","pointLight","index","position","attenuation","lighting_uPointLightCount","length","directionalLight","direction","lighting_uDirectionalLightCount","opts","lightSources","hasLights","lighting_uEnabled","Object","assign","lights","light","type","push"],"mappings":"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","sourcesContent":["import lightingShader from './lights.glsl';\n\nexport default {\n  name: 'lights',\n  vs: lightingShader,\n  fs: lightingShader,\n  getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};\n\nconst INITIAL_MODULE_OPTIONS = {};\n\n// Take color 0-255 and intensity as input and output 0.0-1.0 range\nfunction convertColor({color = [0, 0, 0], intensity = 1.0} = {}) {\n  return color.map(component => (component * intensity) / 255.0);\n}\n\nfunction getLightSourceUniforms({ambientLight, pointLights = [], directionalLights = []}) {\n  const lightSourceUniforms = {};\n\n  if (ambientLight) {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];\n  }\n\n  pointLights.forEach((pointLight, index) => {\n    lightSourceUniforms[`lighting_uPointLight[${index}].color`] = convertColor(pointLight);\n    lightSourceUniforms[`lighting_uPointLight[${index}].position`] = pointLight.position;\n    lightSourceUniforms[`lighting_uPointLight[${index}].attenuation`] = pointLight.attenuation || [\n      1,\n      0,\n      0\n    ];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n\n  directionalLights.forEach((directionalLight, index) => {\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].color`] = convertColor(\n      directionalLight\n    );\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].direction`] =\n      directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n\n  return lightSourceUniforms;\n}\n\n// eslint-disable-next-line complexity\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n  // Specify lights separately\n  if ('lightSources' in opts) {\n    const {ambientLight, pointLights, directionalLights} = opts.lightSources || {};\n    const hasLights =\n      ambientLight ||\n      (pointLights && pointLights.length > 0) ||\n      (directionalLights && directionalLights.length > 0);\n\n    if (!hasLights) {\n      return {lighting_uEnabled: false};\n    }\n\n    return Object.assign(\n      {},\n      getLightSourceUniforms({ambientLight, pointLights, directionalLights}),\n      {\n        lighting_uEnabled: true\n      }\n    );\n  }\n\n  // Support for array of lights. Type of light is detected by type field\n  if ('lights' in opts) {\n    const lightSources = {pointLights: [], directionalLights: []};\n    for (const light of opts.lights || []) {\n      switch (light.type) {\n        case 'ambient':\n          // Note: Only uses last ambient light\n          // TODO - add ambient light sources on CPU?\n          lightSources.ambientLight = light;\n          break;\n        case 'directional':\n          lightSources.directionalLights.push(light);\n          break;\n        case 'point':\n          lightSources.pointLights.push(light);\n          break;\n        default:\n        // eslint-disable-next-line\n        // console.warn(light.type);\n      }\n    }\n\n    // Call the `opts.lightSources`` version\n    return getUniforms({lightSources});\n  }\n\n  return {};\n}\n"],"file":"lights.js"}