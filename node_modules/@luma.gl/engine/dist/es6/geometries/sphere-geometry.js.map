{"version":3,"sources":["../../../src/geometries/sphere-geometry.js"],"names":["Geometry","uid","SphereGeometry","constructor","props","id","indices","attributes","tesselateSphere","nlat","nlong","radius","startLat","endLat","Math","PI","latRange","startLong","endLong","longRange","numVertices","value","n1","n2","n3","u","v","positions","Float32Array","normals","texCoords","IndexType","Uint32Array","Uint16Array","y","x","index","i2","i3","theta","phi","sinTheta","sin","cosTheta","cos","sinPhi","cosPhi","ux","uy","uz","r","numVertsAround","size","POSITION","NORMAL","TEXCOORD_0"],"mappings":"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","sourcesContent":["import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\nexport default class SphereGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('sphere-geometry')} = props;\n    const {indices, attributes} = tesselateSphere(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\nfunction tesselateSphere(props) {\n  const {nlat = 10, nlong = 10} = props;\n  let {radius = 1} = props;\n\n  const startLat = 0;\n  const endLat = Math.PI;\n  const latRange = endLat - startLat;\n  const startLong = 0;\n  const endLong = 2 * Math.PI;\n  const longRange = endLong - startLong;\n  const numVertices = (nlat + 1) * (nlong + 1);\n\n  if (typeof radius === 'number') {\n    const value = radius;\n    radius = (n1, n2, n3, u, v) => value;\n  }\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  const IndexType = numVertices > 0xffff ? Uint32Array : Uint16Array;\n  const indices = new IndexType(nlat * nlong * 6);\n\n  // Create positions, normals and texCoords\n  for (let y = 0; y <= nlat; y++) {\n    for (let x = 0; x <= nlong; x++) {\n      const u = x / nlong;\n      const v = y / nlat;\n\n      const index = x + y * (nlong + 1);\n      const i2 = index * 2;\n      const i3 = index * 3;\n\n      const theta = longRange * u;\n      const phi = latRange * v;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n\n      const r = radius(ux, uy, uz, u, v);\n\n      positions[i3 + 0] = r * ux;\n      positions[i3 + 1] = r * uy;\n      positions[i3 + 2] = r * uz;\n\n      normals[i3 + 0] = ux;\n      normals[i3 + 1] = uy;\n      normals[i3 + 2] = uz;\n\n      texCoords[i2 + 0] = u;\n      texCoords[i2 + 1] = 1 - v;\n    }\n  }\n\n  // Create indices\n  const numVertsAround = nlong + 1;\n  for (let x = 0; x < nlong; x++) {\n    for (let y = 0; y < nlat; y++) {\n      const index = (x * nlat + y) * 6;\n\n      indices[index + 0] = y * numVertsAround + x;\n      indices[index + 1] = y * numVertsAround + x + 1;\n      indices[index + 2] = (y + 1) * numVertsAround + x;\n\n      indices[index + 3] = (y + 1) * numVertsAround + x;\n      indices[index + 4] = y * numVertsAround + x + 1;\n      indices[index + 5] = (y + 1) * numVertsAround + x + 1;\n    }\n  }\n\n  return {\n    indices: {size: 1, value: indices},\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n}\n"],"file":"sphere-geometry.js"}