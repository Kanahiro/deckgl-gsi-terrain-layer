{"version":3,"sources":["../../../src/geometry/geometry-utils.js"],"names":["unpackIndexedGeometry","geometry","indices","attributes","vertexCount","value","length","unpackedAttributes","attributeName","attribute","constant","size","unpackedValue","constructor","x","index","i","Object","assign"],"mappings":";;;;;;;AAAO,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC;AAAA,MACvCC,OADuC,GAChBD,QADgB,CACvCC,OADuC;AAAA,MAC9BC,UAD8B,GAChBF,QADgB,CAC9BE,UAD8B;;AAE9C,MAAI,CAACD,OAAL,EAAc;AACZ,WAAOD,QAAP;AACD;;AAED,MAAMG,WAAW,GAAGF,OAAO,CAACG,KAAR,CAAcC,MAAlC;AACA,MAAMC,kBAAkB,GAAG,EAA3B;;AAEA,OAAK,IAAMC,aAAX,IAA4BL,UAA5B,EAAwC;AACtC,QAAMM,SAAS,GAAGN,UAAU,CAACK,aAAD,CAA5B;AADsC,QAE/BE,QAF+B,GAEND,SAFM,CAE/BC,QAF+B;AAAA,QAErBL,KAFqB,GAENI,SAFM,CAErBJ,KAFqB;AAAA,QAEdM,IAFc,GAENF,SAFM,CAEdE,IAFc;;AAGtC,QAAID,QAAQ,IAAI,CAACC,IAAjB,EAAuB;AACrB;AACD;;AACD,QAAMC,aAAa,GAAG,IAAIP,KAAK,CAACQ,WAAV,CAAsBT,WAAW,GAAGO,IAApC,CAAtB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiC,EAAEU,CAAnC,EAAsC;AACpC,UAAMC,KAAK,GAAGb,OAAO,CAACG,KAAR,CAAcS,CAAd,CAAd;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,EAA3B,EAA+B;AAC7BJ,QAAAA,aAAa,CAACE,CAAC,GAAGH,IAAJ,GAAWK,CAAZ,CAAb,GAA8BX,KAAK,CAACU,KAAK,GAAGJ,IAAR,GAAeK,CAAhB,CAAnC;AACD;AACF;;AACDT,IAAAA,kBAAkB,CAACC,aAAD,CAAlB,GAAoC;AAACG,MAAAA,IAAI,EAAJA,IAAD;AAAON,MAAAA,KAAK,EAAEO;AAAd,KAApC;AACD;;AAED,SAAO;AACLT,IAAAA,UAAU,EAAEc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,UAAlB,EAA8BI,kBAA9B;AADP,GAAP;AAGD","sourcesContent":["export function unpackIndexedGeometry(geometry) {\n  const {indices, attributes} = geometry;\n  if (!indices) {\n    return geometry;\n  }\n\n  const vertexCount = indices.value.length;\n  const unpackedAttributes = {};\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {constant, value, size} = attribute;\n    if (constant || !size) {\n      continue; // eslint-disable-line\n    }\n    const unpackedValue = new value.constructor(vertexCount * size);\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {size, value: unpackedValue};\n  }\n\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}\n"],"file":"geometry-utils.js"}