{"version":3,"sources":["../../../src/geometry/geometry.js"],"names":["uid","assert","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","props","id","drawMode","attributes","indices","vertexCount","userData","_setAttributes","_calculateVertexCount","attributeName","ArrayBuffer","isView","value","size","attribute","_print","isIndexed","undefined","Object","assign","length","Infinity","constant","Math","min","Number","isFinite"],"mappings":"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","sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"],"file":"geometry.js"}