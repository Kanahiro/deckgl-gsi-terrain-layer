{"version":3,"sources":["../../../src/animation/timeline.js"],"names":["channelHandles","animationHandles","Timeline","time","channels","Map","animations","playing","lastEngineTime","props","delay","duration","Number","POSITIVE_INFINITY","rate","repeat","handle","channel","_setChannelTime","set","animationHandle","animation","detachAnimation","get","undefined","Math","max","values","animationData","setTime","getTime","channelHandle","engineTime","offsetTime","totalDuration"],"mappings":"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","sourcesContent":["let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n"],"file":"timeline.js"}