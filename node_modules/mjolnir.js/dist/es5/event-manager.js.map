{"version":3,"sources":["../../src/event-manager.js"],"names":["DEFAULT_OPTIONS","events","recognizers","recognizerOptions","Manager","touchAction","tabIndex","EventManager","element","options","Object","assign","Map","_onBasicInput","bind","_onOtherEvent","setElement","on","destroy","ManagerClass","manager","RECOGNIZERS","keys","RECOGNIZER_COMPATIBLE_MAP","forEach","name","recognizer","get","otherName","recognizeWith","recognizerName","recognizerOption","enable","set","wheelInput","WheelInput","moveInput","MoveInput","keyInput","KeyInput","contextmenuInput","ContextmenuInput","eventAlias","eventRegistrar","isEmpty","_toggleRecognizer","handleEvent","event","handler","opts","_addEventHandler","_removeEventHandler","enabled","fallbackRecognizers","RECOGNIZER_FALLBACK_MAP","otherRecognizer","requireFailure","dropRequireFailure","enableEventType","once","passive","eventName","GESTURE_EVENT_ALIASES","EventRegistrar","EVENT_RECOGNIZER_MAP","add","remove","isRecognizerUsed","values","eh","srcEvent","alias","BASIC_EVENT_ALIASES","type","emit"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Manager} from './utils/hammer';\n\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\n\nimport EventRegistrar from './utils/event-registrar';\n\nimport {\n  BASIC_EVENT_ALIASES,\n  EVENT_RECOGNIZER_MAP,\n  GESTURE_EVENT_ALIASES,\n  RECOGNIZERS,\n  RECOGNIZER_COMPATIBLE_MAP,\n  RECOGNIZER_FALLBACK_MAP\n} from './constants';\n\nconst DEFAULT_OPTIONS = {\n  // event handlers\n  events: null,\n  // custom recognizers\n  recognizers: null,\n  recognizerOptions: {},\n  // Manager class\n  Manager,\n  // allow browser default touch action\n  // https://github.com/uber/react-map-gl/issues/506\n  touchAction: 'none',\n  tabIndex: 0\n};\n\n// Unified API for subscribing to events about both\n// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')\n// and gestural input (e.g. 'click', 'tap', 'panstart').\n// Delegates gesture related event registration and handling to Hammer.js.\nexport default class EventManager {\n  constructor(element = null, options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.events = new Map();\n\n    this._onBasicInput = this._onBasicInput.bind(this);\n    this._onOtherEvent = this._onOtherEvent.bind(this);\n\n    this.setElement(element);\n\n    // Register all passed events.\n    const {events} = options;\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  setElement(element) {\n    if (this.element) {\n      // unregister all events\n      this.destroy();\n    }\n    this.element = element;\n    if (!element) {\n      return;\n    }\n\n    const {options} = this;\n    const ManagerClass = options.Manager;\n\n    this.manager = new ManagerClass(element, {\n      touchAction: options.touchAction,\n      recognizers: options.recognizers || RECOGNIZERS\n    }).on('hammer.input', this._onBasicInput);\n\n    if (!options.recognizers) {\n      // Set default recognize withs\n      // http://hammerjs.github.io/recognize-with/\n      Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(name => {\n        const recognizer = this.manager.get(name);\n        if (recognizer) {\n          RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {\n            recognizer.recognizeWith(otherName);\n          });\n        }\n      });\n    }\n\n    // Set recognizer options\n    for (const recognizerName in options.recognizerOptions) {\n      const recognizer = this.manager.get(recognizerName);\n      if (recognizer) {\n        const recognizerOption = options.recognizerOptions[recognizerName];\n        // `enable` is managed by the event registrations\n        delete recognizerOption.enable;\n        recognizer.set(recognizerOption);\n      }\n    }\n\n    // Handle events not handled by Hammer.js:\n    // - mouse wheel\n    // - pointer/touch/mouse move\n    this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.moveInput = new MoveInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.keyInput = new KeyInput(element, this._onOtherEvent, {\n      enable: false,\n      tabIndex: options.tabIndex\n    });\n    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n      enable: false\n    });\n\n    // Register all existing events\n    for (const [eventAlias, eventRegistrar] of this.events) {\n      if (!eventRegistrar.isEmpty()) {\n        // Enable recognizer for this event.\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n        this.manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n  }\n\n  // Tear down internal event management implementations.\n  destroy() {\n    if (this.element) {\n      // wheelInput etc. are created in setElement() and therefore\n      // cannot exist if there is no element\n      this.wheelInput.destroy();\n      this.moveInput.destroy();\n      this.keyInput.destroy();\n      this.contextmenuInput.destroy();\n      this.manager.destroy();\n\n      this.wheelInput = null;\n      this.moveInput = null;\n      this.keyInput = null;\n      this.contextmenuInput = null;\n      this.manager = null;\n      this.element = null;\n    }\n  }\n\n  // Register an event handler function to be called on `event`.\n  on(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false);\n  }\n\n  // Register an event handler function to be called on `event`, then remove it\n  once(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, true);\n  }\n\n  // Register an event handler function to be called on `event`\n  // This handler does not ask the event to be recognized at all times.\n  // Instead, it only \"intercepts\" the event if some other handler is getting it.\n  watch(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false, true);\n  }\n\n  /**\n   * Deregister a previously-registered event handler.\n   * @param {string|Object} event   An event name (String) or map of event names to handlers\n   * @param {Function} [handler]    The function to be called on `event`.\n   */\n  off(event, handler) {\n    this._removeEventHandler(event, handler);\n  }\n\n  /*\n   * Enable/disable recognizer for the given event\n   */\n  _toggleRecognizer(name, enabled) {\n    const {manager} = this;\n    if (!manager) {\n      return;\n    }\n    const recognizer = manager.get(name);\n    if (recognizer && recognizer.options.enable !== enabled) {\n      recognizer.set({enable: enabled});\n\n      const fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n      if (fallbackRecognizers && !this.options.recognizers) {\n        // Set default require failures\n        // http://hammerjs.github.io/require-failure/\n        fallbackRecognizers.forEach(otherName => {\n          const otherRecognizer = manager.get(otherName);\n          if (enabled) {\n            // Wait for this recognizer to fail\n            otherRecognizer.requireFailure(name);\n            /**\n             * This seems to be a bug in hammerjs:\n             * requireFailure() adds both ways\n             * dropRequireFailure() only drops one way\n             * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/\n               recognizer-constructor.js#L136\n             */\n            recognizer.dropRequireFailure(otherName);\n          } else {\n            // Do not wait for this recognizer to fail\n            otherRecognizer.dropRequireFailure(name);\n          }\n        });\n      }\n    }\n    this.wheelInput.enableEventType(name, enabled);\n    this.moveInput.enableEventType(name, enabled);\n    this.keyInput.enableEventType(name, enabled);\n    this.contextmenuInput.enableEventType(name, enabled);\n  }\n\n  /**\n   * Process the event registration for a single event + handler.\n   */\n  _addEventHandler(event, handler, opts, once, passive) {\n    if (typeof event !== 'string') {\n      opts = handler;\n      // If `event` is a map, call `on()` for each entry.\n      for (const eventName in event) {\n        this._addEventHandler(eventName, event[eventName], opts, once, passive);\n      }\n      return;\n    }\n\n    const {manager, events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    let eventRegistrar = events.get(eventAlias);\n    if (!eventRegistrar) {\n      eventRegistrar = new EventRegistrar(this);\n      events.set(eventAlias, eventRegistrar);\n      // Enable recognizer for this event.\n      eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias;\n      // Listen to the event\n      if (manager) {\n        manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n    eventRegistrar.add(event, handler, opts, once, passive);\n    if (!eventRegistrar.isEmpty()) {\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n    }\n  }\n\n  /**\n   * Process the event deregistration for a single event + handler.\n   */\n  _removeEventHandler(event, handler) {\n    if (typeof event !== 'string') {\n      // If `event` is a map, call `off()` for each entry.\n      for (const eventName in event) {\n        this._removeEventHandler(eventName, event[eventName]);\n      }\n      return;\n    }\n\n    const {events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    const eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      return;\n    }\n\n    eventRegistrar.remove(event, handler);\n\n    if (eventRegistrar.isEmpty()) {\n      const {recognizerName} = eventRegistrar;\n      // Disable recognizer if no more handlers are attached to its events\n      let isRecognizerUsed = false;\n      for (const eh of events.values()) {\n        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n          isRecognizerUsed = true;\n          break;\n        }\n      }\n      if (!isRecognizerUsed) {\n        this._toggleRecognizer(recognizerName, false);\n      }\n    }\n  }\n\n  /**\n   * Handle basic events using the 'hammer.input' Hammer.js API:\n   * Before running Recognizers, Hammer emits a 'hammer.input' event\n   * with the basic event info. This function emits all basic events\n   * aliased to the \"class\" of event received.\n   * See constants.BASIC_EVENT_CLASSES basic event class definitions.\n   */\n  _onBasicInput(event) {\n    const {srcEvent} = event;\n    const alias = BASIC_EVENT_ALIASES[srcEvent.type];\n    if (alias) {\n      // fire all events aliased to srcEvent.type\n      this.manager.emit(alias, event);\n    }\n  }\n\n  /**\n   * Handle events not supported by Hammer.js,\n   * and pipe back out through same (Hammer) channel used by other events.\n   */\n  _onOtherEvent(event) {\n    // console.log('onotherevent', event.type, event)\n    this.manager.emit(event.type, event);\n  }\n}\n"],"file":"event-manager.js"}