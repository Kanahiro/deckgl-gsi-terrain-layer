{"version":3,"sources":["../../../src/inputs/move-input.js"],"names":["MOUSE_EVENTS","INPUT_EVENT_TYPES","MOVE_EVENT_TYPE","OVER_EVENT_TYPE","OUT_EVENT_TYPE","LEAVE_EVENT_TYPE","MoveInput","element","callback","options","pressed","Object","assign","enable","enableMoveEvent","enableLeaveEvent","enableOutEvent","enableOverEvent","events","concat","handleEvent","bind","forEach","event","addEventListener","removeEventListener","eventType","enabled","handleOverEvent","handleOutEvent","handleLeaveEvent","handleMoveEvent","type","srcEvent","pointerType","target","button","which"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {INPUT_EVENT_TYPES} from '../constants';\n\nconst {MOUSE_EVENTS} = INPUT_EVENT_TYPES;\nconst MOVE_EVENT_TYPE = 'pointermove';\nconst OVER_EVENT_TYPE = 'pointerover';\nconst OUT_EVENT_TYPE = 'pointerout';\nconst LEAVE_EVENT_TYPE = 'pointerleave';\n\n/**\n * Hammer.js swallows 'move' events (for pointer/touch/mouse)\n * when the pointer is not down. This class sets up a handler\n * specifically for these events to work around this limitation.\n * Note that this could be extended to more intelligently handle\n * move events across input types, e.g. storing multiple simultaneous\n * pointer/touch events, calculating speed/direction, etc.\n */\nexport default class MoveInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n\n    this.options = Object.assign({enable: true}, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === MOVE_EVENT_TYPE) {\n      this.enableMoveEvent = enabled;\n    }\n    if (eventType === OVER_EVENT_TYPE) {\n      this.enableOverEvent = enabled;\n    }\n    if (eventType === OUT_EVENT_TYPE) {\n      this.enableOutEvent = enabled;\n    }\n    if (eventType === LEAVE_EVENT_TYPE) {\n      this.enableLeaveEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    this.handleOverEvent(event);\n    this.handleOutEvent(event);\n    this.handleLeaveEvent(event);\n    this.handleMoveEvent(event);\n  }\n\n  handleOverEvent(event) {\n    if (this.enableOverEvent) {\n      if (event.type === 'mouseover') {\n        this.callback({\n          type: OVER_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleOutEvent(event) {\n    if (this.enableOutEvent) {\n      if (event.type === 'mouseout') {\n        this.callback({\n          type: OUT_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleLeaveEvent(event) {\n    if (this.enableLeaveEvent) {\n      if (event.type === 'mouseleave') {\n        this.callback({\n          type: LEAVE_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleMoveEvent(event) {\n    if (this.enableMoveEvent) {\n      switch (event.type) {\n        case 'mousedown':\n          if (event.button >= 0) {\n            // Button is down\n            this.pressed = true;\n          }\n          break;\n        case 'mousemove':\n          // Move events use `which` to track the button being pressed\n          if (event.which === 0) {\n            // Button is not down\n            this.pressed = false;\n          }\n          if (!this.pressed) {\n            // Drag events are emitted by hammer already\n            // we just need to emit the move event on hover\n            this.callback({\n              type: MOVE_EVENT_TYPE,\n              srcEvent: event,\n              pointerType: 'mouse',\n              target: event.target\n            });\n          }\n          break;\n        case 'mouseup':\n          this.pressed = false;\n          break;\n        default:\n      }\n    }\n  }\n}\n"],"file":"move-input.js"}