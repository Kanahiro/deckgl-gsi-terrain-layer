{"version":3,"sources":["../../../src/utils/event-utils.js"],"names":["DOWN_EVENT","MOVE_EVENT","UP_EVENT","MOUSE_EVENTS","pointerdown","pointermove","pointerup","mousedown","mousemove","mouseup","MOUSE_EVENT_WHICH_LEFT","MOUSE_EVENT_WHICH_MIDDLE","MOUSE_EVENT_WHICH_RIGHT","MOUSE_EVENT_BUTTON_LEFT","MOUSE_EVENT_BUTTON_MIDDLE","MOUSE_EVENT_BUTTON_RIGHT","MOUSE_EVENT_BUTTONS_LEFT_MASK","MOUSE_EVENT_BUTTONS_RIGHT_MASK","MOUSE_EVENT_BUTTONS_MIDDLE_MASK","whichButtons","event","eventType","srcEvent","type","buttons","button","which","leftButton","middleButton","rightButton","Number","isFinite","Boolean","getOffsetPosition","rootElement","center","clientX","x","y","clientY","rect","getBoundingClientRect","scaleX","width","offsetWidth","scaleY","height","offsetHeight","offsetCenter","left","clientLeft","top","clientTop"],"mappings":"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","sourcesContent":["/* Constants */\nconst DOWN_EVENT = 1;\nconst MOVE_EVENT = 2;\nconst UP_EVENT = 4;\nconst MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n};\n\n// MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\nconst MOUSE_EVENT_WHICH_LEFT = 1;\nconst MOUSE_EVENT_WHICH_MIDDLE = 2;\nconst MOUSE_EVENT_WHICH_RIGHT = 3;\n// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\nconst MOUSE_EVENT_BUTTON_LEFT = 0;\nconst MOUSE_EVENT_BUTTON_MIDDLE = 1;\nconst MOUSE_EVENT_BUTTON_RIGHT = 2;\n// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\nconst MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nconst MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nconst MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n\n/**\n * Extract the involved mouse button\n */\nexport function whichButtons(event) {\n  const eventType = MOUSE_EVENTS[event.srcEvent.type];\n  if (!eventType) {\n    // Not a mouse evet\n    return null;\n  }\n\n  const {buttons, button, which} = event.srcEvent;\n  let leftButton = false;\n  let middleButton = false;\n  let rightButton = false;\n\n  if (\n    // button is up, need to find out which one was pressed before\n    eventType === UP_EVENT ||\n    // moving but does not support `buttons` API\n    (eventType === MOVE_EVENT && !Number.isFinite(buttons))\n  ) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n\n  return {leftButton, middleButton, rightButton};\n}\n\n/**\n * Calculate event position relative to the root element\n */\nexport function getOffsetPosition(event, rootElement) {\n  const {srcEvent} = event;\n\n  // `center` is a hammer.js event property\n  if (!event.center && !Number.isFinite(srcEvent.clientX)) {\n    // Not a gestural event\n    return null;\n  }\n\n  const center = event.center || {\n    x: srcEvent.clientX,\n    y: srcEvent.clientY\n  };\n\n  const rect = rootElement.getBoundingClientRect();\n\n  // Fix scale for map affected by a CSS transform.\n  // See https://stackoverflow.com/a/26893663/3528533\n  const scaleX = rect.width / rootElement.offsetWidth;\n  const scaleY = rect.height / rootElement.offsetHeight;\n\n  // Calculate center relative to the root element\n  const offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n\n  return {center, offsetCenter};\n}\n"],"file":"event-utils.js"}