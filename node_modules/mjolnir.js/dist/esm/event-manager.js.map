{"version":3,"sources":["../../src/event-manager.js"],"names":["Manager","WheelInput","MoveInput","KeyInput","ContextmenuInput","EventRegistrar","BASIC_EVENT_ALIASES","EVENT_RECOGNIZER_MAP","GESTURE_EVENT_ALIASES","RECOGNIZERS","RECOGNIZER_COMPATIBLE_MAP","RECOGNIZER_FALLBACK_MAP","DEFAULT_OPTIONS","events","recognizers","recognizerOptions","touchAction","tabIndex","EventManager","element","options","Object","assign","Map","_onBasicInput","bind","_onOtherEvent","setElement","on","destroy","ManagerClass","manager","keys","forEach","name","recognizer","get","otherName","recognizeWith","recognizerName","recognizerOption","enable","set","wheelInput","moveInput","keyInput","contextmenuInput","eventAlias","eventRegistrar","isEmpty","_toggleRecognizer","handleEvent","event","handler","opts","_addEventHandler","_removeEventHandler","enabled","fallbackRecognizers","otherRecognizer","requireFailure","dropRequireFailure","enableEventType","once","passive","eventName","add","remove","isRecognizerUsed","values","eh","srcEvent","alias","type","emit"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Manager} from './utils/hammer';\n\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\n\nimport EventRegistrar from './utils/event-registrar';\n\nimport {\n  BASIC_EVENT_ALIASES,\n  EVENT_RECOGNIZER_MAP,\n  GESTURE_EVENT_ALIASES,\n  RECOGNIZERS,\n  RECOGNIZER_COMPATIBLE_MAP,\n  RECOGNIZER_FALLBACK_MAP\n} from './constants';\n\nconst DEFAULT_OPTIONS = {\n  // event handlers\n  events: null,\n  // custom recognizers\n  recognizers: null,\n  recognizerOptions: {},\n  // Manager class\n  Manager,\n  // allow browser default touch action\n  // https://github.com/uber/react-map-gl/issues/506\n  touchAction: 'none',\n  tabIndex: 0\n};\n\n// Unified API for subscribing to events about both\n// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')\n// and gestural input (e.g. 'click', 'tap', 'panstart').\n// Delegates gesture related event registration and handling to Hammer.js.\nexport default class EventManager {\n  constructor(element = null, options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.events = new Map();\n\n    this._onBasicInput = this._onBasicInput.bind(this);\n    this._onOtherEvent = this._onOtherEvent.bind(this);\n\n    this.setElement(element);\n\n    // Register all passed events.\n    const {events} = options;\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  setElement(element) {\n    if (this.element) {\n      // unregister all events\n      this.destroy();\n    }\n    this.element = element;\n    if (!element) {\n      return;\n    }\n\n    const {options} = this;\n    const ManagerClass = options.Manager;\n\n    this.manager = new ManagerClass(element, {\n      touchAction: options.touchAction,\n      recognizers: options.recognizers || RECOGNIZERS\n    }).on('hammer.input', this._onBasicInput);\n\n    if (!options.recognizers) {\n      // Set default recognize withs\n      // http://hammerjs.github.io/recognize-with/\n      Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(name => {\n        const recognizer = this.manager.get(name);\n        if (recognizer) {\n          RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {\n            recognizer.recognizeWith(otherName);\n          });\n        }\n      });\n    }\n\n    // Set recognizer options\n    for (const recognizerName in options.recognizerOptions) {\n      const recognizer = this.manager.get(recognizerName);\n      if (recognizer) {\n        const recognizerOption = options.recognizerOptions[recognizerName];\n        // `enable` is managed by the event registrations\n        delete recognizerOption.enable;\n        recognizer.set(recognizerOption);\n      }\n    }\n\n    // Handle events not handled by Hammer.js:\n    // - mouse wheel\n    // - pointer/touch/mouse move\n    this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.moveInput = new MoveInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.keyInput = new KeyInput(element, this._onOtherEvent, {\n      enable: false,\n      tabIndex: options.tabIndex\n    });\n    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n      enable: false\n    });\n\n    // Register all existing events\n    for (const [eventAlias, eventRegistrar] of this.events) {\n      if (!eventRegistrar.isEmpty()) {\n        // Enable recognizer for this event.\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n        this.manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n  }\n\n  // Tear down internal event management implementations.\n  destroy() {\n    if (this.element) {\n      // wheelInput etc. are created in setElement() and therefore\n      // cannot exist if there is no element\n      this.wheelInput.destroy();\n      this.moveInput.destroy();\n      this.keyInput.destroy();\n      this.contextmenuInput.destroy();\n      this.manager.destroy();\n\n      this.wheelInput = null;\n      this.moveInput = null;\n      this.keyInput = null;\n      this.contextmenuInput = null;\n      this.manager = null;\n      this.element = null;\n    }\n  }\n\n  // Register an event handler function to be called on `event`.\n  on(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false);\n  }\n\n  // Register an event handler function to be called on `event`, then remove it\n  once(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, true);\n  }\n\n  // Register an event handler function to be called on `event`\n  // This handler does not ask the event to be recognized at all times.\n  // Instead, it only \"intercepts\" the event if some other handler is getting it.\n  watch(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false, true);\n  }\n\n  /**\n   * Deregister a previously-registered event handler.\n   * @param {string|Object} event   An event name (String) or map of event names to handlers\n   * @param {Function} [handler]    The function to be called on `event`.\n   */\n  off(event, handler) {\n    this._removeEventHandler(event, handler);\n  }\n\n  /*\n   * Enable/disable recognizer for the given event\n   */\n  _toggleRecognizer(name, enabled) {\n    const {manager} = this;\n    if (!manager) {\n      return;\n    }\n    const recognizer = manager.get(name);\n    if (recognizer && recognizer.options.enable !== enabled) {\n      recognizer.set({enable: enabled});\n\n      const fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n      if (fallbackRecognizers && !this.options.recognizers) {\n        // Set default require failures\n        // http://hammerjs.github.io/require-failure/\n        fallbackRecognizers.forEach(otherName => {\n          const otherRecognizer = manager.get(otherName);\n          if (enabled) {\n            // Wait for this recognizer to fail\n            otherRecognizer.requireFailure(name);\n            /**\n             * This seems to be a bug in hammerjs:\n             * requireFailure() adds both ways\n             * dropRequireFailure() only drops one way\n             * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/\n               recognizer-constructor.js#L136\n             */\n            recognizer.dropRequireFailure(otherName);\n          } else {\n            // Do not wait for this recognizer to fail\n            otherRecognizer.dropRequireFailure(name);\n          }\n        });\n      }\n    }\n    this.wheelInput.enableEventType(name, enabled);\n    this.moveInput.enableEventType(name, enabled);\n    this.keyInput.enableEventType(name, enabled);\n    this.contextmenuInput.enableEventType(name, enabled);\n  }\n\n  /**\n   * Process the event registration for a single event + handler.\n   */\n  _addEventHandler(event, handler, opts, once, passive) {\n    if (typeof event !== 'string') {\n      opts = handler;\n      // If `event` is a map, call `on()` for each entry.\n      for (const eventName in event) {\n        this._addEventHandler(eventName, event[eventName], opts, once, passive);\n      }\n      return;\n    }\n\n    const {manager, events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    let eventRegistrar = events.get(eventAlias);\n    if (!eventRegistrar) {\n      eventRegistrar = new EventRegistrar(this);\n      events.set(eventAlias, eventRegistrar);\n      // Enable recognizer for this event.\n      eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias;\n      // Listen to the event\n      if (manager) {\n        manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n    eventRegistrar.add(event, handler, opts, once, passive);\n    if (!eventRegistrar.isEmpty()) {\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n    }\n  }\n\n  /**\n   * Process the event deregistration for a single event + handler.\n   */\n  _removeEventHandler(event, handler) {\n    if (typeof event !== 'string') {\n      // If `event` is a map, call `off()` for each entry.\n      for (const eventName in event) {\n        this._removeEventHandler(eventName, event[eventName]);\n      }\n      return;\n    }\n\n    const {events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    const eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      return;\n    }\n\n    eventRegistrar.remove(event, handler);\n\n    if (eventRegistrar.isEmpty()) {\n      const {recognizerName} = eventRegistrar;\n      // Disable recognizer if no more handlers are attached to its events\n      let isRecognizerUsed = false;\n      for (const eh of events.values()) {\n        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n          isRecognizerUsed = true;\n          break;\n        }\n      }\n      if (!isRecognizerUsed) {\n        this._toggleRecognizer(recognizerName, false);\n      }\n    }\n  }\n\n  /**\n   * Handle basic events using the 'hammer.input' Hammer.js API:\n   * Before running Recognizers, Hammer emits a 'hammer.input' event\n   * with the basic event info. This function emits all basic events\n   * aliased to the \"class\" of event received.\n   * See constants.BASIC_EVENT_CLASSES basic event class definitions.\n   */\n  _onBasicInput(event) {\n    const {srcEvent} = event;\n    const alias = BASIC_EVENT_ALIASES[srcEvent.type];\n    if (alias) {\n      // fire all events aliased to srcEvent.type\n      this.manager.emit(alias, event);\n    }\n  }\n\n  /**\n   * Handle events not supported by Hammer.js,\n   * and pipe back out through same (Hammer) channel used by other events.\n   */\n  _onOtherEvent(event) {\n    // console.log('onotherevent', event.type, event)\n    this.manager.emit(event.type, event);\n  }\n}\n"],"file":"event-manager.js"}