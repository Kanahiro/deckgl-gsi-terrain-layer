{"version":3,"sources":["../../../../src/classes/base/vector.js"],"names":["MathArray","checkNumber","assert","Vector","copy","vector","x","value","y","len","Math","sqrt","lengthSquared","magnitude","length","i","ELEMENTS","magnitudeSquared","distance","mathArray","distanceSquared","dist","dot","product","normalize","check","multiply","vectors","divide","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","a","b","add","subVectors","subtract","multiplyVectors","addScaledVector","constructor","multiplyScalar"],"mappings":"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","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nexport default class Vector extends MathArray {\n  // VIRTUAL METHODS\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  // ACCESSORS\n\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  // negate() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = -this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  // inverse() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = 1 / this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"],"file":"vector.js"}