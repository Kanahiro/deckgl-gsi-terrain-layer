{"version":3,"sources":["../../../src/classes/quaternion.js"],"names":["MathArray","checkNumber","checkVector","assert","quat","vec4","IDENTITY_QUATERNION","Quaternion","constructor","x","y","z","w","Array","isArray","arguments","length","copy","set","array","check","fromMatrix3","m","fromMat3","identity","fromAxisRotation","axis","rad","setAxisAngle","ELEMENTS","value","len","lengthSquared","squaredLength","dot","a","b","undefined","Error","rotationTo","vectorA","vectorB","add","calculateW","conjugate","invert","lerp","t","multiplyRight","multiply","multiplyLeft","normalize","l","rotateX","rotateY","rotateZ","scale","slerp","start","target","ratio","transformVector4","vector","result","transformQuat","lengthSq","setFromAxisAngle","premultiply"],"mappings":"AAoBA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,mBAAvC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAGA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AAEA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AAEA,MAAMC,mBAAmB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA5B;AAEA,eAAe,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAChDQ,EAAAA,WAAW,CAACC,CAAC,GAAG,CAAL,EAAQC,CAAC,GAAG,CAAZ,EAAeC,CAAC,GAAG,CAAnB,EAAsBC,CAAC,GAAG,CAA1B,EAA6B;AAEtC,UAAM,CAAC,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcL,CAAd,KAAoBM,SAAS,CAACC,MAAV,KAAqB,CAA7C,EAAgD;AAC9C,WAAKC,IAAL,CAAUR,CAAV;AACD,KAFD,MAEO;AACL,WAAKS,GAAL,CAAST,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB;AACD;AACF;;AAEDK,EAAAA,IAAI,CAACE,KAAD,EAAQ;AACV,SAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;AACA,SAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;AACA,SAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;AACA,SAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;AACA,WAAO,KAAKC,KAAL,EAAP;AACD;;AAEDF,EAAAA,GAAG,CAACT,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAa;AACd,SAAK,CAAL,IAAUH,CAAV;AACA,SAAK,CAAL,IAAUC,CAAV;AACA,SAAK,CAAL,IAAUC,CAAV;AACA,SAAK,CAAL,IAAUC,CAAV;AACA,WAAO,KAAKQ,KAAL,EAAP;AACD;;AAKDC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACblB,IAAAA,IAAI,CAACmB,QAAL,CAAc,IAAd,EAAoBD,CAApB;AACA,WAAO,KAAKF,KAAL,EAAP;AACD;;AAGDI,EAAAA,QAAQ,GAAG;AACTpB,IAAAA,IAAI,CAACoB,QAAL,CAAc,IAAd;AACA,WAAO,KAAKJ,KAAL,EAAP;AACD;;AAEDK,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,GAAP,EAAY;AAC1BvB,IAAAA,IAAI,CAACwB,YAAL,CAAkB,IAAlB,EAAwBF,IAAxB,EAA8BC,GAA9B;AACA,WAAO,KAAKP,KAAL,EAAP;AACD;;AASDQ,EAAAA,YAAY,CAACF,IAAD,EAAOC,GAAP,EAAY;AACtB,WAAO,KAAKF,gBAAL,CAAsBC,IAAtB,EAA4BC,GAA5B,CAAP;AACD;;AAID,MAAIE,QAAJ,GAAe;AACb,WAAO,CAAP;AACD;;AAED,MAAIpB,CAAJ,GAAQ;AACN,WAAO,KAAK,CAAL,CAAP;AACD;;AAED,MAAIA,CAAJ,CAAMqB,KAAN,EAAa;AACX,SAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;AACD;;AAED,MAAIpB,CAAJ,GAAQ;AACN,WAAO,KAAK,CAAL,CAAP;AACD;;AAED,MAAIA,CAAJ,CAAMoB,KAAN,EAAa;AACX,SAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;AACD;;AAED,MAAInB,CAAJ,GAAQ;AACN,WAAO,KAAK,CAAL,CAAP;AACD;;AAED,MAAIA,CAAJ,CAAMmB,KAAN,EAAa;AACX,SAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;AACD;;AAED,MAAIlB,CAAJ,GAAQ;AACN,WAAO,KAAK,CAAL,CAAP;AACD;;AAED,MAAIA,CAAJ,CAAMkB,KAAN,EAAa;AACX,SAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;AACD;;AAKDC,EAAAA,GAAG,GAAG;AACJ,WAAO3B,IAAI,CAACY,MAAL,CAAY,IAAZ,CAAP;AACD;;AAGDgB,EAAAA,aAAa,GAAG;AACd,WAAO5B,IAAI,CAAC6B,aAAL,CAAmB,IAAnB,CAAP;AACD;;AAIDC,EAAAA,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACR,QAAIA,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,WAAOlC,IAAI,CAAC8B,GAAL,CAAS,IAAT,EAAeC,CAAf,CAAP;AACD;;AAoBDI,EAAAA,UAAU,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAC3BrC,IAAAA,IAAI,CAACmC,UAAL,CAAgB,IAAhB,EAAsBC,OAAtB,EAA+BC,OAA/B;AACA,WAAO,KAAKrB,KAAL,EAAP;AACD;;AAeDsB,EAAAA,GAAG,CAACP,CAAD,EAAIC,CAAJ,EAAO;AACR,QAAIA,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACDlC,IAAAA,IAAI,CAACsC,GAAL,CAAS,IAAT,EAAe,IAAf,EAAqBP,CAArB;AACA,WAAO,KAAKf,KAAL,EAAP;AACD;;AAIDuB,EAAAA,UAAU,GAAG;AACXvC,IAAAA,IAAI,CAACuC,UAAL,CAAgB,IAAhB,EAAsB,IAAtB;AACA,WAAO,KAAKvB,KAAL,EAAP;AACD;;AAIDwB,EAAAA,SAAS,GAAG;AACVxC,IAAAA,IAAI,CAACwC,SAAL,CAAe,IAAf,EAAqB,IAArB;AACA,WAAO,KAAKxB,KAAL,EAAP;AACD;;AAGDyB,EAAAA,MAAM,GAAG;AACPzC,IAAAA,IAAI,CAACyC,MAAL,CAAY,IAAZ,EAAkB,IAAlB;AACA,WAAO,KAAKzB,KAAL,EAAP;AACD;;AAGD0B,EAAAA,IAAI,CAACX,CAAD,EAAIC,CAAJ,EAAOW,CAAP,EAAU;AACZ3C,IAAAA,IAAI,CAAC0C,IAAL,CAAU,IAAV,EAAgBX,CAAhB,EAAmBC,CAAnB,EAAsBW,CAAtB;AACA,WAAO,KAAK3B,KAAL,EAAP;AACD;;AAGD4B,EAAAA,aAAa,CAACb,CAAD,EAAIC,CAAJ,EAAO;AAClBjC,IAAAA,MAAM,CAAC,CAACiC,CAAF,CAAN;AACAhC,IAAAA,IAAI,CAAC6C,QAAL,CAAc,IAAd,EAAoB,IAApB,EAA0Bd,CAA1B;AACA,WAAO,KAAKf,KAAL,EAAP;AACD;;AAED8B,EAAAA,YAAY,CAACf,CAAD,EAAIC,CAAJ,EAAO;AACjBjC,IAAAA,MAAM,CAAC,CAACiC,CAAF,CAAN;AACAhC,IAAAA,IAAI,CAAC6C,QAAL,CAAc,IAAd,EAAoBd,CAApB,EAAuB,IAAvB;AACA,WAAO,KAAKf,KAAL,EAAP;AACD;;AAGD+B,EAAAA,SAAS,GAAG;AAEV,UAAMnC,MAAM,GAAG,KAAKe,GAAL,EAAf;AACA,UAAMqB,CAAC,GAAGpC,MAAM,GAAG,CAAT,GAAa,IAAIA,MAAjB,GAA0B,CAApC;AACA,SAAK,CAAL,IAAU,KAAK,CAAL,IAAUoC,CAApB;AACA,SAAK,CAAL,IAAU,KAAK,CAAL,IAAUA,CAApB;AACA,SAAK,CAAL,IAAU,KAAK,CAAL,IAAUA,CAApB;AACA,SAAK,CAAL,IAAU,KAAK,CAAL,IAAUA,CAApB;;AAEA,QAAIpC,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAK,CAAL,IAAU,CAAV;AACD;;AACD,WAAO,KAAKI,KAAL,EAAP;AACD;;AAGDiC,EAAAA,OAAO,CAAC1B,GAAD,EAAM;AACXvB,IAAAA,IAAI,CAACiD,OAAL,CAAa,IAAb,EAAmB,IAAnB,EAAyB1B,GAAzB;AACA,WAAO,KAAKP,KAAL,EAAP;AACD;;AAGDkC,EAAAA,OAAO,CAAC3B,GAAD,EAAM;AACXvB,IAAAA,IAAI,CAACkD,OAAL,CAAa,IAAb,EAAmB,IAAnB,EAAyB3B,GAAzB;AACA,WAAO,KAAKP,KAAL,EAAP;AACD;;AAGDmC,EAAAA,OAAO,CAAC5B,GAAD,EAAM;AACXvB,IAAAA,IAAI,CAACmD,OAAL,CAAa,IAAb,EAAmB,IAAnB,EAAyB5B,GAAzB;AACA,WAAO,KAAKP,KAAL,EAAP;AACD;;AAGDoC,EAAAA,KAAK,CAACpB,CAAD,EAAI;AACPhC,IAAAA,IAAI,CAACoD,KAAL,CAAW,IAAX,EAAiB,IAAjB,EAAuBpB,CAAvB;AACA,WAAO,KAAKhB,KAAL,EAAP;AACD;;AAGDqC,EAAAA,KAAK,CAACC,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,EAAuB;AAE1B,YAAQ7C,SAAS,CAACC,MAAlB;AACE,WAAK,CAAL;AAEE,SAAC;AAAC0C,UAAAA,KAAK,GAAGpD,mBAAT;AAA8BqD,UAAAA,MAA9B;AAAsCC,UAAAA;AAAtC,YAA+C7C,SAAS,CAAC,CAAD,CAAzD;AACA;;AACF,WAAK,CAAL;AAEE,SAAC4C,MAAD,EAASC,KAAT,IAAkB7C,SAAlB;AACA2C,QAAAA,KAAK,GAAG,IAAR;AACA;;AACF;AAVF;;AAYAtD,IAAAA,IAAI,CAACqD,KAAL,CAAW,IAAX,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,KAAhC;AACA,WAAO,KAAKxC,KAAL,EAAP;AACD;;AAEDyC,EAAAA,gBAAgB,CAACC,MAAD,EAASC,MAAM,GAAGD,MAAlB,EAA0B;AACxCzD,IAAAA,IAAI,CAAC2D,aAAL,CAAmBD,MAAnB,EAA2BD,MAA3B,EAAmC,IAAnC;AACA,WAAO5D,WAAW,CAAC6D,MAAD,EAAS,CAAT,CAAlB;AACD;;AAGDE,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKjC,aAAL,EAAP;AACD;;AAEDkC,EAAAA,gBAAgB,CAACxC,IAAD,EAAOC,GAAP,EAAY;AAC1B,WAAO,KAAKC,YAAL,CAAkBF,IAAlB,EAAwBC,GAAxB,CAAP;AACD;;AAEDwC,EAAAA,WAAW,CAAChC,CAAD,EAAIC,CAAJ,EAAO;AAChB,WAAO,KAAKc,YAAL,CAAkBf,CAAlB,EAAqBC,CAArB,CAAP;AACD;;AAEDa,EAAAA,QAAQ,CAACd,CAAD,EAAIC,CAAJ,EAAO;AACb,WAAO,KAAKY,aAAL,CAAmBb,CAAnB,EAAsBC,CAAtB,CAAP;AACD;;AAvR+C","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport assert from '../lib/assert';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as quat from 'gl-matrix/quat';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nexport default class Quaternion extends MathArray {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x, y, z, w) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat.identity(this);\n    return this.check();\n  }\n\n  fromAxisRotation(axis, rad) {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat.set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() {\n    return 4;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    this[3] = checkNumber(value);\n  }\n\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  len() {\n    return quat.length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared() {\n    return quat.squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat.dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat.getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat.inverse and produces the same result.\n  conjugate() {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat.lerp(this, a, b, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a, b) {\n    assert(!b); // Quaternion.multiply only takes one argument\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a, b) {\n    assert(!b); // Quaternion.multiply only takes one argument\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize() {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(start, target, ratio) {\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({start = IDENTITY_QUATERNION, target, ratio} = arguments[0]);\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        // eslint-disable-next-line prefer-rest-params\n        [target, ratio] = arguments;\n        start = this; // eslint-disable-line\n        break;\n      default: // Default signature: (start, target, ratio)\n    }\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(vector, result = vector) {\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis, rad) {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a, b) {\n    return this.multiplyLeft(a, b);\n  }\n\n  multiply(a, b) {\n    return this.multiplyRight(a, b);\n  }\n}\n"],"file":"quaternion.js"}