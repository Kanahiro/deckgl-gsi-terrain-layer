{"version":3,"sources":["../../../../src/classes/base/vector.js"],"names":["MathArray","checkNumber","assert","Vector","vector","Math","sqrt","lengthSquared","len","length","i","ELEMENTS","mathArray","distanceSquared","dist","product","magnitude","check","vectors","distance","value","a","b","copy","add","subtract","multiply","constructor","multiplyScalar"],"mappings":"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","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nexport default class Vector extends MathArray {\n  // VIRTUAL METHODS\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  // ACCESSORS\n\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  // negate() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = -this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  // inverse() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = 1 / this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"],"file":"vector.js"}