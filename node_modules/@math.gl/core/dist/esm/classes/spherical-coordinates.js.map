{"version":3,"sources":["../../../src/classes/spherical-coordinates.js"],"names":["formatValue","equals","config","degrees","radians","clamp","Vector3","vec3","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","phi","theta","radius","bearing","undefined","pitch","altitude","radiusScale","check","formatString","printTypes","f","other","copy","lng","lat","z","v","length","Math","atan2","acos","rotateX","rotateZ","max","min","PI","Number","isFinite","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from '../lib/common';\nimport {degrees, radians, clamp} from '../lib/common';\nimport Vector3 from './vector3';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec3 from 'gl-matrix/vec3';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n  // @ts-ignore TS2740: Type '{}' is missing the following properties from type\n  // eslint-disable-next-line complexity\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing = undefined,\n    pitch = undefined,\n    altitude = undefined,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    this.phi = phi;\n    this.theta = theta;\n    // TODO - silently accepts illegal 0\n    this.radius = radius || altitude || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n\n    if (bearing !== undefined) {\n      this.bearing = bearing; // up / down towards top and bottom pole\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch; // around the equator of the sphere\n    }\n    this.check();\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes = false}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check() {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"],"file":"spherical-coordinates.js"}