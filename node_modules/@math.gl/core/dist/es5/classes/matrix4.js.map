{"version":3,"sources":["../../../src/classes/matrix4.js"],"names":["IDENTITY","Object","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","Matrix4","array","arguments","length","Array","isArray","copy","identity","check","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","result","q","mat4","fromQuat","left","right","bottom","top","near","far","Infinity","_computeInfinitePerspectiveOffCenter","frustum","eye","center","up","lookAt","ortho","fovy","Math","PI","aspect","focalDistance","Error","halfY","tan","undefined","fov","perspective","determinant","sqrt","scaleResult","scale","getScale","inverseScale0","inverseScale1","inverseScale2","transpose","invert","a","multiply","radians","rotateX","rotateY","rotateZ","rx","ry","rz","axis","rotate","factor","vec","translate","vector","vec4","transformMat4","transformAsPoint","vec2","vec3","x","y","z","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column2Row2","column2Row3","column3Row2","Matrix"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {checkVector, deprecated} from '../lib/validators';\nimport Matrix from './base/matrix';\n\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as mat4 from 'gl-matrix/mat4';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec2 from 'gl-matrix/vec2';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec3 from 'gl-matrix/vec3';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nconst ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\nconst INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\n\nconst constants = {};\n\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY() {\n    constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n    return constants.IDENTITY;\n  }\n\n  static get ZERO() {\n    constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n    return constants.ZERO;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  get ELEMENTS() {\n    return 16;\n  }\n\n  get RANK() {\n    return 4;\n  }\n\n  constructor(array) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result) {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  identity() {\n    return this.copy(IDENTITY);\n  }\n\n  // Calculates a 4x4 matrix from the given quaternion\n  // q quat  Quaternion to create matrix from\n  fromQuaternion(q) {\n    mat4.fromQuat(this, q);\n    return this.check();\n  }\n\n  // Generates a frustum matrix with the given bounds\n  // left  Number  Left bound of the frustum\n  // right Number  Right bound of the frustum\n  // bottom  Number  Bottom bound of the frustum\n  // top Number  Top bound of the frustum\n  // near  Number  Near bound of the frustum\n  // far Number  Far bound of the frustum\n  frustum({left, right, bottom, top, near, far}) {\n    if (far === Infinity) {\n      Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  static _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n    const column0Row0 = (2.0 * near) / (right - left);\n    const column1Row1 = (2.0 * near) / (top - bottom);\n    const column2Row0 = (right + left) / (right - left);\n    const column2Row1 = (top + bottom) / (top - bottom);\n    const column2Row2 = -1.0;\n    const column2Row3 = -1.0;\n    const column3Row2 = -2.0 * near;\n\n    result[0] = column0Row0;\n    result[1] = 0.0;\n    result[2] = 0.0;\n    result[3] = 0.0;\n    result[4] = 0.0;\n    result[5] = column1Row1;\n    result[6] = 0.0;\n    result[7] = 0.0;\n    result[8] = column2Row0;\n    result[9] = column2Row1;\n    result[10] = column2Row2;\n    result[11] = column2Row3;\n    result[12] = 0.0;\n    result[13] = 0.0;\n    result[14] = column3Row2;\n    result[15] = 0.0;\n    return result;\n  }\n\n  // Generates a look-at matrix with the given eye position, focal point,\n  // and up axis\n  // eye vec3  Position of the viewer\n  // center  vec3  Point the viewer is looking at\n  // up  vec3  vec3 pointing up\n  lookAt(eye, center, up) {\n    // Signature: lookAt({eye, center = [0, 0, 0], up = [0, 1, 0]}))\n    if (arguments.length === 1) {\n      ({eye, center, up} = eye);\n    }\n\n    center = center || [0, 0, 0];\n    up = up || [0, 1, 0];\n\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  // Generates a orthogonal projection matrix with the given bounds\n  // from \"traditional\" view space parameters\n  // left  number  Left bound of the frustum\n  // right number  Right bound of the frustum\n  // bottom  number  Bottom bound of the frustum\n  // top number  Top bound of the frustum\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  ortho({left, right, bottom, top, near = 0.1, far = 500}) {\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  // Generates an orthogonal projection matrix with the same parameters\n  // as a perspective matrix (plus focalDistance)\n  // fovy  number  Vertical field of view in radians\n  // aspect  number  Aspect ratio. typically viewport width/height\n  // focalDistance distance in the view frustum used for extent calculations\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  orthographic({\n    fovy = (45 * Math.PI) / 180,\n    aspect = 1,\n    focalDistance = 1,\n    near = 0.1,\n    far = 500\n  }) {\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return new Matrix4().ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  // Generates a perspective projection matrix with the given bounds\n  // fovy  number  Vertical field of view in radians\n  // aspect  number  Aspect ratio. typically viewport width/height\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  perspective({\n    fovy = undefined,\n    fov = (45 * Math.PI) / 180, // DEPRECATED\n    aspect = 1,\n    near = 0.1,\n    far = 500\n  } = {}) {\n    fovy = fovy || fov;\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant() {\n    return mat4.determinant(this);\n  }\n\n  // Extracts the non-uniform scale assuming the matrix is an affine transformation.\n  // The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n  getScale(result = [-0, -0, -0]) {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  // Gets the translation portion, assuming the matrix is a affine transformation matrix.\n  getTranslation(result = [-0, -0, -0]) {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  // Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n  getRotation(\n    result = [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0],\n    scaleResult = null\n  ) {\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  getRotationMatrix3(result = [-0, -0, -0, -0, -0, -0, -0, -0, -0], scaleResult = null) {\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose() {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat4.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a) {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians) {\n    mat4.rotateX(this, this, radians);\n    // mat4.rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians) {\n    mat4.rotateY(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Z axis.\n  rotateZ(radians) {\n    mat4.rotateZ(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  rotateXYZ([rx, ry, rz]) {\n    return this.rotateX(rx)\n      .rotateY(ry)\n      .rotateZ(rz);\n  }\n\n  rotateAxis(radians, axis) {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat4.scale(this, this, factor);\n    } else {\n      mat4.scale(this, this, [factor, factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat4.translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n\n  // Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n  transform(vector, result) {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  // Transforms any 2 or 3 element array as point (w implicitly 1)\n  transformAsPoint(vector, result) {\n    const {length} = vector;\n    switch (length) {\n      case 2:\n        result = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // Transforms any 2 or 3 element array as vector (w implicitly 0)\n  transformAsVector(vector, result) {\n    switch (vector.length) {\n      case 2:\n        result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // three.js math API compatibility\n  makeRotationX(radians) {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x, y, z) {\n    return this.identity().translate([x, y, z]);\n  }\n\n  // DEPRECATED in 3.0\n\n  transformPoint(vector, result) {\n    deprecated('Matrix4.transformPoint', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformVector(vector, result) {\n    deprecated('Matrix4.transformVector', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformDirection(vector, result) {\n    deprecated('Matrix4.transformDirection', '3.0');\n    return this.transformAsVector(vector, result);\n  }\n}\n"],"file":"matrix4.js"}