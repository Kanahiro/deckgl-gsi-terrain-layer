{"version":3,"sources":["../../src/type-utils.js"],"names":["noop","x","scratchVector","Vector3","fromCartographic","cartographic","result","map","longitude","latitude","height","y","z","fromCartographicToRadians","vector","config","_cartographicRadians","toRadians","fromCartographicToDegrees","toDegrees","toCartographic","toCartographicFromRadians","toCartographicFromDegrees","isWGS84","from","oneOverRadiiSquared","WGS84_CONSTANTS","centerToleranceSquared","x2","y2","z2","Math","abs"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, isArray, toRadians, toDegrees, config} from '@math.gl/core';\nimport {WGS84_CONSTANTS} from './constants';\n\nconst noop = x => x;\n\nconst scratchVector = new Vector3();\n\nexport function fromCartographic(cartographic, result, map = noop) {\n  if (isArray(cartographic)) {\n    result[0] = map(cartographic[0]);\n    result[1] = map(cartographic[1]);\n    result[2] = cartographic[2];\n  } else if ('longitude' in cartographic) {\n    result[0] = map(cartographic.longitude);\n    result[1] = map(cartographic.latitude);\n    result[2] = cartographic.height;\n  } else {\n    result[0] = map(cartographic.x);\n    result[1] = map(cartographic.y);\n    result[2] = cartographic.z;\n  }\n  return result;\n}\n\nexport function fromCartographicToRadians(cartographic, vector = scratchVector) {\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? noop : toRadians);\n}\n\nexport function fromCartographicToDegrees(cartographic, vector = scratchVector) {\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? toDegrees : noop);\n}\n\nexport function toCartographic(vector, cartographic, map = noop) {\n  if (isArray(cartographic)) {\n    cartographic[0] = map(vector[0]);\n    cartographic[1] = map(vector[1]);\n    cartographic[2] = vector[2];\n  } else if ('longitude' in cartographic) {\n    cartographic.longitude = map(vector[0]);\n    cartographic.latitude = map(vector[1]);\n    cartographic.height = vector[2];\n  } else {\n    cartographic.x = map(vector[0]);\n    cartographic.y = map(vector[1]);\n    cartographic.z = vector[2];\n  }\n  return cartographic;\n}\n\nexport function toCartographicFromRadians(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? noop : toDegrees);\n}\n\nexport function toCartographicFromDegrees(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? toRadians : noop);\n}\n\nexport function isWGS84(vector) {\n  if (!vector) {\n    return false;\n  }\n  scratchVector.from(vector);\n  const {oneOverRadiiSquared, centerToleranceSquared} = WGS84_CONSTANTS;\n  const x2 = vector[0] * vector[0] * oneOverRadiiSquared[0];\n  const y2 = vector[1] * vector[1] * oneOverRadiiSquared[1];\n  const z2 = vector[2] * vector[2] * oneOverRadiiSquared[2];\n  return Math.abs(x2 + y2 + z2 - 1) < centerToleranceSquared;\n}\n"],"file":"type-utils.js"}