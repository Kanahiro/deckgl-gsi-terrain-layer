{"version":3,"sources":["../../../src/ellipsoid/ellipsoid.js"],"names":["Vector3","Matrix4","toRadians","toDegrees","assert","equals","_MathUtils","vec3","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","fromCartographicToRadians","toCartographicFromRadians","scaleToGeodeticSurface","localFrameToFixedFrame","scratchVector","scratchNormal","scratchK","scratchPosition","scratchHeight","scratchCartesian","wgs84","Ellipsoid","WGS84","constructor","x","y","z","radii","radiiSquared","radiiToTheFourth","oneOverRadii","oneOverRadiiSquared","minimumRadius","Math","min","maximumRadius","max","centerToleranceSquared","EPSILON1","squaredXOverSquaredZ","Object","freeze","right","Boolean","toString","cartographicToCartesian","cartographic","result","normal","k","height","geodeticSurfaceNormalCartographic","copy","scale","gamma","sqrt","dot","add","to","cartesianToCartographic","cartesian","from","point","undefined","geodeticSurfaceNormal","h","subtract","longitude","atan2","latitude","asin","sign","length","eastNorthUpToFixedFrame","origin","firstAxis","secondAxis","thirdAxis","geocentricSurfaceNormal","normalize","cartographicVectorRadians","cosLatitude","cos","set","sin","scaleToGeocentricSurface","positionX","positionY","positionZ","beta","multiplyScalar","transformPositionToScaledSpace","position","transformPositionFromScaledSpace","getSurfaceNormalIntersectionWithZAxis","buffer","EPSILON15","abs"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Matrix4, toRadians, toDegrees, assert, equals, _MathUtils} from '@math.gl/core';\nimport * as vec3 from 'gl-matrix/vec3';\n\nimport {WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z} from '../constants';\nimport {fromCartographicToRadians, toCartographicFromRadians} from '../type-utils';\n\nimport scaleToGeodeticSurface from './helpers/scale-to-geodetic-surface';\nimport localFrameToFixedFrame from './helpers/ellipsoid-transform';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nconst scratchK = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchHeight = new Vector3();\nconst scratchCartesian = new Vector3();\n\nlet wgs84;\n\n// A quadratic surface defined in Cartesian coordinates by the equation\n// <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\n// to represent the shape of planetary bodies.\nexport default class Ellipsoid {\n  // An Ellipsoid instance initialized to the WGS84 standard.\n  static get WGS84() {\n    wgs84 = wgs84 || new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z);\n    return wgs84;\n  }\n\n  // Creates an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions.\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    assert(x >= 0.0);\n    assert(y >= 0.0);\n    assert(z >= 0.0);\n\n    this.radii = new Vector3(x, y, z);\n\n    this.radiiSquared = new Vector3(x * x, y * y, z * z);\n\n    this.radiiToTheFourth = new Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n\n    this.oneOverRadii = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / x,\n      y === 0.0 ? 0.0 : 1.0 / y,\n      z === 0.0 ? 0.0 : 1.0 / z\n    );\n\n    this.oneOverRadiiSquared = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / (x * x),\n      y === 0.0 ? 0.0 : 1.0 / (y * y),\n      z === 0.0 ? 0.0 : 1.0 / (z * z)\n    );\n\n    this.minimumRadius = Math.min(x, y, z);\n\n    this.maximumRadius = Math.max(x, y, z);\n\n    this.centerToleranceSquared = _MathUtils.EPSILON1;\n\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n\n    Object.freeze(this);\n  }\n\n  // Compares this Ellipsoid against the provided Ellipsoid componentwise and returns\n  equals(right) {\n    return this === right || Boolean(right && this.radii.equals(right.radii));\n  }\n\n  // Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'.\n  toString() {\n    return this.radii.toString();\n  }\n\n  // Converts the provided cartographic to Cartesian representation.\n  cartographicToCartesian(cartographic, result = [0, 0, 0]) {\n    const normal = scratchNormal;\n    const k = scratchK;\n\n    const [, , height] = cartographic;\n    this.geodeticSurfaceNormalCartographic(cartographic, normal);\n    k.copy(this.radiiSquared).scale(normal);\n\n    const gamma = Math.sqrt(normal.dot(k));\n    k.scale(1 / gamma);\n\n    normal.scale(height);\n\n    k.add(normal);\n\n    return k.to(result);\n  }\n\n  // Converts the provided cartesian to cartographic (lng/lat/z) representation.\n  // The cartesian is undefined at the center of the ellipsoid.\n  cartesianToCartographic(cartesian, result = [0, 0, 0]) {\n    scratchCartesian.from(cartesian);\n    const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n\n    if (!point) {\n      return undefined;\n    }\n\n    const normal = this.geodeticSurfaceNormal(point, scratchNormal);\n\n    const h = scratchHeight;\n    h.copy(scratchCartesian).subtract(point);\n\n    const longitude = Math.atan2(normal.y, normal.x);\n    const latitude = Math.asin(normal.z);\n    const height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n\n    return toCartographicFromRadians([longitude, latitude, height], result);\n  }\n\n  // Computes a 4x4 transformation matrix from a reference frame with an east-north-up axes\n  // centered at the provided origin to the provided ellipsoid's fixed reference frame.\n  eastNorthUpToFixedFrame(origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, 'east', 'north', 'up', origin, result);\n  }\n\n  // Computes a 4x4 transformation matrix from a reference frame centered at\n  // the provided origin to the ellipsoid's fixed reference frame.\n  localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);\n  }\n\n  // Computes the unit vector directed from the center of this ellipsoid toward\n  // the provided Cartesian position.\n  geocentricSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector\n      .from(cartesian)\n      .normalize()\n      .to(result);\n  }\n\n  // Computes the normal of the plane tangent to the surface of the ellipsoid at provided position.\n  geodeticSurfaceNormalCartographic(cartographic, result = [0, 0, 0]) {\n    const cartographicVectorRadians = fromCartographicToRadians(cartographic);\n\n    const longitude = cartographicVectorRadians[0];\n    const latitude = cartographicVectorRadians[1];\n\n    const cosLatitude = Math.cos(latitude);\n\n    scratchVector\n      .set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude))\n      .normalize();\n\n    return scratchVector.to(result);\n  }\n\n  // Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\n  geodeticSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector\n      .from(cartesian)\n      .scale(this.oneOverRadiiSquared)\n      .normalize()\n      .to(result);\n  }\n\n  // Scales the provided Cartesian position along the geodetic surface normal\n  // so that it is on the surface of this ellipsoid.  If the position is\n  // at the center of the ellipsoid, this function returns undefined.\n  scaleToGeodeticSurface(cartesian, result) {\n    return scaleToGeodeticSurface(cartesian, this, result);\n  }\n\n  // Scales the provided Cartesian position along the geocentric surface normal\n  // so that it is on the surface of this ellipsoid.\n  scaleToGeocentricSurface(cartesian, result = [0, 0, 0]) {\n    scratchPosition.from(cartesian);\n\n    const positionX = scratchPosition.x;\n    const positionY = scratchPosition.y;\n    const positionZ = scratchPosition.z;\n    const oneOverRadiiSquared = this.oneOverRadiiSquared;\n\n    const beta =\n      1.0 /\n      Math.sqrt(\n        positionX * positionX * oneOverRadiiSquared.x +\n          positionY * positionY * oneOverRadiiSquared.y +\n          positionZ * positionZ * oneOverRadiiSquared.z\n      );\n\n    return scratchPosition.multiplyScalar(beta).to(result);\n  }\n\n  // Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\n  // its components by the result of `Ellipsoid#oneOverRadii`\n  transformPositionToScaledSpace(position, result = [0, 0, 0]) {\n    return scratchPosition\n      .from(position)\n      .scale(this.oneOverRadii)\n      .to(result);\n  }\n\n  // Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\n  // its components by the result of `Ellipsoid#radii`.\n  transformPositionFromScaledSpace(position, result = [0, 0, 0]) {\n    return scratchPosition\n      .from(position)\n      .scale(this.radii)\n      .to(result);\n  }\n\n  // Computes a point which is the intersection of the surface normal with the z-axis.\n  getSurfaceNormalIntersectionWithZAxis(position, buffer = 0.0, result = [0, 0, 0]) {\n    // Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)\n    assert(equals(this.radii.x, this.radii.y, _MathUtils.EPSILON15));\n    assert(this.radii.z > 0);\n\n    scratchPosition.from(position);\n    const z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n\n    if (Math.abs(z) >= this.radii.z - buffer) {\n      return undefined;\n    }\n\n    return scratchPosition.set(0.0, 0.0, z).to(result);\n  }\n}\n"],"file":"ellipsoid.js"}