{"version":3,"sources":["../../src/polygon.js"],"names":["equals","Polygon","constructor","points","isClosed","length","Object","freeze","getSignedArea","area","forEachSegment","p1","p2","getArea","Math","abs","getWindingDirection","sign","visitor","i"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,eAArB;AAEA,eAAe,MAAMC,OAAN,CAAc;AAC3BC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBJ,MAAM,CAAC,KAAKG,MAAL,CAAY,KAAKA,MAAL,CAAYE,MAAZ,GAAqB,CAAjC,CAAD,EAAsC,KAAKF,MAAL,CAAY,CAAZ,CAAtC,CAAtB;AACAG,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;AAGDC,EAAAA,aAAa,GAAG;AACd,QAAIC,IAAI,GAAG,CAAX;AACA,SAAKC,cAAL,CAAoB,CAACC,EAAD,EAAKC,EAAL,KAAY;AAE9BH,MAAAA,IAAI,IAAI,CAACE,EAAE,CAAC,CAAD,CAAF,GAAQC,EAAE,CAAC,CAAD,CAAX,KAAmBD,EAAE,CAAC,CAAD,CAAF,GAAQC,EAAE,CAAC,CAAD,CAA7B,CAAR;AACD,KAHD;AAIA,WAAOH,IAAI,GAAG,CAAd;AACD;;AAEDI,EAAAA,OAAO,GAAG;AACR,WAAOC,IAAI,CAACC,GAAL,CAAS,KAAKP,aAAL,EAAT,CAAP;AACD;;AAEDQ,EAAAA,mBAAmB,GAAG;AACpB,WAAOF,IAAI,CAACG,IAAL,CAAU,KAAKT,aAAL,EAAV,CAAP;AACD;;AAEDE,EAAAA,cAAc,CAACQ,OAAD,EAAU;AACtB,UAAMb,MAAM,GAAG,KAAKF,MAAL,CAAYE,MAA3B;;AACA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,GAAG,CAA7B,EAAgCc,CAAC,EAAjC,EAAqC;AACnCD,MAAAA,OAAO,CAAC,KAAKf,MAAL,CAAYgB,CAAZ,CAAD,EAAiB,KAAKhB,MAAL,CAAYgB,CAAC,GAAG,CAAhB,CAAjB,EAAqCA,CAArC,EAAwCA,CAAC,GAAG,CAA5C,CAAP;AACD;;AACD,QAAI,CAAC,KAAKf,QAAV,EAAoB;AAElBc,MAAAA,OAAO,CAAC,KAAKf,MAAL,CAAYE,MAAM,GAAG,CAArB,CAAD,EAA0B,KAAKF,MAAL,CAAY,CAAZ,CAA1B,EAA0CE,MAAM,GAAG,CAAnD,EAAsD,CAAtD,CAAP;AACD;AACF;;AAlC0B","sourcesContent":["import {equals} from '@math.gl/core';\n\nexport default class Polygon {\n  constructor(points) {\n    this.points = points;\n    this.isClosed = equals(this.points[this.points.length - 1], this.points[0]);\n    Object.freeze(this);\n  }\n\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  getSignedArea() {\n    let area = 0;\n    this.forEachSegment((p1, p2) => {\n      // the \"cancelling\" cross-products: (p1.x + p2.x) * (p1.y - p2.y)\n      area += (p1[0] + p2[0]) * (p1[1] - p2[1]);\n    });\n    return area / 2;\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    const length = this.points.length;\n    for (let i = 0; i < length - 1; i++) {\n      visitor(this.points[i], this.points[i + 1], i, i + 1);\n    }\n    if (!this.isClosed) {\n      // Call function with points and indices\n      visitor(this.points[length - 1], this.points[0], length - 1, 0);\n    }\n  }\n}\n"],"file":"polygon.js"}