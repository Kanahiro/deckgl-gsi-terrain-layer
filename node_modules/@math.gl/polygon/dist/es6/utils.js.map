{"version":3,"sources":["../../src/utils.js"],"names":["push","target","source","size","length","startIndex","isDuplicate","i","copy","getPointAtIndex","positions","index","offset","out","startI"],"mappings":"AAAA,OAAO,SAASA,IAAT,CAAcC,MAAd,EAAsBC,MAAtB,EAA8B;AACnC,QAAMC,IAAI,GAAGD,MAAM,CAACE,MAApB;AACA,QAAMC,UAAU,GAAGJ,MAAM,CAACG,MAA1B;;AAGA,MAAIC,UAAU,GAAG,CAAjB,EAAoB;AAClB,QAAIC,WAAW,GAAG,IAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7B,UAAIN,MAAM,CAACI,UAAU,GAAGF,IAAb,GAAoBI,CAArB,CAAN,KAAkCL,MAAM,CAACK,CAAD,CAA5C,EAAiD;AAC/CD,QAAAA,WAAW,GAAG,KAAd;AACA;AACD;AACF;;AACD,QAAIA,WAAJ,EAAiB;AACf,aAAO,KAAP;AACD;AACF;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BN,IAAAA,MAAM,CAACI,UAAU,GAAGE,CAAd,CAAN,GAAyBL,MAAM,CAACK,CAAD,CAA/B;AACD;;AACD,SAAO,IAAP;AACD;AAED,OAAO,SAASC,IAAT,CAAcP,MAAd,EAAsBC,MAAtB,EAA8B;AACnC,QAAMC,IAAI,GAAGD,MAAM,CAACE,MAApB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BN,IAAAA,MAAM,CAACM,CAAD,CAAN,GAAYL,MAAM,CAACK,CAAD,CAAlB;AACD;AACF;AAED,OAAO,SAASE,eAAT,CAAyBC,SAAzB,EAAoCC,KAApC,EAA2CR,IAA3C,EAAiDS,MAAjD,EAAyDC,GAAG,GAAG,EAA/D,EAAmE;AACxE,QAAMC,MAAM,GAAGF,MAAM,GAAGD,KAAK,GAAGR,IAAhC;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BM,IAAAA,GAAG,CAACN,CAAD,CAAH,GAASG,SAAS,CAACI,MAAM,GAAGP,CAAV,CAAlB;AACD;;AACD,SAAOM,GAAP;AACD","sourcesContent":["export function push(target, source) {\n  const size = source.length;\n  const startIndex = target.length;\n\n  // dedupe, if source is the same point as the last vertex\n  if (startIndex > 0) {\n    let isDuplicate = true;\n    for (let i = 0; i < size; i++) {\n      if (target[startIndex - size + i] !== source[i]) {\n        isDuplicate = false;\n        break;\n      }\n    }\n    if (isDuplicate) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < size; i++) {\n    target[startIndex + i] = source[i];\n  }\n  return true;\n}\n\nexport function copy(target, source) {\n  const size = source.length;\n  for (let i = 0; i < size; i++) {\n    target[i] = source[i];\n  }\n}\n\nexport function getPointAtIndex(positions, index, size, offset, out = []) {\n  const startI = offset + index * size;\n  for (let i = 0; i < size; i++) {\n    out[i] = positions[startI + i];\n  }\n  return out;\n}\n"],"file":"utils.js"}