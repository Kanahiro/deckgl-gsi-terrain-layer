{"version":3,"sources":["../../src/polygon.js"],"names":["equals","Polygon","points","isClosed","length","Object","freeze","area","forEachSegment","p1","p2","Math","abs","getSignedArea","sign","visitor","i"],"mappings":";;AAAA,SAAQA,MAAR,QAAqB,eAArB;;IAEqBC,O;AACnB,mBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBH,MAAM,CAAC,KAAKE,MAAL,CAAY,KAAKA,MAAL,CAAYE,MAAZ,GAAqB,CAAjC,CAAD,EAAsC,KAAKF,MAAL,CAAY,CAAZ,CAAtC,CAAtB;AACAG,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;;;oCAGe;AACd,UAAIC,IAAI,GAAG,CAAX;AACA,WAAKC,cAAL,CAAoB,UAACC,EAAD,EAAKC,EAAL,EAAY;AAE9BH,QAAAA,IAAI,IAAI,CAACE,EAAE,CAAC,CAAD,CAAF,GAAQC,EAAE,CAAC,CAAD,CAAX,KAAmBD,EAAE,CAAC,CAAD,CAAF,GAAQC,EAAE,CAAC,CAAD,CAA7B,CAAR;AACD,OAHD;AAIA,aAAOH,IAAI,GAAG,CAAd;AACD;;;8BAES;AACR,aAAOI,IAAI,CAACC,GAAL,CAAS,KAAKC,aAAL,EAAT,CAAP;AACD;;;0CAEqB;AACpB,aAAOF,IAAI,CAACG,IAAL,CAAU,KAAKD,aAAL,EAAV,CAAP;AACD;;;mCAEcE,O,EAAS;AACtB,UAAMX,MAAM,GAAG,KAAKF,MAAL,CAAYE,MAA3B;;AACA,WAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAAM,GAAG,CAA7B,EAAgCY,CAAC,EAAjC,EAAqC;AACnCD,QAAAA,OAAO,CAAC,KAAKb,MAAL,CAAYc,CAAZ,CAAD,EAAiB,KAAKd,MAAL,CAAYc,CAAC,GAAG,CAAhB,CAAjB,EAAqCA,CAArC,EAAwCA,CAAC,GAAG,CAA5C,CAAP;AACD;;AACD,UAAI,CAAC,KAAKb,QAAV,EAAoB;AAElBY,QAAAA,OAAO,CAAC,KAAKb,MAAL,CAAYE,MAAM,GAAG,CAArB,CAAD,EAA0B,KAAKF,MAAL,CAAY,CAAZ,CAA1B,EAA0CE,MAAM,GAAG,CAAnD,EAAsD,CAAtD,CAAP;AACD;AACF;;;;;;SAlCkBH,O","sourcesContent":["import {equals} from '@math.gl/core';\n\nexport default class Polygon {\n  constructor(points) {\n    this.points = points;\n    this.isClosed = equals(this.points[this.points.length - 1], this.points[0]);\n    Object.freeze(this);\n  }\n\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  getSignedArea() {\n    let area = 0;\n    this.forEachSegment((p1, p2) => {\n      // the \"cancelling\" cross-products: (p1.x + p2.x) * (p1.y - p2.y)\n      area += (p1[0] + p2[0]) * (p1[1] - p2[1]);\n    });\n    return area / 2;\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    const length = this.points.length;\n    for (let i = 0; i < length - 1; i++) {\n      visitor(this.points[i], this.points[i + 1], i, i + 1);\n    }\n    if (!this.isClosed) {\n      // Call function with points and indices\n      visitor(this.points[length - 1], this.points[0], length - 1, 0);\n    }\n  }\n}\n"],"file":"polygon.js"}