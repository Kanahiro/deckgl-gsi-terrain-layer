{"version":3,"sources":["../../src/cut-by-mercator-bounds.js"],"names":["DEFAULT_MAX_LATITUDE","cutPolylineByMercatorBounds","positions","options","size","startIndex","endIndex","length","normalize","newPositions","slice","wrapLongitudesForShortestPath","parts","broken","gridResolution","gridOffset","part","shiftLongitudesIntoRange","cutPolygonByMercatorBounds","holeIndices","edgeTypes","newHoleIndices","srcStartIndex","targetIndex","ringIndex","srcEndIndex","targetStartIndex","splitIndex","findSplitIndex","i","insertPoleVertices","maxLatitude","pop","maxLat","pointIndex","lat","Math","abs","firstLng","lastLng","p","round","sign","prevLng","lng","delta","refLng","pointCount"],"mappings":"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","sourcesContent":["import {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n// https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png\nexport function cutPolylineByMercatorBounds(positions, options = {}) {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options;\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n// https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png\nexport function cutPolygonByMercatorBounds(positions, holeIndices, options = {}) {\n  const {size = 2, normalize = true, edgeTypes = false} = options;\n  holeIndices = holeIndices || [];\n  const newPositions = [];\n  const newHoleIndices = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(positions, size, startIndex, endIndex) {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions,\n  size,\n  startIndex,\n  endIndex,\n  maxLatitude = DEFAULT_MAX_LATITUDE\n) {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {\n  let prevLng = positions[0];\n  let lng;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions, size) {\n  let refLng;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n"],"file":"cut-by-mercator-bounds.js"}