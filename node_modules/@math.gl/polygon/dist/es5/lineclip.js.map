{"version":3,"sources":["../../src/lineclip.js"],"names":["clipPolyline","positions","bbox","options","size","startIndex","endIndex","length","numPoints","result","part","a","b","codeA","codeB","lastCode","i","bitCode","push","intersect","clipPolygon","p","prev","inside","prevInside","edge","out","t","snap","code"],"mappings":"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","sourcesContent":["/*\n  Adapted from https://github.com/mapbox/lineclip to work with flat arrays\n  and 3d positions\n\n  ISC License\n\n  Copyright (c) 2015, Mapbox\n\n  Permission to use, copy, modify, and/or distribute this software for any purpose\n  with or without fee is hereby granted, provided that the above copyright notice\n  and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n  THIS SOFTWARE.\n\n */\n\n/* eslint-disable max-statements, max-depth */\n\nimport {push, copy, getPointAtIndex} from './utils';\n\n// Cohen-Sutherland line clipping algorithm, adapted to efficiently\n// handle polylines rather than just segments\nexport function clipPolyline(positions, bbox, options = {}) {\n  const {size = 2, startIndex = 0, endIndex = positions.length} = options;\n  const numPoints = (endIndex - startIndex) / size;\n  const result = [];\n  let part = [];\n  let a;\n  let b;\n  let codeA = -1;\n  let codeB;\n  let lastCode;\n\n  for (let i = 1; i < numPoints; i++) {\n    a = getPointAtIndex(positions, i - 1, size, startIndex, a);\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    if (codeA < 0) {\n      codeA = bitCode(a, bbox);\n    }\n    codeB = lastCode = bitCode(b, bbox);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (!(codeA | codeB)) {\n        // accept\n        push(part, a);\n\n        if (codeB !== lastCode) {\n          // segment went outside\n          push(part, b);\n\n          if (i < numPoints - 1) {\n            // start a new line\n            result.push(part);\n            part = [];\n          }\n        } else if (i === numPoints - 1) {\n          push(part, b);\n        }\n        break;\n      } else if (codeA & codeB) {\n        // trivial reject\n        break;\n      } else if (codeA) {\n        // a outside, intersect with clip edge\n        intersect(a, b, codeA, bbox, a);\n        codeA = bitCode(a, bbox);\n      } else {\n        // b outside\n        intersect(a, b, codeB, bbox, b);\n        codeB = bitCode(b, bbox);\n      }\n    }\n\n    codeA = lastCode;\n  }\n\n  if (part.length) result.push(part);\n\n  return result;\n}\n\n// Sutherland-Hodgeman polygon clipping algorithm\n// polygon must be closed (first vertex == last vertex)\nexport function clipPolygon(positions, bbox, options = {}) {\n  const {size = 2, endIndex = positions.length} = options;\n  let {startIndex = 0} = options;\n  let numPoints = (endIndex - startIndex) / size;\n  let result;\n  let p;\n  let prev;\n  let inside;\n  let prevInside;\n\n  // clip against each side of the clip rectangle\n  for (let edge = 1; edge <= 8; edge *= 2) {\n    result = [];\n    prev = getPointAtIndex(positions, numPoints - 1, size, startIndex, prev);\n    prevInside = !(bitCode(prev, bbox) & edge);\n\n    for (let i = 0; i < numPoints; i++) {\n      p = getPointAtIndex(positions, i, size, startIndex, p);\n      inside = !(bitCode(p, bbox) & edge);\n\n      // if segment goes through the clip window, add an intersection\n      if (inside !== prevInside) push(result, intersect(prev, p, edge, bbox));\n\n      if (inside) push(result, p); // add a point if it's inside\n\n      copy(prev, p);\n      prevInside = inside;\n    }\n\n    // close loop\n    positions = result;\n    startIndex = 0;\n    numPoints = result.length / size;\n\n    if (!numPoints) break;\n  }\n\n  return result;\n}\n\n// intersect a segment against one of the 4 lines that make up the bbox\n\nexport function intersect(a, b, edge, bbox, out = []) {\n  let t;\n  // Forces out[snapI] to be on the bbox edge\n  // Interpolation introduces precision issue which may cause lineclip to be\n  // stuck in an infinite loop\n  let snap;\n  if (edge & 8) {\n    // top\n    t = (bbox[3] - a[1]) / (b[1] - a[1]);\n    snap = 3;\n  } else if (edge & 4) {\n    // bottom\n    t = (bbox[1] - a[1]) / (b[1] - a[1]);\n    snap = 1;\n  } else if (edge & 2) {\n    // right\n    t = (bbox[2] - a[0]) / (b[0] - a[0]);\n    snap = 2;\n  } else if (edge & 1) {\n    // left\n    t = (bbox[0] - a[0]) / (b[0] - a[0]);\n    snap = 0;\n  } else {\n    return null;\n  }\n  for (let i = 0; i < a.length; i++) {\n    out[i] = (snap & 1) === i ? bbox[snap] : t * b[i] + (1 - t) * a[i];\n  }\n  return out;\n}\n\n// bit code reflects the point position relative to the bbox:\n\n//         left  mid  right\n//    top  1001  1000  1010\n//    mid  0001  0000  0010\n// bottom  0101  0100  0110\n\nexport function bitCode(p, bbox) {\n  let code = 0;\n\n  if (p[0] < bbox[0]) code |= 1;\n  // left\n  else if (p[0] > bbox[2]) code |= 2; // right\n\n  if (p[1] < bbox[1]) code |= 4;\n  // bottom\n  else if (p[1] > bbox[3]) code |= 8; // top\n\n  return code;\n}\n"],"file":"lineclip.js"}