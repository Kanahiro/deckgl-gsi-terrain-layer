{"version":3,"sources":["../../../src/lib/oriented-bounding-box.js"],"names":["scratchVector","Vector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","fromOrientedBoundingBoxScratchU","fromOrientedBoundingBoxScratchV","fromOrientedBoundingBoxScratchW","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","center","halfAxes","from","Matrix3","halfSize","quaternion","quaternionObject","Quaternion","directionsMatrix","fromQuaternion","right","Boolean","equals","result","BoundingSphere","u","getColumn","v","w","cornerVector","copy","add","radius","magnitude","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","INTERSECTION","OUTSIDE","INSIDE","INTERSECTING","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","normalize","distanceSquared","d","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","xAxis","yAxis","zAxis","len","normXAxis","normYAxis","normZAxis","fromMatrix3"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Quaternion} from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport {INTERSECTION} from '../constants';\n\nconst scratchVector = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst fromOrientedBoundingBoxScratchU = new Vector3();\nconst fromOrientedBoundingBoxScratchV = new Vector3();\nconst fromOrientedBoundingBoxScratchW = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\nexport default class OrientedBoundingBox {\n  constructor(center = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  get halfSize() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  get quaternion() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  // Generate OrientedBoundingBox from OBB based on quaternion\n  fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  // Duplicates a OrientedBoundingBox instance.\n  clone() {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  // Compares the provided OrientedBoundingBox componentwise and returns\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  // Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box.\n  getBoundingSphere(result = new BoundingSphere()) {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, fromOrientedBoundingBoxScratchU);\n    const v = halfAxes.getColumn(1, fromOrientedBoundingBoxScratchV);\n    const w = halfAxes.getColumn(2, fromOrientedBoundingBoxScratchW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector\n      .copy(u)\n      .add(v)\n      .add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  /**\n   * Determines which side of a plane the oriented bounding box is located.\n   *\n   * @param plane The plane to test against.\n   * @returns\n   *  - `INTERSECTION.INSIDE` if the entire box is on the side of the plane the normal is pointing.\n   *  - `INTERSECTION.OUTSIDE` if the entire box is on the opposite side.\n   *  - `INTERSECTION.INTERSECTING` if the box intersects the plane.\n   */\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  // Computes the estimated distance from the closest point on a bounding box to a point.\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding box to a point.\n  // See Geometric Tools for Computer Graphics 10.4.2\n\n  // eslint-disable-next-line max-statements\n  distanceSquaredTo(point) {\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  // The distances calculated by the vector from the center of the bounding box\n  // to position projected onto direction.\n\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(position, direction, result = [-0, -0]) {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner\n      .copy(u)\n      .add(v)\n      .add(w)\n      .add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner\n      .copy(center)\n      .add(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  getTransform() {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n  }\n}\n"],"file":"oriented-bounding-box.js"}