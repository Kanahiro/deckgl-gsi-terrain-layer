{"version":3,"sources":["../../../src/lib/axis-aligned-bounding-box.js"],"names":["Vector3","INTERSECTION","scratchVector","scratchNormal","AxisAlignedBoundingBox","constructor","minimum","maximum","center","copy","add","scale","halfDiagonal","subtract","clone","equals","right","Boolean","intersectPlane","plane","normal","from","e","x","Math","abs","y","z","s","dot","distance","INSIDE","OUTSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","distanceSquared","d"],"mappings":"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","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {INTERSECTION} from '../constants';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\n\nexport default class AxisAlignedBoundingBox {\n  constructor(minimum = [0, 0, 0], maximum = [0, 0, 0], center = null) {\n    // If center was not defined, compute it.\n    center =\n      center ||\n      scratchVector\n        .copy(minimum)\n        .add(maximum)\n        .scale(0.5);\n    /**\n     * The center point of the bounding box.\n     * @type {Vector3}\n     */\n    this.center = new Vector3(center);\n    /**\n     * The positive half diagonal of the bounding box.\n     * @type {Vector3}\n     */\n    this.halfDiagonal = new Vector3(maximum).subtract(this.center);\n\n    /**\n     * The minimum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.minimum = new Vector3(minimum);\n\n    /**\n     * The maximum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.maximum = new Vector3(maximum);\n  }\n\n  /**\n   * Duplicates a AxisAlignedBoundingBox instance.\n   *\n   * @returns {AxisAlignedBoundingBox} A new AxisAlignedBoundingBox instance.\n   */\n  clone() {\n    return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);\n  }\n\n  /**\n   * Compares the provided AxisAlignedBoundingBox componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox to compare with.\n   * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n   */\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum))\n    );\n  }\n\n  /**\n   * Determines which side of a plane a box is located.\n   */\n  intersectPlane(plane) {\n    const {halfDiagonal} = this;\n    const normal = scratchNormal.from(plane.normal);\n    const e =\n      halfDiagonal.x * Math.abs(normal.x) +\n      halfDiagonal.y * Math.abs(normal.y) +\n      halfDiagonal.z * Math.abs(normal.z);\n    const s = this.center.dot(normal) + plane.distance; // signed distance from center\n\n    if (s - e > 0) {\n      return INTERSECTION.INSIDE;\n    }\n\n    if (s + e < 0) {\n      // Not in front because normals point inward\n      return INTERSECTION.OUTSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  // Computes the estimated distance from the closest point on a bounding box to a point.\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding box to a point.\n  // A simplified version of OrientedBoundingBox.distanceSquaredTo\n  distanceSquaredTo(point) {\n    const offset = scratchVector.from(point).subtract(this.center);\n    const {halfDiagonal} = this;\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.x) - halfDiagonal.x;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.y) - halfDiagonal.y;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.z) - halfDiagonal.z;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n}\n"],"file":"axis-aligned-bounding-box.js"}