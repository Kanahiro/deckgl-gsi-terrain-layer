{"version":3,"sources":["../../../src/lib/culling-volume.js"],"names":["Vector3","Vector4","assert","INTERSECTION","Plane","faces","scratchPlaneCenter","scratchPlaneNormal","scratchPlane","CullingVolume","MASK_OUTSIDE","MASK_INSIDE","MASK_INDETERMINATE","constructor","planes","every","plane","fromBoundingSphere","boundingSphere","length","center","radius","planeIndex","faceNormal","plane0","plane1","plane0Center","copy","scale","add","plane0Distance","dot","fromPointNormal","plane1Center","negatedFaceNormal","negate","plane1Distance","computeVisibility","boundingVolume","intersect","INSIDE","result","intersectPlane","OUTSIDE","INTERSECTING","computeVisibilityWithPlaneMask","parentPlaneMask","Number","isFinite","mask","k","flag"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Vector4, assert} from '@math.gl/core';\nimport {INTERSECTION} from '../constants';\nimport Plane from './plane';\n\n// X, Y, Z Unit vectors\nconst faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];\n\nconst scratchPlaneCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nconst scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);\n\n// A culling volume defined by planes.\nexport default class CullingVolume {\n  // For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\n  // represents the case where the object bounding volume is entirely outside the culling volume.\n  static get MASK_OUTSIDE() {\n    return 0xffffffff;\n  }\n\n  // For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n  // represents the case where the object bounding volume is entirely inside the culling volume.\n  static get MASK_INSIDE() {\n    return 0x00000000;\n  }\n\n  // For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n  // represents the case where the object bounding volume (may) intersect all planes of the culling volume.\n  static get MASK_INDETERMINATE() {\n    return 0x7fffffff;\n  }\n\n  constructor(planes = []) {\n    // {Cartesian4[]} [planes] An array of clipping planes.\n    this.planes = planes;\n    assert(this.planes.every(plane => plane instanceof Plane));\n  }\n\n  // Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\n  // The planes are aligned to the x, y, and z axes in world coordinates.\n  fromBoundingSphere(boundingSphere) {\n    this.planes.length = 2 * faces.length;\n\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n\n    let planeIndex = 0;\n\n    for (const faceNormal of faces) {\n      let plane0 = this.planes[planeIndex];\n      let plane1 = this.planes[planeIndex + 1];\n\n      if (!plane0) {\n        plane0 = this.planes[planeIndex] = new Plane();\n      }\n      if (!plane1) {\n        plane1 = this.planes[planeIndex + 1] = new Plane();\n      }\n\n      const plane0Center = scratchPlaneCenter\n        .copy(faceNormal)\n        .scale(-radius)\n        .add(center);\n      const plane0Distance = -faceNormal.dot(plane0Center);\n\n      plane0.fromPointNormal(plane0Center, faceNormal);\n\n      const plane1Center = scratchPlaneCenter\n        .copy(faceNormal)\n        .scale(radius)\n        .add(center);\n\n      const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();\n\n      const plane1Distance = -negatedFaceNormal.dot(plane1Center);\n\n      plane1.fromPointNormal(plane1Center, negatedFaceNormal);\n\n      planeIndex += 2;\n    }\n\n    return this;\n  }\n\n  // Determines whether a bounding volume intersects the culling volume.\n  computeVisibility(boundingVolume) {\n    assert(boundingVolume);\n    // const planes = this.planes;\n    let intersect = INTERSECTION.INSIDE;\n    for (const plane of this.planes) {\n      const result = boundingVolume.intersectPlane(plane);\n      switch (result) {\n        case INTERSECTION.OUTSIDE:\n          // We are done\n          return INTERSECTION.OUTSIDE;\n\n        case INTERSECTION.INTERSECTING:\n          // If no other intersection is outside, return INTERSECTING\n          intersect = INTERSECTION.INTERSECTING;\n          break;\n\n        default:\n      }\n    }\n\n    return intersect;\n  }\n\n  // Determines whether a bounding volume intersects the culling volume.\n  /*\n   * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\n   *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\n   *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]\n   *                                 and that plane check can be skipped.\n   */\n  computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {\n    assert(boundingVolume, 'boundingVolume is required.');\n    assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');\n\n    if (\n      parentPlaneMask === CullingVolume.MASK_OUTSIDE ||\n      parentPlaneMask === CullingVolume.MASK_INSIDE\n    ) {\n      // parent is completely outside or completely inside, so this child is as well.\n      return parentPlaneMask;\n    }\n\n    // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n    // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n    let mask = CullingVolume.MASK_INSIDE;\n\n    const planes = this.planes;\n    for (let k = 0; k < this.planes.length; ++k) {\n      // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n      const flag = k < 31 ? 1 << k : 0;\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        // boundingVolume is known to be INSIDE this plane.\n        continue;\n      }\n\n      const plane = planes[k];\n      const result = boundingVolume.intersectPlane(plane);\n      if (result === INTERSECTION.OUTSIDE) {\n        return CullingVolume.MASK_OUTSIDE;\n      } else if (result === INTERSECTION.INTERSECTING) {\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n}\n"],"file":"culling-volume.js"}