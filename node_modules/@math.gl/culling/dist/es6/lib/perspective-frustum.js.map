{"version":3,"sources":["../../../src/lib/perspective-frustum.js"],"names":["assert","PerspectiveOffCenterFrustum","defined","val","PerspectiveFrustum","constructor","options","near","far","xOffset","yOffset","_offCenterFrustum","fov","_fov","undefined","_fovy","_sseDenominator","aspectRatio","_aspectRatio","_near","_far","_xOffset","_yOffset","clone","equals","other","update","projectionMatrix","infiniteProjectionMatrix","fovy","sseDenominator","computeCullingVolume","position","direction","up","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","result","frustum","Number","isFinite","f","Math","PI","atan","tan","top","bottom","right","left"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\n// @ts-nocheck\n\nimport {assert} from '@math.gl/core';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\n\nconst defined = val => val !== null && typeof val !== 'undefined';\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {Number} [options.near=1.0] The distance of the near plane.\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\n * @param {Number} [options.xOffset=0.0] The offset in the x direction.\n * @param {Number} [options.yOffset=0.0] The offset in the y direction.\n *\n * @example\n * var frustum = new PerspectiveFrustum({\n *     fov : Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport default class PerspectiveFrustum {\n  constructor(options = {}) {\n    options = {\n      near: 1.0,\n      far: 500000000.0,\n      xOffset: 0.0,\n      yOffset: 0.0,\n      ...options\n    };\n\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n\n    /**\n     * The angle of the field of view (FOV), in radians.  This angle will be used\n     * as the horizontal FOV if the width is greater than the height, otherwise\n     * it will be the vertical FOV.\n     * @type {Number}\n     * @default undefined\n     */\n    this.fov = options.fov;\n    this._fov = undefined;\n    this._fovy = undefined;\n\n    this._sseDenominator = undefined;\n\n    /**\n     * The aspect ratio of the frustum's width to it's height.\n     * @type {Number}\n     * @default undefined\n     */\n    this.aspectRatio = options.aspectRatio;\n    this._aspectRatio = undefined;\n\n    /**\n     * The distance of the near plane.\n     * @type {Number}\n     * @default 1.0\n     */\n    this.near = options.near;\n    this._near = this.near;\n\n    /**\n     * The distance of the far plane.\n     * @type {Number}\n     * @default 500000000.0\n     */\n    this.far = options.far;\n    this._far = this.far;\n\n    /**\n     * Offsets the frustum in the x direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.xOffset = options.xOffset;\n    this._xOffset = this.xOffset;\n\n    /**\n     * Offsets the frustum in the y direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.yOffset = options.yOffset;\n    this._yOffset = this.yOffset;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   *\n   * @param {PerspectiveFrustum} [result] The object onto which to store the result.\n   * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n   */\n  clone() {\n    return new PerspectiveFrustum({\n      aspectRatio: this.aspectRatio,\n      fov: this.fov,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other) {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n\n    update(this);\n    update(other);\n\n    return (\n      this.fov === other.fov &&\n      this.aspectRatio === other.aspectRatio &&\n      this.near === other.near &&\n      this.far === other.far &&\n      this._offCenterFrustum.equals(other._offCenterFrustum)\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  get projectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.projectionMatrix;\n  }\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Number}\n   * @readonly\n   * @default undefined\n   */\n  get fovy() {\n    update(this);\n    return this._fovy;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get sseDenominator() {\n    update(this);\n    return this._sseDenominator;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   *\n   * @param {Vector3} position The eye position.\n   * @param {Vector3} direction The view direction.\n   * @param {Vector3} up The up direction.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(position, direction, up) {\n    update(this);\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @param {Number} drawingBufferWidth The width of the drawing buffer.\n   * @param {Number} drawingBufferHeight The height of the drawing buffer.\n   * @param {Number} distance The distance to the near plane in meters.\n   * @param {Vector2} result The object onto which to store the result.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * var distance = Vector3.magnitude(toCenterProj);\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n    update(this);\n    return this._offCenterFrustum.getPixelDimensions(\n      drawingBufferWidth,\n      drawingBufferHeight,\n      distance,\n      result\n    );\n  }\n}\n\n// eslint-disable-next-line complexity, max-statements\nfunction update(frustum) {\n  assert(\n    Number.isFinite(frustum.fov) &&\n      Number.isFinite(frustum.aspectRatio) &&\n      Number.isFinite(frustum.near) &&\n      Number.isFinite(frustum.far)\n  );\n  // 'fov, aspectRatio, near, or far parameters are not set.'\n\n  const f = frustum._offCenterFrustum;\n\n  if (\n    frustum.fov !== frustum._fov ||\n    frustum.aspectRatio !== frustum._aspectRatio ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far ||\n    frustum.xOffset !== frustum._xOffset ||\n    frustum.yOffset !== frustum._yOffset\n  ) {\n    assert(frustum.fov >= 0 && frustum.fov < Math.PI);\n    // throw new DeveloperError('fov must be in the range [0, PI).');\n\n    assert(frustum.aspectRatio > 0);\n    // throw new DeveloperError('aspectRatio must be positive.');\n\n    assert(frustum.near >= 0 && frustum.near < frustum.far);\n    // throw new DeveloperError('near must be greater than zero and less than far.');\n\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._fov = frustum.fov;\n    frustum._fovy =\n      frustum.aspectRatio <= 1\n        ? frustum.fov\n        : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n    frustum._xOffset = frustum.xOffset;\n    frustum._yOffset = frustum.yOffset;\n\n    f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n    f.bottom = -f.top;\n    f.right = frustum.aspectRatio * f.top;\n    f.left = -f.right;\n    f.near = frustum.near;\n    f.far = frustum.far;\n\n    f.right += frustum.xOffset;\n    f.left += frustum.xOffset;\n    f.top += frustum.yOffset;\n    f.bottom += frustum.yOffset;\n  }\n}\n"],"file":"perspective-frustum.js"}