{"version":3,"sources":["../../../src/lib/oriented-bounding-box.js"],"names":["Vector3","Matrix3","Quaternion","BoundingSphere","INTERSECTION","scratchVector","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","fromOrientedBoundingBoxScratchU","fromOrientedBoundingBoxScratchV","fromOrientedBoundingBoxScratchW","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","constructor","center","halfAxes","from","halfSize","xAxis","getColumn","yAxis","zAxis","len","quaternion","normXAxis","normalize","normYAxis","normZAxis","fromMatrix3","fromCenterHalfSizeQuaternion","quaternionObject","directionsMatrix","fromQuaternion","clone","equals","right","Boolean","getBoundingSphere","result","u","v","w","cornerVector","copy","add","radius","magnitude","intersectPlane","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","OUTSIDE","INSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","distanceSquared","d","computePlaneDistances","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","getTransform"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Quaternion} from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport {INTERSECTION} from '../constants';\n\nconst scratchVector = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst fromOrientedBoundingBoxScratchU = new Vector3();\nconst fromOrientedBoundingBoxScratchV = new Vector3();\nconst fromOrientedBoundingBoxScratchW = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\nexport default class OrientedBoundingBox {\n  constructor(center = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  get halfSize() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  get quaternion() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  // Generate OrientedBoundingBox from OBB based on quaternion\n  fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  // Duplicates a OrientedBoundingBox instance.\n  clone() {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  // Compares the provided OrientedBoundingBox componentwise and returns\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  // Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box.\n  getBoundingSphere(result = new BoundingSphere()) {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, fromOrientedBoundingBoxScratchU);\n    const v = halfAxes.getColumn(1, fromOrientedBoundingBoxScratchV);\n    const w = halfAxes.getColumn(2, fromOrientedBoundingBoxScratchW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector\n      .copy(u)\n      .add(v)\n      .add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  /**\n   * Determines which side of a plane the oriented bounding box is located.\n   *\n   * @param plane The plane to test against.\n   * @returns\n   *  - `INTERSECTION.INSIDE` if the entire box is on the side of the plane the normal is pointing.\n   *  - `INTERSECTION.OUTSIDE` if the entire box is on the opposite side.\n   *  - `INTERSECTION.INTERSECTING` if the box intersects the plane.\n   */\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  // Computes the estimated distance from the closest point on a bounding box to a point.\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding box to a point.\n  // See Geometric Tools for Computer Graphics 10.4.2\n\n  // eslint-disable-next-line max-statements\n  distanceSquaredTo(point) {\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  // The distances calculated by the vector from the center of the bounding box\n  // to position projected onto direction.\n\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(position, direction, result = [-0, -0]) {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner\n      .copy(u)\n      .add(v)\n      .add(w)\n      .add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner\n      .copy(center)\n      .add(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  getTransform() {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n  }\n}\n"],"file":"oriented-bounding-box.js"}