{"version":3,"sources":["../../../src/algorithms/bounding-sphere-from-points.js"],"names":["Vector3","BoundingSphere","fromPointsXMin","fromPointsYMin","fromPointsZMin","fromPointsXMax","fromPointsYMax","fromPointsZMax","fromPointsCurrentPos","fromPointsScratch","fromPointsRitterCenter","fromPointsMinBoxPt","fromPointsMaxBoxPt","fromPointsNaiveCenterScratch","volumeConstant","Math","PI","makeBoundingSphereFromPoints","positions","result","length","fromCenterRadius","currentPos","copy","xMin","yMin","zMin","xMax","yMax","zMax","position","x","y","z","xSpan","subtract","magnitudeSquared","ySpan","zSpan","diameter1","diameter2","maxSpan","ritterCenter","radiusSquared","ritterRadius","sqrt","minBoxPt","maxBoxPt","naiveCenter","add","multiplyByScalar","naiveRadius","r","magnitude","oldCenterToPointSquared","oldCenterToPoint","oldToNew","to","center","radius"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport BoundingSphere from '../lib/bounding-sphere';\n\n/* eslint-disable */\nconst fromPointsXMin = new Vector3();\nconst fromPointsYMin = new Vector3();\nconst fromPointsZMin = new Vector3();\nconst fromPointsXMax = new Vector3();\nconst fromPointsYMax = new Vector3();\nconst fromPointsZMax = new Vector3();\nconst fromPointsCurrentPos = new Vector3();\nconst fromPointsScratch = new Vector3();\nconst fromPointsRitterCenter = new Vector3();\nconst fromPointsMinBoxPt = new Vector3();\nconst fromPointsMaxBoxPt = new Vector3();\nconst fromPointsNaiveCenterScratch = new Vector3();\nconst volumeConstant = (4.0 / 3.0) * Math.PI;\n\nexport default function makeBoundingSphereFromPoints(positions, result = new BoundingSphere()) {\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n\n  const currentPos = fromPointsCurrentPos.copy(positions[0]);\n\n  const xMin = fromPointsXMin.copy(currentPos);\n  const yMin = fromPointsYMin.copy(currentPos);\n  const zMin = fromPointsZMin.copy(currentPos);\n\n  const xMax = fromPointsXMax.copy(currentPos);\n  const yMax = fromPointsYMax.copy(currentPos);\n  const zMax = fromPointsZMax.copy(currentPos);\n\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    const x = currentPos.x;\n    const y = currentPos.y;\n    const z = currentPos.z;\n\n    // Store points containing the the smallest and largest components\n    if (x < xMin.x) {\n      currentPos.copy(xMin);\n    }\n\n    if (x > xMax.x) {\n      currentPos.copy(xMax);\n    }\n\n    if (y < yMin.y) {\n      currentPos.copy(yMin);\n    }\n\n    if (y > yMax.y) {\n      currentPos.copy(yMax);\n    }\n\n    if (z < zMin.z) {\n      currentPos.copy(zMin);\n    }\n\n    if (z > zMax.z) {\n      currentPos.copy(zMax);\n    }\n  }\n\n  // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\n  const xSpan = fromPointsScratch\n    .copy(xMax)\n    .subtract(xMin)\n    .magnitudeSquared();\n  const ySpan = fromPointsScratch\n    .copy(yMax)\n    .subtract(yMin)\n    .magnitudeSquared();\n  const zSpan = fromPointsScratch\n    .copy(zMax)\n    .subtract(zMin)\n    .magnitudeSquared();\n\n  // Set the diameter endpoints to the largest span.\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  // Calculate the center of the initial sphere found by Ritter's algorithm\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n\n  // Calculate the radius of the initial sphere found by Ritter's algorithm\n  let radiusSquared = fromPointsScratch\n    .copy(diameter2)\n    .subtract(ritterCenter)\n    .magnitudeSquared();\n  let ritterRadius = Math.sqrt(radiusSquared);\n\n  // Find the center of the sphere found using the Naive method.\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n\n  const naiveCenter = fromPointsNaiveCenterScratch\n    .copy(minBoxPt)\n    .add(maxBoxPt)\n    .multiplyByScalar(0.5);\n\n  // Begin 2nd pass to find naive radius and modify the ritter sphere.\n  let naiveRadius = 0;\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    // Find the furthest point from the naive center to calculate the naive radius.\n    const r = fromPointsScratch\n      .copy(currentPos)\n      .subtract(naiveCenter)\n      .magnitude();\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n\n    // Make adjustments to the Ritter Sphere to include all points.\n    const oldCenterToPointSquared = fromPointsScratch\n      .copy(currentPos)\n      .subtract(ritterCenter)\n      .magnitudeSquared();\n\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      // Calculate new radius to include the point that lies outside\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      // Calculate center of new Ritter sphere\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n      ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n      ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    // @ts-ignore TS2540: Cannot assign to 'radius' because it is a read-only property.\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    // @ts-ignore TS2540: Cannot assign to 'radius' because it is a read-only property.\n    result.radius = naiveRadius;\n  }\n\n  return result;\n}\n"],"file":"bounding-sphere-from-points.js"}