{"version":3,"sources":["../../../src/lib/perspective-off-center-frustum.js"],"names":["Vector3","Matrix4","assert","CullingVolume","Plane","scratchPlaneUpVector","scratchPlaneRightVector","scratchPlaneNearCenter","scratchPlaneFarCenter","scratchPlaneNormal","PerspectiveOffCenterFrustum","options","near","far","left","_left","undefined","right","_right","top","_top","bottom","_bottom","_near","_far","_cullingVolume","_perspectiveMatrix","_infinitePerspective","other","position","direction","up","planes","copy","normalize","cross","nearCenter","multiplyByScalar","add","farCenter","normal","subtract","fromPointNormal","negate","drawingBufferWidth","drawingBufferHeight","distance","result","update","Number","isFinite","inverseNear","tanTheta","pixelHeight","pixelWidth","x","y","frustum","Infinity"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\n// @ts-nocheck\n\nimport {Vector3, Matrix4, assert} from '@math.gl/core';\nimport CullingVolume from './culling-volume';\nimport Plane from './plane';\n\nconst scratchPlaneUpVector = new Vector3();\nconst scratchPlaneRightVector = new Vector3();\nconst scratchPlaneNearCenter = new Vector3();\nconst scratchPlaneFarCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\n\nexport default class PerspectiveOffCenterFrustum {\n  /**\n   * The viewing frustum is defined by 6 planes.\n   * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n   * define the unit vector normal to the plane, and the w component is the distance of the\n   * plane from the origin/camera position.\n   *\n   * @alias PerspectiveOffCenterFrustum\n   * @constructor\n   *\n   * @param {Object} [options] An object with the following properties:\n   * @param {Number} [options.left] The left clipping plane distance.\n   * @param {Number} [options.right] The right clipping plane distance.\n   * @param {Number} [options.top] The top clipping plane distance.\n   * @param {Number} [options.bottom] The bottom clipping plane distance.\n   * @param {Number} [options.near=1.0] The near clipping plane distance.\n   * @param {Number} [options.far=500000000.0] The far clipping plane distance.\n   *\n   * @example\n   * const frustum = new PerspectiveOffCenterFrustum({\n   *     left : -1.0,\n   *     right : 1.0,\n   *     top : 1.0,\n   *     bottom : -1.0,\n   *     near : 1.0,\n   *     far : 100.0\n   * });\n   *\n   * @see PerspectiveFrustum\n   */\n  constructor(options = {}) {\n    options = {near: 1.0, far: 500000000.0, ...options};\n\n    /**\n     * Defines the left clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.left = options.left;\n    this._left = undefined;\n\n    /**\n     * Defines the right clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.right = options.right;\n    this._right = undefined;\n\n    /**\n     * Defines the top clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.top = options.top;\n    this._top = undefined;\n\n    /**\n     * Defines the bottom clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n\n    /**\n     * The distance of the near plane.\n     * @type {Number}\n     * @default 1.0\n     */\n    this.near = options.near;\n    this._near = this.near;\n\n    /**\n     * The distance of the far plane.\n     * @type {Number}\n     * @default 500000000.0\n     */\n    this.far = options.far;\n    this._far = this.far;\n\n    this._cullingVolume = new CullingVolume([\n      new Plane(),\n      new Plane(),\n      new Plane(),\n      new Plane(),\n      new Plane(),\n      new Plane()\n    ]);\n    this._perspectiveMatrix = new Matrix4();\n    this._infinitePerspective = new Matrix4();\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\n   * @returns {PerspectiveOffCenterFrustum} A new PerspectiveFrustum instance.\n   * */\n  clone() {\n    return new PerspectiveOffCenterFrustum({\n      right: this.right,\n      left: this.left,\n      top: this.top,\n      bottom: this.bottom,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {PerspectiveOffCenterFrustum} [other] The right hand side PerspectiveOffCenterFrustum.\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other) {\n    return (\n      other &&\n      other instanceof PerspectiveOffCenterFrustum &&\n      this.right === other.right &&\n      this.left === other.left &&\n      this.top === other.top &&\n      this.bottom === other.bottom &&\n      this.near === other.near &&\n      this.far === other.far\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\n   */\n  get projectionMatrix() {\n    update(this);\n    return this._perspectiveMatrix;\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveOffCenterFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix() {\n    update(this);\n    return this._infinitePerspective;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   *\n   * @param {Vector3} position The eye position.\n   * @param {Vector3} direction The view direction.\n   * @param {Vector3} up The up direction.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * const intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  // eslint-disable-next-line complexity, max-statements\n  computeCullingVolume(position, direction, up) {\n    assert(position, 'position is required.');\n    assert(direction, 'direction is required.');\n    assert(up, 'up is required.');\n\n    const planes = this._cullingVolume.planes;\n\n    up = scratchPlaneUpVector.copy(up).normalize();\n    const right = scratchPlaneRightVector\n      .copy(direction)\n      .cross(up)\n      .normalize();\n\n    const nearCenter = scratchPlaneNearCenter\n      .copy(direction)\n      .multiplyByScalar(this.near)\n      .add(position);\n\n    const farCenter = scratchPlaneFarCenter\n      .copy(direction)\n      .multiplyByScalar(this.far)\n      .add(position);\n\n    let normal = scratchPlaneNormal;\n\n    // Left plane computation\n    normal\n      .copy(right)\n      .multiplyByScalar(this.left)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(up);\n\n    planes[0].fromPointNormal(position, normal);\n\n    // Right plane computation\n    normal\n      .copy(right)\n      .multiplyByScalar(this.right)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(up)\n      .negate();\n\n    planes[1].fromPointNormal(position, normal);\n\n    // Bottom plane computation\n    normal\n      .copy(up)\n      .multiplyByScalar(this.bottom)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(right)\n      .negate();\n\n    planes[2].fromPointNormal(position, normal);\n\n    // Top plane computation\n    normal\n      .copy(up)\n      .multiplyByScalar(this.top)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(right);\n\n    planes[3].fromPointNormal(position, normal);\n\n    normal = new Vector3().copy(direction);\n\n    // Near plane computation\n    planes[4].fromPointNormal(nearCenter, normal);\n\n    // Far plane computation\n    normal.negate();\n\n    planes[5].fromPointNormal(farCenter, normal);\n\n    return this._cullingVolume;\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @param {Number} drawingBufferWidth The width of the drawing buffer.\n   * @param {Number} drawingBufferHeight The height of the drawing buffer.\n   * @param {Number} distance The distance to the near plane in meters.\n   * @param {Vector2} result The object onto which to store the result.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * const position = camera.position;\n   * const direction = camera.direction;\n   * const toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * const toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * const distance = Vector3.magnitude(toCenterProj);\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n    update(this);\n\n    assert(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));\n    // 'Both drawingBufferWidth and drawingBufferHeight are required.'\n    assert(drawingBufferWidth > 0);\n    // 'drawingBufferWidth must be greater than zero.'\n    assert(drawingBufferHeight > 0);\n    // 'drawingBufferHeight must be greater than zero.'\n    assert(distance > 0);\n    // 'distance is required.');\n    assert(result);\n    // 'A result object is required.');\n\n    const inverseNear = 1.0 / this.near;\n    let tanTheta = this.top * inverseNear;\n    const pixelHeight = (2.0 * distance * tanTheta) / drawingBufferHeight;\n    tanTheta = this.right * inverseNear;\n    const pixelWidth = (2.0 * distance * tanTheta) / drawingBufferWidth;\n\n    result.x = pixelWidth;\n    result.y = pixelHeight;\n    return result;\n  }\n}\n\n// eslint-disable-next-line complexity, max-statements\nfunction update(frustum) {\n  assert(\n    Number.isFinite(frustum.right) &&\n      Number.isFinite(frustum.left) &&\n      Number.isFinite(frustum.top) &&\n      Number.isFinite(frustum.bottom) &&\n      Number.isFinite(frustum.near) &&\n      Number.isFinite(frustum.far)\n  );\n  // throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\n\n  const {top, bottom, right, left, near, far} = frustum;\n\n  if (\n    top !== frustum._top ||\n    bottom !== frustum._bottom ||\n    left !== frustum._left ||\n    right !== frustum._right ||\n    near !== frustum._near ||\n    far !== frustum._far\n  ) {\n    assert(\n      frustum.near > 0 && frustum.near < frustum.far,\n      'near must be greater than zero and less than far.'\n    );\n\n    frustum._left = left;\n    frustum._right = right;\n    frustum._top = top;\n    frustum._bottom = bottom;\n    frustum._near = near;\n    frustum._far = far;\n    frustum._perspectiveMatrix = new Matrix4().frustum({\n      left,\n      right,\n      bottom,\n      top,\n      near,\n      far\n    });\n    frustum._infinitePerspective = new Matrix4().frustum({\n      left,\n      right,\n      bottom,\n      top,\n      near,\n      far: Infinity\n    });\n  }\n}\n"],"file":"perspective-off-center-frustum.js"}