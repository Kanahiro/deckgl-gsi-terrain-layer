{"version":3,"sources":["../../../src/lib/plane.js"],"names":["Vector3","equals","assert","scratchPosition","scratchNormal","Plane","normal","distance","fromNormalDistance","Number","isFinite","from","normalize","point","dot","a","b","c","d","set","len","plane","right","matrix4","copy","transformAsVector","scale","transform","fromPointNormal","result","pointDistance","getPointDistance","scaledNormal","subtract","to"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, equals, assert} from '@math.gl/core';\n\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\n\n// A plane in Hessian Normal Form\nexport default class Plane {\n  constructor(normal = [0, 0, 1], distance = 0) {\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  // Creates a plane from a normal and a point on the plane.\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n\n    return this;\n  }\n\n  // Creates a plane from the general equation\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  // Duplicates a Plane instance.\n  clone(plane) {\n    return new Plane(this.normal, this.distance);\n  }\n\n  // Compares the provided Planes by normal and distance\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  // Computes the signed shortest distance of a point to a plane.\n  // The sign of the distance determines which side of the plane the point is on.\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  // Transforms the plane by the given transformation matrix.\n  transform(matrix4) {\n    const normal = scratchNormal\n      .copy(this.normal)\n      .transformAsVector(matrix4)\n      .normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  // Projects a point onto the plane.\n  projectPointOntoPlane(point, result = [0, 0, 0]) {\n    point = scratchPosition.from(point);\n    // projectedPoint = point - (normal.point + scale) * normal\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n\n    return point.subtract(scaledNormal).to(result);\n  }\n}\n"],"file":"plane.js"}