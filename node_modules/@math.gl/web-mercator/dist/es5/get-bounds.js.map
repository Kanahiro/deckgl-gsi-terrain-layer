{"version":3,"sources":["../../src/get-bounds.js"],"names":["DEGREES_TO_RADIANS","Math","PI","getBounds","viewport","z","width","height","unproject","unprojectOps","targetZ","bottomLeft","bottomRight","topLeft","topRight","halfFov","atan","altitude","angleToGround","pitch","unprojectOnFarPlane","x","pixelUnprojectionMatrix","coord0","coord1","distanceScales","unitsPerMeter","t","coord","vec2","lerp","result"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,kBAAkB,GAAGC,IAAI,CAACC,EAAL,GAAU,GAArC;;AAOe,SAASC,SAAT,CAAmBC,QAAnB,EAAoC;AAAA,MAAPC,CAAO,uEAAH,CAAG;AAAA,MAC1CC,KAD0C,GACdF,QADc,CAC1CE,KAD0C;AAAA,MACnCC,MADmC,GACdH,QADc,CACnCG,MADmC;AAAA,MAC3BC,SAD2B,GACdJ,QADc,CAC3BI,SAD2B;AAEjD,MAAMC,YAAY,GAAG;AAACC,IAAAA,OAAO,EAAEL;AAAV,GAArB;AACA,MAAMM,UAAU,GAAGH,SAAS,CAAC,CAAC,CAAD,EAAID,MAAJ,CAAD,EAAcE,YAAd,CAA5B;AACA,MAAMG,WAAW,GAAGJ,SAAS,CAAC,CAACF,KAAD,EAAQC,MAAR,CAAD,EAAkBE,YAAlB,CAA7B;AACA,MAAII,OAAJ;AACA,MAAIC,QAAJ;AAEA,MAAMC,OAAO,GAAGd,IAAI,CAACe,IAAL,CAAU,MAAMZ,QAAQ,CAACa,QAAzB,CAAhB;AACA,MAAMC,aAAa,GAAG,CAAC,KAAKd,QAAQ,CAACe,KAAf,IAAwBnB,kBAA9C;;AAEA,MAAIe,OAAO,GAAGG,aAAa,GAAG,IAA9B,EAAoC;AAElCL,IAAAA,OAAO,GAAGO,mBAAmB,CAAChB,QAAD,EAAW,CAAX,EAAcC,CAAd,CAA7B;AACAS,IAAAA,QAAQ,GAAGM,mBAAmB,CAAChB,QAAD,EAAWE,KAAX,EAAkBD,CAAlB,CAA9B;AACD,GAJD,MAIO;AAELQ,IAAAA,OAAO,GAAGL,SAAS,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAASC,YAAT,CAAnB;AACAK,IAAAA,QAAQ,GAAGN,SAAS,CAAC,CAACF,KAAD,EAAQ,CAAR,CAAD,EAAaG,YAAb,CAApB;AACD;;AAED,SAAO,CAACE,UAAD,EAAaC,WAAb,EAA0BE,QAA1B,EAAoCD,OAApC,CAAP;AACD;;AAQD,SAASO,mBAAT,CAA6BhB,QAA7B,EAAuCiB,CAAvC,EAA0CX,OAA1C,EAAmD;AAAA,MAC1CY,uBAD0C,GACflB,QADe,CAC1CkB,uBAD0C;AAEjD,MAAMC,MAAM,GAAG,gCAAgBD,uBAAhB,EAAyC,CAACD,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAzC,CAAf;AACA,MAAMG,MAAM,GAAG,gCAAgBF,uBAAhB,EAAyC,CAACD,CAAD,EAAIjB,QAAQ,CAACG,MAAb,EAAqB,CAArB,EAAwB,CAAxB,CAAzC,CAAf;AAEA,MAAMF,CAAC,GAAGK,OAAO,GAAGN,QAAQ,CAACqB,cAAT,CAAwBC,aAAxB,CAAsC,CAAtC,CAApB;AACA,MAAMC,CAAC,GAAG,CAACtB,CAAC,GAAGkB,MAAM,CAAC,CAAD,CAAX,KAAmBC,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAArC,CAAV;AACA,MAAMK,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAU,EAAV,EAAcP,MAAd,EAAsBC,MAAtB,EAA8BG,CAA9B,CAAd;AAEA,MAAMI,MAAM,GAAG,qCAAcH,KAAd,CAAf;AACAG,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYrB,OAAZ;AACA,SAAOqB,MAAP;AACD","sourcesContent":["import {worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\nimport {transformVector} from './math-utils';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n/*\n * Returns the quad at the intersection of the frustum and the given z plane\n * @param {WebMercatorViewport} viewport\n * @param {Number} z - elevation in meters\n */\nexport default function getBounds(viewport, z = 0) {\n  const {width, height, unproject} = viewport;\n  const unprojectOps = {targetZ: z};\n  const bottomLeft = unproject([0, height], unprojectOps);\n  const bottomRight = unproject([width, height], unprojectOps);\n  let topLeft;\n  let topRight;\n\n  const halfFov = Math.atan(0.5 / viewport.altitude);\n  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;\n  // The top plane is parallel to the ground if halfFov == angleToGround\n  if (halfFov > angleToGround - 0.01) {\n    // intersect with the far plane\n    topLeft = unprojectOnFarPlane(viewport, 0, z);\n    topRight = unprojectOnFarPlane(viewport, width, z);\n  } else {\n    // intersect with the top plane\n    topLeft = unproject([0, 0], unprojectOps);\n    topRight = unproject([width, 0], unprojectOps);\n  }\n\n  return [bottomLeft, bottomRight, topRight, topLeft];\n}\n\n/*\n * Find a point on the far clipping plane of the viewport\n * @param {WebMercatorViewport} viewport\n * @param {Number} x - projected x in screen space\n * @param {Number} targetZ - the elevation of the point in meters\n */\nfunction unprojectOnFarPlane(viewport, x, targetZ) {\n  const {pixelUnprojectionMatrix} = viewport;\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, 0, 1, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);\n\n  const z = targetZ * viewport.distanceScales.unitsPerMeter[2];\n  const t = (z - coord0[2]) / (coord1[2] - coord0[2]);\n  const coord = vec2.lerp([], coord0, coord1, t);\n\n  const result = worldToLngLat(coord);\n  result[2] = targetZ;\n  return result;\n}\n"],"file":"get-bounds.js"}