{"version":3,"sources":["../../src/fly-to-viewport.js"],"names":["EPSILON","VIEWPORT_TRANSITION_PROPS","DEFAULT_OPTS","curve","speed","flyToViewport","startProps","endProps","t","opts","viewport","getFlyToTransitionParams","startZoom","startCenterXY","uDelta","w0","u1","S","rho","rho2","r0","key","startValue","endValue","s","w","Math","cosh","u","tanh","sinh","scaleIncrement","newZoom","newCenterWorld","vec2","scale","add","newCenter","longitude","latitude","zoom","getFlyToDuration","Object","assign","screenSpeed","maxDuration","length","duration","Number","isFinite","startCenter","startScale","endZoom","endCenter","endCenterXY","sub","max","width","height","w1","_u1","b0","b1","log","sqrt","r1"],"mappings":"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","sourcesContent":["import {lerp} from './math-utils';\nimport {scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default function flyToViewport(startProps, endProps, t, opts = {}) {\n  // Equations from above paper are referred where needed.\n\n  const viewport = {};\n\n  const {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0} = getFlyToTransitionParams(\n    startProps,\n    endProps,\n    opts\n  );\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n\n  const newCenter = worldToLngLat(newCenterWorld);\n  viewport.longitude = newCenter[0];\n  viewport.latitude = newCenter[1];\n  viewport.zoom = newZoom;\n  return viewport;\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(startProps, endProps, opts = {}) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length = 1000 * S;\n  let duration;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(startProps, endProps, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter);\n  const endCenterXY = lngLatToWorld(endCenter);\n  const uDelta = vec2.sub([], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta) * startScale;\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"],"file":"fly-to-viewport.js"}