{"version":3,"sources":["../../src/fit-bounds.js"],"names":["fitBounds","width","height","bounds","minExtent","maxZoom","padding","offset","west","south","east","north","Number","isFinite","p","top","bottom","left","right","viewport","WebMercatorViewport","longitude","latitude","zoom","nw","project","se","size","Math","max","abs","targetSize","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","unproject","min","log2"],"mappings":"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","sourcesContent":["// @ts-nocheck TODO padding\nimport WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\n\n// Returns map settings {latitude, longitude, zoom}\n// that will contain the provided corners within the provided width.\n// Only supports non-perspective mode.\n\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  minExtent = 0, // 0.01 would be about 1000 meters (degree is ~110KM)\n  maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(\n      Number.isFinite(padding.top) &&\n        Number.isFinite(padding.bottom) &&\n        Number.isFinite(padding.left) &&\n        Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = Math.min(maxZoom, viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY))));\n\n  assert(Number.isFinite(zoom));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}\n"],"file":"fit-bounds.js"}