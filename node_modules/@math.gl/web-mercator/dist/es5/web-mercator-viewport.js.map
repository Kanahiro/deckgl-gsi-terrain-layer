{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["WebMercatorViewport","width","height","latitude","longitude","zoom","pitch","bearing","altitude","nearZMultiplier","farZMultiplier","scale","Math","max","center","projectionMatrix","viewMatrix","distanceScales","_initMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","Object","freeze","vpm","mat4","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","viewport","xyz","topLeft","worldPosition","coord","x","y","y2","length","targetZ","undefined","z","targetZWorld","unitsPerMeter","X","Y","Z","Number","isFinite","metersPerUnit","lngLat","xy","pos","fromLocation","toLocation","vec2","add","negate","newCenter","getMapCenterByLngLatPosition","bounds","options","assign","corners","getBoundingRegion","west","min","map","p","east","south","north"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\n\nexport default class WebMercatorViewport {\n  // eslint-disable-next-line max-statements\n  constructor(\n    {\n      // Map state\n      width,\n      height,\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      altitude = 1.5,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = {width: 1, height: 1}\n  ) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.center = center;\n\n    this.distanceScales = getDistanceScales(this);\n\n    this._initMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  }\n\n  // Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n  // using viewport projection parameters\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  // Unproject pixel coordinates on screen onto world coordinates,\n  // (possibly [lon, lat]) on map.\n  unproject(xyz, {topLeft = true, targetZ = undefined} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  // Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  // Unproject world point [x,y] on map onto {lat, lon} on sphere\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  // Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  // Returns a new viewport that fit around the given rectangle.\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map(p => p[0]));\n    const east = Math.max(...corners.map(p => p[0]));\n    const south = Math.min(...corners.map(p => p[1]));\n    const north = Math.max(...corners.map(p => p[1]));\n    return [[west, south], [east, north]];\n  }\n\n  getBoundingRegion(options = {}) {\n    return getBounds(this, options.z || 0);\n  }\n}\n"],"file":"web-mercator-viewport.js"}