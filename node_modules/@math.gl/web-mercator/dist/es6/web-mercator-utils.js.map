{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["createMat4","transformVector","mat4","vec2","vec3","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","log2","lngLatToWorld","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","atan","exp","getMeterZoom","latitude","latCosine","cos","getDistanceScales","longitude","highPrecision","result","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","unitsPerMeter","metersPerUnit","unitsPerDegree","degreesPerUnit","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerDegree2","unitsPerMeter2","addMetersToLngLat","lngLatZ","xyz","z0","z","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","vm","translate","rotateX","rotateZ","negate","getProjectionParameters","width","nearZMultiplier","farZMultiplier","pitchRadians","halfFov","topHalfSurfaceDistance","sin","min","max","farZ","fov","aspect","focalDistance","near","far","getProjectionMatrix","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z1","t","lerp"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nconst DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat]) {\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n// Unproject world point [x,y] on map onto {lat, lon} on sphere\nexport function worldToLngLat([x, y]) {\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\n\nexport function getDistanceScales({latitude, longitude, highPrecision = false}) {\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const result = {};\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  // @ts-ignore\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  scale,\n  center = null\n}) {\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  altitude = DEFAULT_ALTITUDE,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // Find the distance from the center point to the center top\n  // in altitude units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const halfFov = Math.atan(0.5 / altitude);\n  const topHalfSurfaceDistance =\n    (Math.sin(halfFov) * altitude) /\n    Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + altitude;\n\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} = getProjectionParameters({\n    width,\n    height,\n    altitude,\n    pitch,\n    nearZMultiplier,\n    farZMultiplier\n  });\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n// Unproject pixels on screen to flat coordinates.\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"],"file":"web-mercator-utils.js"}