{"version":3,"sources":["../../src/json-converter.js"],"names":["isObject","value","JSONConverter","props","log","console","configuration","onJSONChange","json","convertedJson","setProps","JSONConfiguration","config","merge","parsedJSON","convertJSON","postProcessConvertedJson","convert","convertJSONRecursively","key","Array","isArray","map","element","i","String","isClassInstance","convertClassInstance","convertPlainObject","convertString","typeKey","isClass","Boolean","type","result","string","startsWith","FUNCTION_IDENTIFIER","convertFunction","replace","CONSTANT_IDENTIFIER","constants","split","enumVarName","enumValName","enumerations"],"mappings":"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","sourcesContent":["// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\n// Lightly processes `json` props, transform string values, and extract `views` and `layers`\n// See: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md\n//\n// NOTES:\n// * This is intended to provide minimal necessary processing required to support\n//   existing deck.gl props via JSON. This is not an implementation of alternate JSON schemas.\n// * Optionally, error checking could be applied, but ideally should leverage\n//   non-JSON specific mechanisms like prop types.\n\nimport assert from './utils/assert';\nimport JSONConfiguration from './json-configuration';\nimport {instantiateClass} from './helpers/instantiate-class';\n\nimport {FUNCTION_IDENTIFIER, CONSTANT_IDENTIFIER} from './syntactic-sugar';\nimport parseJSON from './helpers/parse-json';\n\nconst isObject = value => value && typeof value === 'object';\n\nexport default class JSONConverter {\n  constructor(props) {\n    this.log = console; // eslint-disable-line\n    this.configuration = {};\n    this.onJSONChange = () => {};\n    this.json = null;\n    this.convertedJson = null;\n    this.setProps(props);\n  }\n\n  finalize() {}\n\n  setProps(props) {\n    // HANDLE CONFIGURATION PROPS\n    if ('configuration' in props) {\n      // Accept object or `JSONConfiguration`\n      this.configuration =\n        props.configuration instanceof JSONConfiguration\n          ? props.configuration\n          : new JSONConfiguration(props.configuration);\n    }\n\n    if ('onJSONChange' in props) {\n      this.onJSONChange = props.onJSONChange;\n    }\n  }\n\n  mergeConfiguration(config) {\n    this.configuration.merge(config);\n  }\n\n  convert(json) {\n    // Use shallow equality to ensure we only convert same json once\n    if (!json || json === this.json) {\n      return this.convertedJson;\n    }\n    // Save json for shallow diffing\n    this.json = json;\n\n    // Accept JSON strings by parsing them\n    const parsedJSON = parseJSON(json);\n\n    // Convert the JSON\n    let convertedJson = convertJSON(parsedJSON, this.configuration);\n\n    convertedJson = this.configuration.postProcessConvertedJson(convertedJson);\n\n    this.convertedJson = convertedJson;\n    return convertedJson;\n  }\n\n  // DEPRECATED: Backwards compatibility\n  convertJson(json) {\n    return this.convert(json);\n  }\n}\n\nfunction convertJSON(json, configuration) {\n  // Fixup configuration\n  configuration = new JSONConfiguration(configuration);\n  return convertJSONRecursively(json, '', configuration);\n}\n\n// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\nfunction convertJSONRecursively(json, key, configuration) {\n  if (Array.isArray(json)) {\n    return json.map((element, i) => convertJSONRecursively(element, String(i), configuration));\n  }\n\n  // If object.type is in configuration, instantiate\n  if (isClassInstance(json, configuration)) {\n    return convertClassInstance(json, configuration);\n  }\n\n  if (isObject(json)) {\n    return convertPlainObject(json, configuration);\n  }\n\n  // Single value\n  if (typeof json === 'string') {\n    return convertString(json, key, configuration);\n  }\n\n  // Return unchanged (number, boolean, ...)\n  return json;\n}\n\n// Returns true if an object has a `type` field\nfunction isClassInstance(json, configuration) {\n  const {typeKey} = configuration;\n  const isClass = isObject(json) && Boolean(json[typeKey]);\n  return isClass;\n}\n\nfunction convertClassInstance(json, configuration) {\n  // Extract the class type field\n  const {typeKey} = configuration;\n  const type = json[typeKey];\n\n  // Prepare a props object and ensure all values have been converted\n  let props = {...json};\n  delete props[typeKey];\n\n  props = convertPlainObject(props, configuration);\n\n  return instantiateClass(type, props, configuration);\n}\n\n// Plain JS object, convert each key and return.\nfunction convertPlainObject(json, configuration) {\n  assert(isObject(json));\n\n  const result = {};\n  for (const key in json) {\n    const value = json[key];\n    result[key] = convertJSONRecursively(value, key, configuration);\n  }\n  return result;\n}\n\n// Convert one string value in an object\n// TODO - We could also support string syntax for hydrating other types, like regexps...\n// But no current use case\nfunction convertString(string, key, configuration) {\n  // Here the JSON value is supposed to be treated as a function\n  if (string.startsWith(FUNCTION_IDENTIFIER) && configuration.convertFunction) {\n    string = string.replace(FUNCTION_IDENTIFIER, '');\n    return configuration.convertFunction(string, configuration);\n  }\n  if (string.startsWith(CONSTANT_IDENTIFIER)) {\n    string = string.replace(CONSTANT_IDENTIFIER, '');\n    if (configuration.constants[string]) {\n      return configuration.constants[string];\n    }\n    // enum\n    const [enumVarName, enumValName] = string.split('.');\n    return configuration.enumerations[enumVarName][enumValName];\n  }\n  return string;\n}\n"],"file":"json-converter.js"}