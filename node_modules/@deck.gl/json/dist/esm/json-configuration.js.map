{"version":3,"sources":["../../src/json-configuration.js"],"names":["parseExpressionString","assert","TYPE_KEY","isObject","value","JSONConfiguration","typeKey","log","console","classes","reactComponents","enumerations","constants","convertFunction","preProcessClassProps","Class","props","postProcessConvertedJson","json","configurations","configuration","merge","key","Object","assign"],"mappings":";;;AACA,OAAOA,qBAAP,MAAkC,mCAAlC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,SAAQC,QAAR,QAAuB,mBAAvB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAIA,KAAK,IAAI,QAAOA,KAAP,MAAiB,QAA9B;AAAA,CAAtB;;IAEqBC,iB;AACnB,+BAA+B;AAAA;;AAE7B,SAAKC,OAAL,GAAeJ,QAAf;AACA,SAAKK,GAAL,GAAWC,OAAX;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AAEA,SAAKC,eAAL,GAAuBA,eAAvB;;AACA,SAAKC,oBAAL,GAA4B,UAACC,KAAD,EAAQC,KAAR;AAAA,aAAkBA,KAAlB;AAAA,KAA5B;;AACA,SAAKC,wBAAL,GAAgC,UAAAC,IAAI;AAAA,aAAIA,IAAJ;AAAA,KAApC;;AAX6B,sCAAhBC,cAAgB;AAAhBA,MAAAA,cAAgB;AAAA;;AAa7B,uCAA4BA,cAA5B,qCAA4C;AAAvC,UAAMC,aAAa,sBAAnB;AACH,WAAKC,KAAL,CAAWD,aAAX;AACD;AACF;;;;0BAEKA,a,EAAe;AACnB,WAAK,IAAME,GAAX,IAAkBF,aAAlB,EAAiC;AAC/B,gBAAQE,GAAR;AAEE,eAAK,QAAL;AACA,eAAK,OAAL;AACEC,YAAAA,MAAM,CAACC,MAAP,CAAc,KAAKf,OAAnB,EAA4BW,aAAa,CAACE,GAAD,CAAzC;AACA;;AACF;AAEE,gBAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,kBAAMlB,KAAK,GAAGgB,aAAa,CAACE,GAAD,CAA3B;AACA,mBAAKA,GAAL,IAAYnB,QAAQ,CAAC,KAAKmB,GAAL,CAAD,CAAR,GAAsBC,MAAM,CAACC,MAAP,CAAc,KAAKF,GAAL,CAAd,EAAyBlB,KAAzB,CAAtB,GAAwDA,KAApE;AACD;;AAXL;AAaD;AACF;;;6BAEQgB,a,EAAe;AACtBnB,MAAAA,MAAM,CAAC,CAAC,KAAKK,OAAN,IAAiB,OAAO,KAAKA,OAAZ,KAAwB,QAA1C,CAAN;AACAL,MAAAA,MAAM,CAACE,QAAQ,CAAC,KAAKM,OAAN,CAAT,CAAN;AACA,aAAO,IAAP;AACD;;;;;;SAzCkBJ,iB;;AA4CrB,SAASQ,eAAT,CAAyBT,KAAzB,EAAgCgB,aAAhC,EAA+C;AAC7C,SAAOpB,qBAAqB,CAACI,KAAD,EAAQgB,aAAR,CAA5B;AACD","sourcesContent":["// TODO - default parsing code should not be part of the configuration.\nimport parseExpressionString from './helpers/parse-expression-string';\nimport assert from './utils/assert';\n\nimport {TYPE_KEY} from './syntactic-sugar';\n\nconst isObject = value => value && typeof value === 'object';\n\nexport default class JSONConfiguration {\n  constructor(...configurations) {\n    // Initialize config with default values\n    this.typeKey = TYPE_KEY;\n    this.log = console; // eslint-disable-line\n    this.classes = {};\n    this.reactComponents = {};\n    this.enumerations = {};\n    this.constants = {};\n    // TODO - this needs to be simpler, function conversion should be built in\n    this.convertFunction = convertFunction;\n    this.preProcessClassProps = (Class, props) => props;\n    this.postProcessConvertedJson = json => json;\n\n    for (const configuration of configurations) {\n      this.merge(configuration);\n    }\n  }\n\n  merge(configuration) {\n    for (const key in configuration) {\n      switch (key) {\n        // DEPRECATED = For backwards compatibility, add views and layers to classes;\n        case 'layers':\n        case 'views':\n          Object.assign(this.classes, configuration[key]);\n          break;\n        default:\n          // Store configuration as root fields (this.classes, ...)\n          if (key in this) {\n            const value = configuration[key];\n            this[key] = isObject(this[key]) ? Object.assign(this[key], value) : value;\n          }\n      }\n    }\n  }\n\n  validate(configuration) {\n    assert(!this.typeKey || typeof this.typeKey === 'string');\n    assert(isObject(this.classes));\n    return true;\n  }\n}\n\nfunction convertFunction(value, configuration) {\n  return parseExpressionString(value, configuration);\n}\n"],"file":"json-configuration.js"}