{"version":3,"sources":["../../src/deckgl.js"],"names":["propTypes","Deck","getPropTypes","PropTypes","defaultProps","DeckGL","props","viewports","children","_needsRedraw","_containerRef","React","createRef","_canvasRef","pickObject","bind","pickMultipleObjects","pickObjects","_extractJSXLayers","extractJSXLayers","_positionChildrenUnderViews","positionChildrenUnderViews","_extractStyles","extractStyles","DeckClass","deck","Object","assign","parent","current","canvas","style","width","height","_customRender","_updateFromProps","nextProps","childrenChanged","_parseJSX","viewsChanged","viewManager","needsRedraw","_redrawDeck","finalize","opts","_drawLayers","redrawReason","getViewports","forceUpdate","layers","views","deckProps","setProps","ContextProvider","containerStyle","canvasStyle","key","ref","id","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {createElement} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck, _memoize as memoize} from '@deck.gl/core';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nconst propTypes = Deck.getPropTypes(PropTypes);\n\nconst defaultProps = Deck.defaultProps;\n\nexport default class DeckGL extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.viewports = null;\n    this.children = null;\n\n    // The redraw flag of deck\n    this._needsRedraw = null;\n\n    // Refs\n    this._containerRef = React.createRef();\n    this._canvasRef = React.createRef();\n\n    // Bind public methods\n    this.pickObject = this.pickObject.bind(this);\n    this.pickMultipleObjects = this.pickMultipleObjects.bind(this);\n    this.pickObjects = this.pickObjects.bind(this);\n\n    // Memoized functions\n    this._extractJSXLayers = memoize(extractJSXLayers);\n    this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n    this._extractStyles = memoize(extractStyles);\n  }\n\n  componentDidMount() {\n    // Allows a subclass of Deck to be used\n    // TODO - update propTypes / defaultProps?\n    const DeckClass = this.props.Deck || Deck;\n\n    // DEVTOOLS can cause this to be called twice\n    this.deck =\n      this.deck ||\n      new DeckClass(\n        Object.assign({}, this.props, {\n          parent: this._containerRef.current,\n          canvas: this._canvasRef.current,\n          style: null,\n          width: '100%',\n          height: '100%',\n          // The Deck's animation loop is independent from React's render cycle, causing potential\n          // synchronization issues. We provide this custom render function to make sure that React\n          // and Deck update on the same schedule.\n          _customRender: this._customRender.bind(this)\n        })\n      );\n    this._updateFromProps(this.props);\n  }\n\n  // This method checks if React needs to call `render`.\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL context - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL context and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  shouldComponentUpdate(nextProps) {\n    // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n    // the next animation frame.\n    this._updateFromProps(nextProps);\n\n    // If the child components have changed, React needs to rerender (case 2 or 3)\n    const childrenChanged = this.children !== this._parseJSX(nextProps).children;\n    // If the views have changed, both React and WebGL context need update (case 3)\n    const viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n\n    // Only call `render` right away in case 2\n    return childrenChanged && !viewsChanged;\n  }\n\n  componentDidUpdate() {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    this._redrawDeck();\n  }\n\n  componentWillUnmount() {\n    this.deck.finalize();\n  }\n\n  // Public API\n\n  pickObject(opts) {\n    return this.deck.pickObject(opts);\n  }\n\n  pickMultipleObjects(opts) {\n    return this.deck.pickMultipleObjects(opts);\n  }\n\n  pickObjects(opts) {\n    return this.deck.pickObjects(opts);\n  }\n\n  // Callbacks\n  _redrawDeck() {\n    if (this._needsRedraw) {\n      // Only redraw it we have received a dirty flag\n      this.deck._drawLayers(this._needsRedraw);\n      this._needsRedraw = null;\n    }\n  }\n\n  _customRender(redrawReason) {\n    // Save the dirty flag for later\n    this._needsRedraw = redrawReason;\n\n    // Viewport/view state is passed to child components as props.\n    // If they have changed, we need to trigger a React rerender to update children props.\n    const viewports = this.deck.viewManager.getViewports();\n    if (viewports !== this.viewports) {\n      // Viewports have changed, update children props first.\n      // This will delay the Deck canvas redraw till after React update (in componentDidUpdate)\n      // so that the canvas does not get rendered before the child components update.\n      this.forceUpdate();\n    } else {\n      this._redrawDeck();\n    }\n  }\n\n  // Private Helpers\n\n  _parseJSX(props) {\n    return this._extractJSXLayers({\n      layers: props.layers,\n      views: props.views,\n      children: props.children\n    });\n  }\n\n  // 1. Extract any JSX layers from the react children\n  // 2. Handle any backwards compatiblity props for React layer\n  // Needs to be called both from initial mount, and when new props are received\n  _updateFromProps(props) {\n    // extract any deck.gl layers masquerading as react elements from props.children\n    const {layers, views} = this._parseJSX(props);\n    const deckProps = Object.assign({}, props, {\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      layers,\n      views\n    });\n\n    this.deck.setProps(deckProps);\n  }\n\n  render() {\n    const {ContextProvider, width, height, style} = this.props;\n    // Save the viewports and children used for this render\n    const {viewManager} = this.deck || {};\n    this.viewports = viewManager && viewManager.getViewports();\n    this.children = this._parseJSX(this.props).children;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const children = this._positionChildrenUnderViews({\n      children: this.children,\n      viewports: this.viewports,\n      deck: this.deck,\n      ContextProvider\n    });\n\n    const {containerStyle, canvasStyle} = this._extractStyles({width, height, style});\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      ref: this._canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    return createElement(\n      'div',\n      {id: 'deckgl-wrapper', ref: this._containerRef, style: containerStyle},\n      [canvas, children]\n    );\n  }\n}\n\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;\n"],"file":"deckgl.js"}