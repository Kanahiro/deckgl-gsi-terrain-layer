{"version":3,"sources":["../../../src/cpu-grid-layer/grid-aggregator.js"],"names":["createIterable","getGridOffset","pointToDensityGridDataCPU","props","aggregationParams","hashInfo","pointsToGridHashing","result","getGridLayerDataFromGridHash","gridHash","gridOffset","data","cellSize","attributes","viewport","projectPoints","numInstances","positions","value","getAccessor","size","boundingBox","getPositionBoundingBox","offsets","posOffset","xOffset","yOffset","width","height","numCol","Math","ceil","numRow","iterable","objectInfo","position","Array","pt","index","project","x","y","Number","isFinite","yIndex","floor","xIndex","key","count","points","lonIdx","latIdx","push","Object","keys","length","i","idxs","split","parseInt","assign","positionAttribute","numInstance","yMin","Infinity","yMax","xMin","xMax"],"mappings":";;;;;;;;AAoBA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAAQC,aAAR,QAA4B,iCAA5B;AAoBA,OAAO,SAASC,yBAAT,CAAmCC,KAAnC,EAA0CC,iBAA1C,EAA6D;AAClE,MAAMC,QAAQ,GAAGC,mBAAmB,CAACH,KAAD,EAAQC,iBAAR,CAApC;AACA,MAAMG,MAAM,GAAGC,4BAA4B,CAACH,QAAD,CAA3C;AAEA,SAAO;AACLI,IAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QADd;AAELC,IAAAA,UAAU,EAAEL,QAAQ,CAACK,UAFhB;AAGLC,IAAAA,IAAI,EAAEJ;AAHD,GAAP;AAKD;;AAUD,SAASD,mBAAT,CAA6BH,KAA7B,EAAoCC,iBAApC,EAAuD;AAAA,oBACvBD,KADuB,CAC9CQ,IAD8C;AAAA,MAC9CA,IAD8C,4BACvC,EADuC;AAAA,MACnCC,QADmC,GACvBT,KADuB,CACnCS,QADmC;AAAA,MAE9CC,UAF8C,GAEOT,iBAFP,CAE9CS,UAF8C;AAAA,MAElCC,QAFkC,GAEOV,iBAFP,CAElCU,QAFkC;AAAA,MAExBC,aAFwB,GAEOX,iBAFP,CAExBW,aAFwB;AAAA,MAETC,YAFS,GAEOZ,iBAFP,CAETY,YAFS;AAGrD,MAAMC,SAAS,GAAGJ,UAAU,CAACI,SAAX,CAAqBC,KAAvC;;AAHqD,8BAItCL,UAAU,CAACI,SAAX,CAAqBE,WAArB,EAJsC;AAAA,MAI9CC,IAJ8C,yBAI9CA,IAJ8C;;AAKrD,MAAMC,WAAW,GACfjB,iBAAiB,CAACiB,WAAlB,IAAiCC,sBAAsB,CAACT,UAAU,CAACI,SAAZ,EAAuBD,YAAvB,CADzD;AAEA,MAAMO,OAAO,GAAGnB,iBAAiB,CAACoB,SAAlB,IAA+B,CAAC,GAAD,EAAM,EAAN,CAA/C;AACA,MAAMd,UAAU,GAAGN,iBAAiB,CAACM,UAAlB,IAAgCT,aAAa,CAACoB,WAAD,EAAcT,QAAd,CAAhE;;AAEA,MAAIF,UAAU,CAACe,OAAX,IAAsB,CAAtB,IAA2Bf,UAAU,CAACgB,OAAX,IAAsB,CAArD,EAAwD;AACtD,WAAO;AAACjB,MAAAA,QAAQ,EAAE,EAAX;AAAeC,MAAAA,UAAU,EAAVA;AAAf,KAAP;AACD;;AAZoD,MAc9CiB,KAd8C,GAc7Bb,QAd6B,CAc9Ca,KAd8C;AAAA,MAcvCC,MAduC,GAc7Bd,QAd6B,CAcvCc,MAduC;AAerD,MAAMC,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,GAAGjB,UAAU,CAACe,OAA7B,CAAf;AACA,MAAMO,MAAM,GAAGF,IAAI,CAACC,IAAL,CAAUH,MAAM,GAAGlB,UAAU,CAACgB,OAA9B,CAAf;AAGA,MAAMjB,QAAQ,GAAG,EAAjB;;AAnBqD,wBAqBtBT,cAAc,CAACW,IAAD,CArBQ;AAAA,MAqB9CsB,QArB8C,mBAqB9CA,QArB8C;AAAA,MAqBpCC,UArBoC,mBAqBpCA,UArBoC;;AAsBrD,MAAMC,QAAQ,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAjB;;AAtBqD,6CAuBpCH,QAvBoC;AAAA;;AAAA;AAuBrD,wDAA2B;AAAA,UAAhBI,EAAgB;AACzBH,MAAAA,UAAU,CAACI,KAAX;AACAH,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAclB,SAAS,CAACiB,UAAU,CAACI,KAAX,GAAmBlB,IAApB,CAAvB;AACAe,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAclB,SAAS,CAACiB,UAAU,CAACI,KAAX,GAAmBlB,IAAnB,GAA0B,CAA3B,CAAvB;AACAe,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,IAAI,CAAR,GAAYH,SAAS,CAACiB,UAAU,CAACI,KAAX,GAAmBlB,IAAnB,GAA0B,CAA3B,CAArB,GAAqD,CAAnE;;AAJyB,iBAKVL,aAAa,GAAGD,QAAQ,CAACyB,OAAT,CAAiBJ,QAAjB,CAAH,GAAgCA,QALnC;AAAA;AAAA,UAKlBK,CALkB;AAAA,UAKfC,CALe;;AAMzB,UAAIC,MAAM,CAACC,QAAP,CAAgBH,CAAhB,KAAsBE,MAAM,CAACC,QAAP,CAAgBF,CAAhB,CAA1B,EAA8C;AAC5C,YAAMG,MAAM,GAAGd,IAAI,CAACe,KAAL,CAAW,CAACJ,CAAC,GAAGlB,OAAO,CAAC,CAAD,CAAZ,IAAmBb,UAAU,CAACgB,OAAzC,CAAf;AACA,YAAMoB,MAAM,GAAGhB,IAAI,CAACe,KAAL,CAAW,CAACL,CAAC,GAAGjB,OAAO,CAAC,CAAD,CAAZ,IAAmBb,UAAU,CAACe,OAAzC,CAAf;;AACA,YACE,CAACV,aAAD,IAEC+B,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAGjB,MAAxB,IAAkCe,MAAM,IAAI,CAA5C,IAAiDA,MAAM,GAAGZ,MAH7D,EAIE;AACA,cAAMe,GAAG,aAAMH,MAAN,cAAgBE,MAAhB,CAAT;AAEArC,UAAAA,QAAQ,CAACsC,GAAD,CAAR,GAAgBtC,QAAQ,CAACsC,GAAD,CAAR,IAAiB;AAACC,YAAAA,KAAK,EAAE,CAAR;AAAWC,YAAAA,MAAM,EAAE,EAAnB;AAAuBC,YAAAA,MAAM,EAAEJ,MAA/B;AAAuCK,YAAAA,MAAM,EAAEP;AAA/C,WAAjC;AACAnC,UAAAA,QAAQ,CAACsC,GAAD,CAAR,CAAcC,KAAd,IAAuB,CAAvB;AACAvC,UAAAA,QAAQ,CAACsC,GAAD,CAAR,CAAcE,MAAd,CAAqBG,IAArB,CAA0Bf,EAA1B;AACD;AACF;AACF;AA5CoD;AAAA;AAAA;AAAA;AAAA;;AA8CrD,SAAO;AAAC5B,IAAAA,QAAQ,EAARA,QAAD;AAAWC,IAAAA,UAAU,EAAVA,UAAX;AAAuBa,IAAAA,OAAO,EAAE,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC,CAAf,EAAkBA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC,CAAhC;AAAhC,GAAP;AACD;;AAGD,SAASf,4BAAT,QAAuE;AAAA,MAAhCC,QAAgC,SAAhCA,QAAgC;AAAA,MAAtBC,UAAsB,SAAtBA,UAAsB;AAAA,MAAVa,OAAU,SAAVA,OAAU;AACrE,MAAMZ,IAAI,GAAG,IAAIyB,KAAJ,CAAUiB,MAAM,CAACC,IAAP,CAAY7C,QAAZ,EAAsB8C,MAAhC,CAAb;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAK,IAAMT,GAAX,IAAkBtC,QAAlB,EAA4B;AAC1B,QAAMgD,IAAI,GAAGV,GAAG,CAACW,KAAJ,CAAU,GAAV,CAAb;AACA,QAAMP,MAAM,GAAGQ,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAvB;AACA,QAAMP,MAAM,GAAGS,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAvB;AACA,QAAMnB,KAAK,GAAGkB,CAAC,EAAf;AAEA7C,IAAAA,IAAI,CAAC2B,KAAD,CAAJ,GAAce,MAAM,CAACO,MAAP,CACZ;AACEtB,MAAAA,KAAK,EAALA,KADF;AAEEH,MAAAA,QAAQ,EAAE,CACRZ,OAAO,CAAC,CAAD,CAAP,GAAab,UAAU,CAACe,OAAX,GAAqByB,MAD1B,EAER3B,OAAO,CAAC,CAAD,CAAP,GAAab,UAAU,CAACgB,OAAX,GAAqByB,MAF1B;AAFZ,KADY,EAQZ1C,QAAQ,CAACsC,GAAD,CARI,CAAd;AAUD;;AACD,SAAOpC,IAAP;AACD;;AAGD,SAASW,sBAAT,CAAgCuC,iBAAhC,EAAmDC,WAAnD,EAAgE;AAE9D,MAAM7C,SAAS,GAAG4C,iBAAiB,CAAC3C,KAApC;;AAF8D,8BAG/C2C,iBAAiB,CAAC1C,WAAlB,EAH+C;AAAA,MAGvDC,IAHuD,yBAGvDA,IAHuD;;AAK9D,MAAI2C,IAAI,GAAGC,QAAX;AACA,MAAIC,IAAI,GAAG,CAACD,QAAZ;AACA,MAAIE,IAAI,GAAGF,QAAX;AACA,MAAIG,IAAI,GAAG,CAACH,QAAZ;AACA,MAAIvB,CAAJ;AACA,MAAID,CAAJ;;AAEA,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,WAApB,EAAiCN,CAAC,EAAlC,EAAsC;AACpChB,IAAAA,CAAC,GAAGvB,SAAS,CAACuC,CAAC,GAAGpC,IAAL,CAAb;AACAqB,IAAAA,CAAC,GAAGxB,SAAS,CAACuC,CAAC,GAAGpC,IAAJ,GAAW,CAAZ,CAAb;;AACA,QAAIsB,MAAM,CAACC,QAAP,CAAgBH,CAAhB,KAAsBE,MAAM,CAACC,QAAP,CAAgBF,CAAhB,CAA1B,EAA8C;AAC5CsB,MAAAA,IAAI,GAAGtB,CAAC,GAAGsB,IAAJ,GAAWtB,CAAX,GAAesB,IAAtB;AACAE,MAAAA,IAAI,GAAGxB,CAAC,GAAGwB,IAAJ,GAAWxB,CAAX,GAAewB,IAAtB;AACAC,MAAAA,IAAI,GAAG1B,CAAC,GAAG0B,IAAJ,GAAW1B,CAAX,GAAe0B,IAAtB;AACAC,MAAAA,IAAI,GAAG3B,CAAC,GAAG2B,IAAJ,GAAW3B,CAAX,GAAe2B,IAAtB;AACD;AACF;;AAED,SAAO;AAACD,IAAAA,IAAI,EAAJA,IAAD;AAAOC,IAAAA,IAAI,EAAJA,IAAP;AAAaJ,IAAAA,IAAI,EAAJA,IAAb;AAAmBE,IAAAA,IAAI,EAAJA;AAAnB,GAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createIterable} from '@deck.gl/core';\nimport {getGridOffset} from '../utils/grid-aggregation-utils';\n\n/**\n * Calculate density grid from an array of points\n * @param {Object} props - object containing :\n * @param {Iterable} [props.data] - data objects to be aggregated\n * @param {Integer} [props.cellSize] - size of the grid cell\n *\n * @param {Object} aggregationParams - object containing :\n * @param {Object} gridOffset - {xOffset, yOffset} cell size in meters\n * @param {Integer} width - width of the grid\n * @param {Integer} height - height of the grid\n * @param {Boolean} projectPoints - `true` if doing screen space projection, `false` otherwise\n * @param {Array} attributes - attributes array containing position values\n * @param {Viewport} viewport - viewport to be used for projection\n * @param {Array} posOffset - [xOffset, yOffset] offset to be applied to positions to get cell index\n * @param {Object} boundingBox - {xMin, yMin, xMax, yMax} bounding box of input data\n *\n * @returns {object} - grid data, cell dimension\n */\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  const hashInfo = pointsToGridHashing(props, aggregationParams);\n  const result = getGridLayerDataFromGridHash(hashInfo);\n\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\n\n/**\n * Project points into each cell, return a hash table of cells\n * @param {Iterable} points\n * @param {number} cellSize - unit size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid hash and cell dimension\n */\n/* eslint-disable max-statements, complexity */\nfunction pointsToGridHashing(props, aggregationParams) {\n  const {data = [], cellSize} = props;\n  const {attributes, viewport, projectPoints, numInstances} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  const boundingBox =\n    aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  const offsets = aggregationParams.posOffset || [180, 90];\n  const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {gridHash: {}, gridOffset};\n  }\n\n  const {width, height} = viewport;\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n\n  // calculate count per cell\n  const gridHash = {};\n\n  const {iterable, objectInfo} = createIterable(data);\n  const position = new Array(3);\n  for (const pt of iterable) {\n    objectInfo.index++;\n    position[0] = positions[objectInfo.index * size];\n    position[1] = positions[objectInfo.index * size + 1];\n    position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n    const [x, y] = projectPoints ? viewport.project(position) : position;\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n      const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n      if (\n        !projectPoints ||\n        // when doing screen space agggregation (projectPoints = true), filter points outside of the viewport range.\n        (xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow)\n      ) {\n        const key = `${yIndex}-${xIndex}`;\n\n        gridHash[key] = gridHash[key] || {count: 0, points: [], lonIdx: xIndex, latIdx: yIndex};\n        gridHash[key].count += 1;\n        gridHash[key].points.push(pt);\n      }\n    }\n  }\n\n  return {gridHash, gridOffset, offsets: [offsets[0] * -1, offsets[1] * -1]};\n}\n/* eslint-enable max-statements, complexity */\n\nfunction getGridLayerDataFromGridHash({gridHash, gridOffset, offsets}) {\n  const data = new Array(Object.keys(gridHash).length);\n  let i = 0;\n  for (const key in gridHash) {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const index = i++;\n\n    data[index] = Object.assign(\n      {\n        index,\n        position: [\n          offsets[0] + gridOffset.xOffset * lonIdx,\n          offsets[1] + gridOffset.yOffset * latIdx\n        ]\n      },\n      gridHash[key]\n    );\n  }\n  return data;\n}\n\n// Calculate bounding box of position attribute\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = positionAttribute.value;\n  const {size} = positionAttribute.getAccessor();\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n\n  return {xMin, xMax, yMin, yMax};\n}\n"],"file":"grid-aggregator.js"}