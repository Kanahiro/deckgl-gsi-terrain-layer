{"version":3,"sources":["../../../src/cpu-grid-layer/cpu-grid-layer.js"],"names":["GridCellLayer","defaultColorRange","pointToDensityGridDataCPU","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","x","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","gridAggregator","cellSize","coverage","getPosition","position","extruded","material","_filterData","optional","CPUGridLayer","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","attributeManager","getAttributeManager","add","positions","size","accessor","opts","setState","updateState","viewport","context","attributes","getAttributes","numInstances","getNumInstances","info","getPickingInfo","cell","getAccessor","getUpdateTriggers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","_getSublayerUpdateTriggers","getFillColor","_onGetSublayerColor","bind","getElevation","_onGetSublayerElevation","getSubLayerProps","id","data","layerData","layerName"],"mappings":";;;;;;;;;;;AAoBA,SAAQA,aAAR,QAA4B,iBAA5B;AAEA,SAAQC,iBAAR,QAAgC,sBAAhC;AACA,SAAQC,yBAAR,QAAwC,mBAAxC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;;AAEA,SAASC,GAAT,GAAe,CAAE;;AAEjB,IAAMC,YAAY,GAAG;AAEnBC,EAAAA,WAAW,EAAE,IAFM;AAGnBC,EAAAA,UAAU,EAAEP,iBAHO;AAInBQ,EAAAA,aAAa,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAJI;AAKnBC,EAAAA,cAAc,EAAE;AAACF,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAI,CAAJ;AAAA;AAA3B,GALG;AAMnBC,EAAAA,gBAAgB,EAAE,KANC;AAOnBC,EAAAA,eAAe,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GAPE;AAQnBO,EAAAA,eAAe,EAAE;AAACR,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GARE;AASnBQ,EAAAA,cAAc,EAAE,UATG;AAUnBC,EAAAA,gBAAgB,EAAEf,GAVC;AAanBgB,EAAAA,eAAe,EAAE,IAbE;AAcnBC,EAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,IAAJ,CAdG;AAenBC,EAAAA,iBAAiB,EAAE;AAACb,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAfA;AAgBnBa,EAAAA,kBAAkB,EAAE;AAACd,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAI,CAAJ;AAAA;AAA3B,GAhBD;AAiBnBY,EAAAA,oBAAoB,EAAE,KAjBH;AAkBnBC,EAAAA,wBAAwB,EAAE;AAAChB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GAlBP;AAmBnBgB,EAAAA,wBAAwB,EAAE;AAACjB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GAnBP;AAoBnBiB,EAAAA,cAAc,EAAE;AAAClB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBL,IAAAA,KAAK,EAAE;AAAhC,GApBG;AAqBnBkB,EAAAA,kBAAkB,EAAE,QArBD;AAsBnBC,EAAAA,oBAAoB,EAAEzB,GAtBH;AAwBnB0B,EAAAA,cAAc,EAAE7B,yBAxBG;AA2BnB8B,EAAAA,QAAQ,EAAE;AAACtB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,IAA9B;AAAoCN,IAAAA,KAAK,EAAE;AAA3C,GA3BS;AA4BnBsB,EAAAA,QAAQ,EAAE;AAACvB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,CAA9B;AAAiCN,IAAAA,KAAK,EAAE;AAAxC,GA5BS;AA6BnBuB,EAAAA,WAAW,EAAE;AAACxB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAIA,CAAC,CAACsB,QAAN;AAAA;AAA3B,GA7BM;AA8BnBC,EAAAA,QAAQ,EAAE,KA9BS;AAiCnBC,EAAAA,QAAQ,EAAE,IAjCS;AAoCnBC,EAAAA,WAAW,EAAE;AAAC5B,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,IAA1B;AAAgC4B,IAAAA,QAAQ,EAAE;AAA1C;AApCM,CAArB;;IAuCqBC,Y;;;;;;;;;;;;;sCACD;AAChB,UAAMC,aAAa,GAAG,IAAItC,aAAJ,CAAkB;AACtCuC,QAAAA,aAAa,EAAE,uBAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACZ,cAAV;AAAA,SADkB;AAEtCa,QAAAA,WAAW,EAAE,qBAAAD,KAAK;AAAA,iBAAIA,KAAK,CAACX,QAAV;AAAA;AAFoB,OAAlB,CAAtB;AAKA,WAAKa,KAAL,GAAa;AACXJ,QAAAA,aAAa,EAAbA,aADW;AAEXK,QAAAA,eAAe,EAAEL,aAAa,CAACI;AAFpB,OAAb;AAIA,UAAME,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,MAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,QAAAA,SAAS,EAAE;AAACC,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,QAAQ,EAAE;AAApB;AADQ,OAArB;AAKD;;;gCAEWC,I,EAAM;AAChB,oFAAkBA,IAAlB;;AACA,WAAKC,QAAL,CAAc;AAEZR,QAAAA,eAAe,EAAE,KAAKD,KAAL,CAAWJ,aAAX,CAAyBc,WAAzB,CAAqCF,IAArC,EAA2C;AAC1DG,UAAAA,QAAQ,EAAE,KAAKC,OAAL,CAAaD,QADmC;AAE1DE,UAAAA,UAAU,EAAE,KAAKC,aAAL,EAF8C;AAG1DC,UAAAA,YAAY,EAAE,KAAKC,eAAL,CAAqBR,IAAI,CAACV,KAA1B;AAH4C,SAA3C;AAFL,OAAd;AAQD;;;yCAEsB;AAAA,UAAPmB,IAAO,QAAPA,IAAO;AACrB,aAAO,KAAKjB,KAAL,CAAWJ,aAAX,CAAyBsB,cAAzB,CAAwC;AAACD,QAAAA,IAAI,EAAJA;AAAD,OAAxC,CAAP;AACD;;;wCAGmBE,I,EAAM;AACxB,aAAO,KAAKnB,KAAL,CAAWJ,aAAX,CAAyBwB,WAAzB,CAAqC,WAArC,EAAkDD,IAAlD,CAAP;AACD;;;4CAGuBA,I,EAAM;AAC5B,aAAO,KAAKnB,KAAL,CAAWJ,aAAX,CAAyBwB,WAAzB,CAAqC,WAArC,EAAkDD,IAAlD,CAAP;AACD;;;iDAE4B;AAC3B,aAAO,KAAKnB,KAAL,CAAWJ,aAAX,CAAyByB,iBAAzB,CAA2C,KAAKvB,KAAhD,CAAP;AACD;;;mCAEc;AAAA,wBACiE,KAAKA,KADtE;AAAA,UACNf,cADM,eACNA,cADM;AAAA,UACUQ,QADV,eACUA,QADV;AAAA,UACoBJ,QADpB,eACoBA,QADpB;AAAA,UAC8BC,QAD9B,eAC8BA,QAD9B;AAAA,UACwCI,QADxC,eACwCA,QADxC;AAAA,UACkD8B,WADlD,eACkDA,WADlD;AAAA,UAEN1B,aAFM,GAEW,KAAKI,KAFhB,CAENJ,aAFM;AAGb,UAAM2B,aAAa,GAAG,KAAKC,gBAAL,CAAsB,WAAtB,EAAmCrE,aAAnC,CAAtB;;AACA,UAAMsE,cAAc,GAAG,KAAKC,0BAAL,EAAvB;;AAEA,aAAO,IAAIH,aAAJ,CACL;AACEpC,QAAAA,QAAQ,EAARA,QADF;AAEEC,QAAAA,QAAQ,EAARA,QAFF;AAGEI,QAAAA,QAAQ,EAARA,QAHF;AAIET,QAAAA,cAAc,EAAdA,cAJF;AAKEQ,QAAAA,QAAQ,EAARA,QALF;AAOEoC,QAAAA,YAAY,EAAE,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAPhB;AAQEC,QAAAA,YAAY,EAAE,KAAKC,uBAAL,CAA6BF,IAA7B,CAAkC,IAAlC,CARhB;AASEP,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1BK,UAAAA,YAAY,EAAEL,WAAW,CAAC1D,aAAZ,IAA6B0D,WAAW,CAACvD,cAD7B;AAE1B+D,UAAAA,YAAY,EAAER,WAAW,CAAC5C,iBAAZ,IAAiC4C,WAAW,CAAC3C;AAFjC;AAT9B,OADK,EAeL,KAAKqD,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,WADgB;AAEpBR,QAAAA,cAAc,EAAdA;AAFoB,OAAtB,CAfK,EAmBL;AACES,QAAAA,IAAI,EAAEtC,aAAa,CAACI,KAAd,CAAoBmC,SAApB,CAA8BD;AADtC,OAnBK,CAAP;AAuBD;;;;EA9EuC3E,gB;;SAArBoC,Y;AAiFrBA,YAAY,CAACyC,SAAb,GAAyB,cAAzB;AACAzC,YAAY,CAAClC,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calculated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  gridAggregator: pointToDensityGridDataCPU,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calcualted using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances(opts.props)\n      })\n    });\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, cellSize, coverage, material, transitions} = this.props;\n    const {cpuAggregator} = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\n"],"file":"cpu-grid-layer.js"}