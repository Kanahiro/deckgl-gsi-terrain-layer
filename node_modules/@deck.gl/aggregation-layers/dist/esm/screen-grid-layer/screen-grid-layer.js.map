{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","ScreenGridCellLayer","GridAggregationLayer","getFloatTexture","defaultProps","Object","assign","getPosition","type","value","d","position","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ScreenGridLayer","gl","context","isSupported","setState","supported","error","id","dimensions","getCellSize","cellSizePixels","count","size","operation","SUM","needMax","maxTexture","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","changeFlags","state","somethingChanged","opts","numRow","numCol","updateTriggers","aggregationBuffer","CellLayerClass","getSubLayerClass","getSubLayerProps","instanceCounts","numInstances","maxBuffer","info","mode","index","gpuGridAggregator","aggregationResults","getData","object","getAggregationData","pixelIndex","aggregationData","maxData","setData","setImageData","cellSize","cellSizeChanged","oldProps","viewportChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","viewport","width","height","Math","ceil","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps = Object.assign({}, ScreenGridCellLayer.defaultProps, {\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n});\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ScreenGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS,\n      getCellSize: props => props.cellSizePixels\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n    if (maxBuffer) {\n      maxBuffer.delete();\n    }\n    if (maxTexture) {\n      maxTexture.delete();\n    }\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuGridAggregator.getData('count');\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, aggregationResults)\n      );\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight)});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}