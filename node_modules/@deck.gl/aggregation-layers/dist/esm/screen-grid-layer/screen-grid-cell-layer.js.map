{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-cell-layer.js"],"names":["Model","Geometry","FEATURES","hasFeatures","Layer","log","picking","defaultColorRange","colorRangeToFlatArray","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","ScreenGridCellLayer","modules","gl","context","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","noAlloc","setState","model","_getModel","changeFlags","somethingChanged","oldProps","props","numInstances","invalidateAll","invalidate","_updateUniforms","uniforms","parameters","maxTexture","minColor","maxColor","state","layerUniforms","Object","assign","draw","depthTest","depthMask","attribute","viewport","width","height","numCol","Math","ceil","i","x","y","floor","getShaders","id","geometry","drawMode","attributes","positions","Float32Array","isInstanced","deprecated","some","key","setUniforms","shouldUseMinMax","_shouldUseMinMax","viewportChanged","margin","cellScale","TEXTURE_FLOAT","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {Layer, log, picking} from '@deck.gl/core';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\n\nexport default class ScreenGridCellLayer extends Layer {\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  getShaders() {\n    return {vs, fs, modules: [picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {size: 4, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // 'instanceCounts' buffer contetns change on viewport change.\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({oldProps, props, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({uniforms}) {\n    const {parameters, maxTexture} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      maxTexture,\n      colorDomain\n    };\n\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  // Private Methods\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags) {\n    const {model} = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({shouldUseMinMax: this._shouldUseMinMax()});\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({colorRange: colorRangeToFlatArray(props.colorRange)});\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      const cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n      model.setUniforms({cellScale});\n    }\n  }\n}\n\nScreenGridCellLayer.layerName = 'ScreenGridCellLayer';\nScreenGridCellLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-cell-layer.js"}