{"version":3,"sources":["../../../src/contour-layer/marching-squares-codes.js"],"names":["HALF","ONE6TH","OFFSET","N","E","S","W","NE","NW","SE","SW","SW_TRIANGLE","SE_TRIANGLE","NE_TRIANGLE","NW_TRIANGLE","SW_TRAPEZOID","SE_TRAPEZOID","NE_TRAPEZOID","NW_TRAPEZOID","S_RECTANGLE","E_RECTANGLE","N_RECTANGLE","W_RECTANGLE","EW_RECTANGEL","SN_RECTANGEL","SQUARE","SW_PENTAGON","SE_PENTAGON","NE_PENTAGON","NW_PENTAGON","NW_N_PENTAGON","NE_E_PENTAGON","SE_S_PENTAGON","SW_W_PENTAGON","NW_W_PENTAGON","NE_N_PENTAGON","SE_E_PENTAGON","SW_S_PENTAGON","S_HEXAGON","E_HEXAGON","N_HEXAGON","W_HEXAGON","SW_NE_HEXAGON","NW_SE_HEXAGON","NE_HEPTAGON","SW_HEPTAGON","NW_HEPTAGON","SE_HEPTAGON","OCTAGON","ISOLINES_CODE_OFFSET_MAP","ternaryToIndex","ternary","parseInt","ISOBANDS_CODE_OFFSET_MAP"],"mappings":"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","sourcesContent":["// Code to Offsets Map needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n\n// Table to map code to the intersection offsets\n// All offsets are relative to the center of marching cell (which is top right corner of grid-cell, and center of marching-square)\nconst HALF = 0.5;\nconst ONE6TH = 1 / 6;\nconst OFFSET = {\n  N: [0, HALF], // NORTH\n  E: [HALF, 0], // EAST\n  S: [0, -HALF], // SOUTH\n  W: [-HALF, 0], // WEST\n\n  // CORNERS\n  NE: [HALF, HALF],\n  NW: [-HALF, HALF],\n  SE: [HALF, -HALF],\n  SW: [-HALF, -HALF]\n};\n\n// NOTE: vertices are ordered in CCW direction, starting from NW corner\n\n// Triangles\nconst SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];\nconst SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];\nconst NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];\n\n// Trapezoids\nconst SW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF]];\nconst SE_TRAPEZOID = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH]];\nconst NE_TRAPEZOID = [[HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst NW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\n\n// Rectangles\nconst S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];\nconst E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];\nconst W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];\nconst EW_RECTANGEL = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [HALF, -ONE6TH], [HALF, ONE6TH]];\nconst SN_RECTANGEL = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [ONE6TH, HALF], [-ONE6TH, HALF]];\n\n// Square\nconst SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];\n\n// Pentagons\nconst SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];\nconst SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];\nconst NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];\n\nconst NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];\nconst SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];\n\nconst NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];\nconst NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];\n\n// Hexagon\nconst S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];\nconst W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];\n\n// Heptagon (7-sided)\nconst NE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  OFFSET.E,\n  OFFSET.NE,\n  OFFSET.N\n];\nconst SW_HEPTAGON = [\n  OFFSET.W,\n  OFFSET.SW,\n  OFFSET.S,\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\nconst NW_HEPTAGON = [\n  OFFSET.NW,\n  OFFSET.W,\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  OFFSET.N\n];\nconst SE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  OFFSET.S,\n  OFFSET.SE,\n  OFFSET.E,\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Octagon\nconst OCTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Note: above wiki page invertes white/black dots for generating the code, we don't\nexport const ISOLINES_CODE_OFFSET_MAP = {\n  // key is equal to the code of 4 vertices (invert the code specified in wiki)\n  // value can be an array or an Object\n  // Array : [line] or [line, line], where each line is [start-point, end-point], and each point is [x, y]\n  // Object : to handle saddle cases, whos output depends on mean value of all 4 corners\n  //  key: code of mean value (0 or 1)\n  //  value: Array , as above defines one or two line segments\n  0: [],\n  1: [[OFFSET.W, OFFSET.S]],\n  2: [[OFFSET.S, OFFSET.E]],\n  3: [[OFFSET.W, OFFSET.E]],\n  4: [[OFFSET.N, OFFSET.E]],\n  5: {\n    0: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]]\n  },\n  6: [[OFFSET.N, OFFSET.S]],\n  7: [[OFFSET.W, OFFSET.N]],\n  8: [[OFFSET.W, OFFSET.N]],\n  9: [[OFFSET.N, OFFSET.S]],\n  10: {\n    0: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]]\n  },\n  11: [[OFFSET.N, OFFSET.E]],\n  12: [[OFFSET.W, OFFSET.E]],\n  13: [[OFFSET.S, OFFSET.E]],\n  14: [[OFFSET.W, OFFSET.S]],\n  15: []\n};\n\nfunction ternaryToIndex(ternary) {\n  return parseInt(ternary, 4);\n}\n\nexport const ISOBANDS_CODE_OFFSET_MAP = {\n  // Below list of cases, follow the same order as in above mentioned wiki page.\n  // Each case has its code on first commented line // T,TR,R,C\n  // where T: Top, TR: Top-right, R: Right and C: current, each will be either 0, 1 or 2\n  // final code is binary representation of above code , where takes 2 digits\n  // for example:  code 2-2-2-1 => 10-10-10-01 => 10101001 => 169\n\n  // no contours\n  [ternaryToIndex('0000')]: [],\n  [ternaryToIndex('2222')]: [],\n\n  // single triangle\n  [ternaryToIndex('2221')]: [SW_TRIANGLE],\n  [ternaryToIndex('2212')]: [SE_TRIANGLE],\n  [ternaryToIndex('2122')]: [NE_TRIANGLE],\n  [ternaryToIndex('1222')]: [NW_TRIANGLE],\n  [ternaryToIndex('0001')]: [SW_TRIANGLE],\n  [ternaryToIndex('0010')]: [SE_TRIANGLE],\n  [ternaryToIndex('0100')]: [NE_TRIANGLE],\n  [ternaryToIndex('1000')]: [NW_TRIANGLE],\n\n  // single trapezoid\n  [ternaryToIndex('2220')]: [SW_TRAPEZOID],\n  [ternaryToIndex('2202')]: [SE_TRAPEZOID],\n  [ternaryToIndex('2022')]: [NE_TRAPEZOID],\n  [ternaryToIndex('0222')]: [NW_TRAPEZOID],\n  [ternaryToIndex('0002')]: [SW_TRAPEZOID],\n  [ternaryToIndex('0020')]: [SE_TRAPEZOID],\n  [ternaryToIndex('0200')]: [NE_TRAPEZOID],\n  [ternaryToIndex('2000')]: [NW_TRAPEZOID],\n\n  // single rectangle\n  [ternaryToIndex('0011')]: [S_RECTANGLE],\n  [ternaryToIndex('0110')]: [E_RECTANGLE],\n  [ternaryToIndex('1100')]: [N_RECTANGLE],\n  [ternaryToIndex('1001')]: [W_RECTANGLE],\n  [ternaryToIndex('2211')]: [S_RECTANGLE],\n  [ternaryToIndex('2112')]: [E_RECTANGLE],\n  [ternaryToIndex('1122')]: [N_RECTANGLE],\n  [ternaryToIndex('1221')]: [W_RECTANGLE],\n  [ternaryToIndex('2200')]: [EW_RECTANGEL],\n  [ternaryToIndex('2002')]: [SN_RECTANGEL],\n  [ternaryToIndex('0022')]: [EW_RECTANGEL],\n  [ternaryToIndex('0220')]: [SN_RECTANGEL],\n\n  // single square\n  // 1111\n  [ternaryToIndex('1111')]: [SQUARE],\n\n  // single pentagon\n  [ternaryToIndex('1211')]: [SW_PENTAGON],\n  [ternaryToIndex('2111')]: [SE_PENTAGON],\n  [ternaryToIndex('1112')]: [NE_PENTAGON],\n  [ternaryToIndex('1121')]: [NW_PENTAGON],\n  [ternaryToIndex('1011')]: [SW_PENTAGON],\n  [ternaryToIndex('0111')]: [SE_PENTAGON],\n  [ternaryToIndex('1110')]: [NE_PENTAGON],\n  [ternaryToIndex('1101')]: [NW_PENTAGON],\n  [ternaryToIndex('1200')]: [NW_N_PENTAGON],\n  [ternaryToIndex('0120')]: [NE_E_PENTAGON],\n  [ternaryToIndex('0012')]: [SE_S_PENTAGON],\n  [ternaryToIndex('2001')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1022')]: [NW_N_PENTAGON],\n  [ternaryToIndex('2102')]: [NE_E_PENTAGON],\n  [ternaryToIndex('2210')]: [SE_S_PENTAGON],\n  [ternaryToIndex('0221')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1002')]: [NW_W_PENTAGON],\n  [ternaryToIndex('2100')]: [NE_N_PENTAGON],\n  [ternaryToIndex('0210')]: [SE_E_PENTAGON],\n  [ternaryToIndex('0021')]: [SW_S_PENTAGON],\n  [ternaryToIndex('1220')]: [NW_W_PENTAGON],\n  [ternaryToIndex('0122')]: [NE_N_PENTAGON],\n  [ternaryToIndex('2012')]: [SE_E_PENTAGON],\n  [ternaryToIndex('2201')]: [SW_S_PENTAGON],\n\n  // single hexagon\n  [ternaryToIndex('0211')]: [S_HEXAGON],\n  [ternaryToIndex('2110')]: [E_HEXAGON],\n  [ternaryToIndex('1102')]: [N_HEXAGON],\n  [ternaryToIndex('1021')]: [W_HEXAGON],\n  [ternaryToIndex('2011')]: [S_HEXAGON],\n  [ternaryToIndex('0112')]: [E_HEXAGON],\n  [ternaryToIndex('1120')]: [N_HEXAGON],\n  [ternaryToIndex('1201')]: [W_HEXAGON],\n  [ternaryToIndex('2101')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('0121')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('1012')]: [NW_SE_HEXAGON],\n  [ternaryToIndex('1210')]: [NW_SE_HEXAGON],\n\n  // 6-sided polygons based on mean weight\n  // NOTE: merges mean value codes for extreme changes (as per above Wiki doc)\n  [ternaryToIndex('0101')]: {\n    0: [SW_TRIANGLE, NE_TRIANGLE],\n    1: [SW_NE_HEXAGON],\n    2: [SW_NE_HEXAGON]\n  },\n  [ternaryToIndex('1010')]: {\n    0: [NW_TRIANGLE, SE_TRIANGLE],\n    1: [NW_SE_HEXAGON],\n    2: [NW_SE_HEXAGON]\n  },\n  [ternaryToIndex('2121')]: {\n    0: [SW_NE_HEXAGON],\n    1: [SW_NE_HEXAGON],\n    2: [SW_TRIANGLE, NE_TRIANGLE]\n  },\n  [ternaryToIndex('1212')]: {\n    0: [NW_SE_HEXAGON],\n    1: [NW_SE_HEXAGON],\n    2: [NW_TRIANGLE, SE_TRIANGLE]\n  },\n\n  // 7-sided polygons based on mean weight\n  [ternaryToIndex('2120')]: {\n    0: [NE_HEPTAGON],\n    1: [NE_HEPTAGON],\n    2: [SW_TRAPEZOID, NE_TRIANGLE]\n  },\n  [ternaryToIndex('2021')]: {\n    0: [SW_HEPTAGON],\n    1: [SW_HEPTAGON],\n    2: [SW_TRIANGLE, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('1202')]: {\n    0: [NW_HEPTAGON],\n    1: [NW_HEPTAGON],\n    2: [NW_TRIANGLE, SE_TRAPEZOID]\n  },\n  [ternaryToIndex('0212')]: {\n    0: [SE_HEPTAGON],\n    1: [SE_HEPTAGON],\n    2: [SE_TRIANGLE, NW_TRAPEZOID]\n  },\n  [ternaryToIndex('0102')]: {\n    0: [SW_TRAPEZOID, NE_TRIANGLE],\n    1: [NE_HEPTAGON],\n    2: [NE_HEPTAGON]\n  },\n  [ternaryToIndex('0201')]: {\n    0: [SW_TRIANGLE, NE_TRAPEZOID],\n    1: [SW_HEPTAGON],\n    2: [SW_HEPTAGON]\n  },\n  [ternaryToIndex('1020')]: {\n    0: [NW_TRIANGLE, SE_TRAPEZOID],\n    1: [NW_HEPTAGON],\n    2: [NW_HEPTAGON]\n  },\n  [ternaryToIndex('2010')]: {\n    0: [SE_TRIANGLE, NW_TRAPEZOID],\n    1: [SE_HEPTAGON],\n    2: [SE_HEPTAGON]\n  },\n\n  // 8-sided polygons based on mean weight\n  [ternaryToIndex('2020')]: {\n    0: [NW_TRAPEZOID, SE_TRAPEZOID],\n    1: [OCTAGON],\n    2: [SW_TRAPEZOID, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('0202')]: {\n    0: [NE_TRAPEZOID, SW_TRAPEZOID],\n    1: [OCTAGON],\n    2: [NW_TRAPEZOID, SE_TRAPEZOID]\n  }\n};\n"],"file":"marching-squares-codes.js"}