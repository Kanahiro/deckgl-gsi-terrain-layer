{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["Model","Transform","FEATURES","hasFeatures","isWebGL2","readPixelsToBuffer","withParameters","fp64arithmetic","log","project32","_mergeShaders","mergeShaders","DEFAULT_RUN_PARAMS","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","MAX_MIN_BLEND_EQUATION","EQUATION_MAP","DEFAULT_WEIGHT_PARAMS","PIXEL_SIZE","AGGREGATION_OPERATION","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS","AGGREGATE_ALL_FS","TRANSFORM_MEAN_VS","getFloatTexture","getFramebuffer","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","REQUIRED_FEATURES","WEBGL2","COLOR_ATTACHMENT_RGBA32F","BLEND_EQUATION_MINMAX","FLOAT_BLEND","TEXTURE_FLOAT","GPUGridAggregator","aggregationData","pixelIndex","index","results","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","countsData","size","numCells","length","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","opts","id","state","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","_setupModels","gridAggregationModel","allAggregationModel","meanTransform","deleteResources","setState","aggregationParams","_normalizeAggregationParams","_runAggregation","weightId","data","aggregationBuffer","getData","arrayName","bufferName","shaderOptions","modelDirty","Object","assign","weights","normalizeWeightParams","updateObject","needMin","needMax","combineMaxMin","aggregationTexture","target","sourceType","maxMinBuffer","maxMinTexture","minBuffer","minTexture","maxBuffer","maxTexture","_trackGPUResultBuffers","cellSize","projectPoints","attributes","moduleSettings","numCol","numRow","translation","scaling","gridSize","parameters","blend","depthTest","blendFunc","uniforms","_renderToWeightsTexture","_renderToMaxMinTexture","blendEquation","minOrMaxFb","clearParams","clearColor","framebuffer","viewport","clear","draw","uSampler","texture","operation","MIN","MEAN","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","width","height","update","getMeanTransform","run","attach","_updateModels","_setupFramebuffers","_renderAggregateData","_getAggregateData","framebufferSize","resize","SUM","_getMinMaxTexture","name","getAggregationModel","instanceCount","getAllAggregationModel","vertexCount","_setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount","result","Array","isArray","forEach","obj","shaders","vs","fs","modules","drawMode","isInstanced","position","_targetTextureVarying"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  withParameters\n} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {log, project32, _mergeShaders as mergeShaders} from '@deck.gl/core';\n\nimport {\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  DEFAULT_WEIGHT_PARAMS,\n  PIXEL_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS from './aggregate-all-vs.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer} from './../resource-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.WEBGL2, // TODO: Remove after trannsform refactor\n  FEATURES.COLOR_ATTACHMENT_RGBA32F,\n  FEATURES.BLEND_EQUATION_MINMAX,\n  FEATURES.FLOAT_BLEND,\n  FEATURES.TEXTURE_FLOAT\n];\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, REQUIRED_FEATURES);\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this._normalizeAggregationParams(opts);\n    if (!this._hasGPUSupport) {\n      log.log(1, 'GPUGridAggregator: not supported')();\n    }\n    return this._runAggregation(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  updateShaders(shaderOptions = {}) {\n    this.setState({shaderOptions, modelDirty: true});\n  }\n\n  // PRIVATE\n\n  _normalizeAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {weights} = aggregationParams;\n    if (weights) {\n      aggregationParams.weights = normalizeWeightParams(weights);\n    }\n    return aggregationParams;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  // GPU Aggregation methods\n\n  _getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources\n    } = this.state;\n    const {weights} = opts;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n        results[id].maxMinTexture = resources[`${id}-maxMinTexture`];\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].minTexture = resources[`${id}-minTexture`];\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].maxTexture = resources[`${id}-maxTexture`];\n        }\n      }\n    }\n    this._trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  _renderAggregateData(opts) {\n    const {\n      cellSize,\n      projectPoints,\n      attributes,\n      moduleSettings,\n      numCol,\n      numRow,\n      weights,\n      translation,\n      scaling\n    } = opts;\n    const {maxMinFramebuffers, minFramebuffers, maxFramebuffers} = this.state;\n\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const uniforms = {\n      cellSize,\n      gridSize,\n      projectPoints,\n      translation,\n      scaling\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this._renderToWeightsTexture({\n        id,\n        parameters,\n        moduleSettings,\n        uniforms,\n        gridSize,\n        attributes,\n        weights\n      });\n      if (combineMaxMin) {\n        this._renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            clearParams: {clearColor: [0, 0, 0, 0]},\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  _renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    withParameters(\n      gl,\n      {\n        ...clearParams,\n        framebuffer: minOrMaxFb,\n        viewport: [0, 0, gridSize[0], gridSize[1]]\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        allAggregationModel.draw({\n          parameters,\n          uniforms: {\n            uSampler: framebuffers[id].texture,\n            gridSize,\n            combineMaxMin\n          }\n        });\n      }\n    );\n  }\n\n  // render all data points to aggregate weights\n  _renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize, weights} = opts;\n    const {framebuffers, equations, weightAttributes} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(\n      gl,\n      {\n        framebuffer: framebuffers[id],\n        viewport: [0, 0, gridSize[0], gridSize[1]],\n        clearColor\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        const attributes = {weights: weightAttributes[id]};\n        gridAggregationModel.draw({\n          parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n          moduleSettings,\n          uniforms,\n          attributes\n        });\n      }\n    );\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      if (this.meanTransform) {\n        this.meanTransform.update(transformOptions);\n      } else {\n        this.meanTransform = getMeanTransform(gl, transformOptions);\n      }\n      this.meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  _runAggregation(opts) {\n    this._updateModels(opts);\n    this._setupFramebuffers(opts);\n    this._renderAggregateData(opts);\n    const results = this._getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth, max-statements*/\n  _setupFramebuffers(opts) {\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations\n    } = this.state;\n    const {weights} = opts;\n    const {numCol, numRow} = opts;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation] || EQUATION_MAP.SUM;\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            texture = weights[id].maxMinTexture || this._getMinMaxTexture(`${id}-maxMinTexture`);\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {id: `${id}-maxMinFb`, texture});\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              texture = weights[id].minTexture || this._getMinMaxTexture(`${id}-minTexture`);\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              texture = weights[id].maxTexture || this._getMinMaxTexture(`${id}-maxTexture`);\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth, max-statements */\n\n  _getMinMaxTexture(name) {\n    const {resources} = this.state;\n    if (!resources[name]) {\n      resources[name] = getFloatTexture(this.gl, {id: `resourceName`});\n    }\n    return resources[name];\n  }\n\n  _setupModels({numCol = 0, numRow = 0} = {}) {\n    const {gl} = this;\n    const {shaderOptions} = this.state;\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n    if (!this.allAggregationModel) {\n      const instanceCount = numCol * numRow;\n      this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n    }\n  }\n\n  // set up buffers for all weights\n  _setupWeightAttributes(opts) {\n    const {weightAttributes} = this.state;\n    const {weights} = opts;\n    for (const id in weights) {\n      weightAttributes[id] = opts.attributes[id];\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  _trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  _updateModels(opts) {\n    const {vertexCount, attributes, numCol, numRow} = opts;\n    const {modelDirty} = this.state;\n\n    if (modelDirty) {\n      this._setupModels(opts);\n      this.setState({modelDirty: false});\n    }\n\n    // this maps color/elevation to weight name.\n    this._setupWeightAttributes(opts);\n\n    this.gridAggregationModel.setVertexCount(vertexCount);\n    this.gridAggregationModel.setAttributes(attributes);\n\n    this.allAggregationModel.setInstanceCount(numCol * numRow);\n  }\n}\n\n// HELPER METHODS\n\nfunction normalizeWeightParams(weights) {\n  const result = {};\n  for (const id in weights) {\n    result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n  }\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(obj => {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  const shaders = mergeShaders(\n    {\n      vs: AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: [fp64arithmetic, project32]\n    },\n    shaderOptions\n  );\n\n  return new Model(gl, {\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    ...shaders\n  });\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: AGGREGATE_ALL_VS,\n    fs: AGGREGATE_ALL_FS,\n    modules: [fp64arithmetic],\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    isInstanced: true,\n    instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new Transform(\n    gl,\n    Object.assign(\n      {},\n      {\n        vs: TRANSFORM_MEAN_VS,\n        _targetTextureVarying: 'meanValues'\n      },\n      opts\n    )\n  );\n}\n"],"file":"gpu-grid-aggregator.js"}