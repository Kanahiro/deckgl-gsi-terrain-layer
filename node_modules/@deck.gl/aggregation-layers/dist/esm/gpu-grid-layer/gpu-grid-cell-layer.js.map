{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["Layer","fp64LowPart","project32","gouraudLighting","picking","Model","CubeGeometry","fp64arithmetic","defaultColorRange","colorRangeToFlatArray","vs","fs","COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","modules","gl","context","attributeManager","getAttributeManager","addInstanced","colors","size","noAlloc","elevations","model","_getModel","_setupUniformBuffer","setState","Object","assign","getShaders","id","props","geometry","isInstanced","uniforms","colorMaxMinBuffer","elevationMaxMinBuffer","gridOriginLow","gridOffsetLow","domainUniforms","getDomainUniforms","bindUniformBuffers","state","setUniforms","draw","unbindUniformBuffers","bind","target","index","unbind","colorDomainValid","elevationDomainValid","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, fp64LowPart, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', min: 0, value: [1, 1]},\n  gridOrigin: {type: 'array', min: 0, value: [0, 0]},\n  gridOffset: {type: 'array', min: 0, value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: true // Use lighting module defaults\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking, fp64arithmetic]\n    });\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange,\n      colorMaxMinBuffer,\n      elevationMaxMinBuffer\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n    this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, domainUniforms, {\n          cellSize,\n          offset,\n          extruded,\n          elevationScale,\n          coverage,\n          gridSize,\n          gridOrigin,\n          gridOriginLow,\n          gridOffset,\n          gridOffsetLow,\n          colorRange,\n          elevationRange\n        })\n      )\n      .draw();\n    this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n  }\n\n  bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-cell-layer.js"}