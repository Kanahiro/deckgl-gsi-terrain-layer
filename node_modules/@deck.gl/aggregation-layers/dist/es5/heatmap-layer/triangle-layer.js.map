{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.js"],"names":["defaultProps","count","texture","onRedraw","type","value","compare","TriangleLayer","vs","fs","modules","project32","gl","context","attributeManager","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","Model","Object","assign","getShaders","id","geometry","Geometry","drawMode","uniforms","state","maxTexture","colorTexture","intensity","threshold","colorDomain","setUniforms","draw","Layer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,QAAQ,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,IAA1B;AAAgCC,IAAAA,OAAO,EAAE;AAAzC;AAHS,CAArB;;IAMqBC,a;;;;;;;;;;;;iCACN;AACX,aAAO;AAACC,QAAAA,EAAE,EAAFA,+BAAD;AAAKC,QAAAA,EAAE,EAAFA,iCAAL;AAASC,QAAAA,OAAO,EAAE,CAACC,gBAAD;AAAlB,OAAP;AACD;;;sCAEiB;AAAA,UACTC,EADS,GACH,KAAKC,OADF,CACTD,EADS;AAEhB,UAAME,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,MAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,QAAAA,SAAS,EAAE;AAACC,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,OAAO,EAAE;AAAnB,SADQ;AAEnBC,QAAAA,SAAS,EAAE;AAACF,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,OAAO,EAAE;AAAnB;AAFQ,OAArB;AAIA,WAAKE,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAE,KAAKC,SAAL,CAAeX,EAAf;AADK,OAAd;AAGD;;;8BAESA,E,EAAI;AAAA,UACLY,WADK,GACU,KAAKC,KADf,CACLD,WADK;AAGZ,aAAO,IAAIE,WAAJ,CACLd,EADK,EAELe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,UAAL,EAAlB,EAAqC;AACnCC,QAAAA,EAAE,EAAE,KAAKL,KAAL,CAAWK,EADoB;AAEnCC,QAAAA,QAAQ,EAAE,IAAIC,cAAJ,CAAa;AACrBC,UAAAA,QAAQ,GADa;AAErBT,UAAAA,WAAW,EAAXA;AAFqB,SAAb;AAFyB,OAArC,CAFK,CAAP;AAUD;;;+BAEgB;AAAA,UAAXU,QAAW,QAAXA,QAAW;AAAA,UACRZ,KADQ,GACC,KAAKa,KADN,CACRb,KADQ;AAAA,wBAWX,KAAKG,KAXM;AAAA,UAIbvB,OAJa,eAIbA,OAJa;AAAA,UAKbkC,UALa,eAKbA,UALa;AAAA,UAMbC,YANa,eAMbA,YANa;AAAA,UAObC,SAPa,eAObA,SAPa;AAAA,UAQbC,SARa,eAQbA,SARa;AAAA,UASbC,WATa,eASbA,WATa;AAAA,UAUbrC,QAVa,eAUbA,QAVa;;AAaf,UAAIA,QAAJ,EAAc;AACZA,QAAAA,QAAQ;AACT;;AAEDmB,MAAAA,KAAK,CACFmB,WADH,iCAEOP,QAFP;AAGIhC,QAAAA,OAAO,EAAPA,OAHJ;AAIIkC,QAAAA,UAAU,EAAVA,UAJJ;AAKIC,QAAAA,YAAY,EAAZA,YALJ;AAMIC,QAAAA,SAAS,EAATA,SANJ;AAOIC,QAAAA,SAAS,EAATA,SAPJ;AAQIC,QAAAA,WAAW,EAAXA;AARJ,UAUGE,IAVH;AAWD;;;EA5DwCC,Y;;;AA+D3CpC,aAAa,CAACqC,SAAd,GAA0B,eAA1B;AACArC,aAAa,CAACP,YAAd,GAA6BA,YAA7B","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nconst defaultProps = {\n  count: 0, // number of triangles to be rendered\n  texture: null,\n  onRedraw: {type: 'function', value: null, compare: false}\n};\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount\n        })\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      colorDomain,\n      onRedraw\n    } = this.props;\n\n    if (onRedraw) {\n      onRedraw();\n    }\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\nTriangleLayer.defaultProps = defaultProps;\n"],"file":"triangle-layer.js"}