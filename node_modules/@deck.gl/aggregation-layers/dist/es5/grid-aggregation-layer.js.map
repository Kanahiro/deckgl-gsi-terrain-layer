{"version":3,"sources":["../../src/grid-aggregation-layer.js"],"names":["GridAggregationLayer","dimensions","gl","context","setState","layerData","gpuGridAggregator","GPUGridAggregator","id","cpuGridAggregator","pointToDensityGridDataCPU","opts","updateAggregationState","state","aggregationDataDirty","aggregationWeightsDirty","gpuAggregation","getNumInstances","aggregationDirty","_updateAggregation","_updateWeightBins","_uploadAggregationResults","count","weights","aggregationBuffer","shaders","updateShaders","log","assert","numRow","numCol","dataBytes","name","weight","Buffer","byteLength","accessor","size","type","divisor","aggregationData","maxMinData","maxData","minData","gridOffset","posOffset","translation","scaling","boundingBox","projectPoints","props","viewport","attributes","getAttributes","vertexCount","result","run","cellSize","xOffset","yOffset","moduleSettings","getModuleSettings","getValue","sortedBins","BinSorter","data","aggregatedBins","minValue","maxValue","totalCount","ELEMENTCOUNT","aggregationSize","Float32Array","fill","bin","i","lonIdx","latIdx","value","counts","cellIndex","updateResults","AggregationLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport AggregationLayer from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {Buffer} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport BinSorter from './utils/bin-sorter';\nimport {pointToDensityGridDataCPU} from './cpu-grid-layer/grid-aggregator';\n\nexport default class GridAggregationLayer extends AggregationLayer {\n  initializeState({dimensions}) {\n    const {gl} = this.context;\n    super.initializeState(dimensions);\n    this.setState({\n      // CPU aggregation results\n      layerData: {},\n      gpuGridAggregator: new GPUGridAggregator(gl, {id: `${this.id}-gpu-aggregator`}),\n      cpuGridAggregator: pointToDensityGridDataCPU\n    });\n  }\n\n  updateState(opts) {\n    // get current attributes\n    super.updateState(opts);\n\n    this.updateAggregationState(opts);\n\n    const {aggregationDataDirty, aggregationWeightsDirty, gpuAggregation} = this.state;\n    if (this.getNumInstances() <= 0) {\n      return;\n    }\n    let aggregationDirty = false;\n    // CPU aggregation is two steps\n    // 1. Create bins (based on cellSize and position) 2. Aggregate weights for each bin\n    // For GPU aggregation both above steps are combined into one step\n\n    // step-1\n    if (aggregationDataDirty || (gpuAggregation && aggregationWeightsDirty)) {\n      this._updateAggregation(opts);\n      aggregationDirty = true;\n    }\n    // step-2 (Applicalbe for CPU aggregation only)\n    if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n      this._updateWeightBins();\n      this._uploadAggregationResults();\n      aggregationDirty = true;\n    }\n\n    this.setState({aggregationDirty});\n  }\n\n  finalizeState() {\n    const {count} = this.state.weights;\n    if (count && count.aggregationBuffer) {\n      count.aggregationBuffer.delete();\n    }\n    const {gpuGridAggregator} = this.state;\n    if (gpuGridAggregator) {\n      gpuGridAggregator.delete();\n    }\n    super.finalizeState();\n  }\n\n  updateShaders(shaders) {\n    if (this.state.gpuAggregation) {\n      this.state.gpuGridAggregator.updateShaders(shaders);\n    }\n  }\n\n  // Methods that can be overriden by subclasses for customizations\n\n  updateAggregationState(opts) {\n    // Sublayers should implement this method.\n    log.assert(false);\n  }\n\n  allocateResources(numRow, numCol) {\n    if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n      const dataBytes = numCol * numRow * 4 * 4;\n      const gl = this.context.gl;\n      const {weights} = this.state;\n      for (const name in weights) {\n        const weight = weights[name];\n        if (weight.aggregationBuffer) {\n          weight.aggregationBuffer.delete();\n        }\n        weight.aggregationBuffer = new Buffer(gl, {\n          byteLength: dataBytes,\n          accessor: {\n            size: 4,\n            type: GL.FLOAT,\n            divisor: 1\n          }\n        });\n      }\n    }\n  }\n\n  updateResults({aggregationData, maxMinData, maxData, minData}) {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = aggregationData;\n      count.maxMinData = maxMinData;\n      count.maxData = maxData;\n      count.minData = minData;\n    }\n  }\n\n  // Private\n\n  _updateAggregation(opts) {\n    const {\n      cpuGridAggregator,\n      gpuGridAggregator,\n      gridOffset,\n      posOffset,\n      translation = [0, 0],\n      scaling = [0, 0, 0],\n      boundingBox,\n      projectPoints,\n      gpuAggregation,\n      numCol,\n      numRow\n    } = this.state;\n    const {props} = opts;\n    const {viewport} = this.context;\n    const attributes = this.getAttributes();\n    const vertexCount = this.getNumInstances();\n\n    if (!gpuAggregation) {\n      const result = cpuGridAggregator(props, {\n        gridOffset,\n        projectPoints,\n        attributes,\n        viewport,\n        posOffset,\n        boundingBox\n      });\n      this.setState({\n        layerData: result\n      });\n    } else {\n      const {weights} = this.state;\n      gpuGridAggregator.run({\n        weights,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n        numCol,\n        numRow,\n        translation,\n        scaling,\n        vertexCount,\n        projectPoints,\n        attributes,\n        moduleSettings: this.getModuleSettings()\n      });\n    }\n  }\n\n  _updateWeightBins() {\n    const {getValue} = this.state;\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {getValue});\n    this.setState({sortedBins});\n  }\n\n  _uploadAggregationResults() {\n    const {numCol, numRow} = this.state;\n    const {data} = this.state.layerData;\n    const {aggregatedBins, minValue, maxValue, totalCount} = this.state.sortedBins;\n\n    const ELEMENTCOUNT = 4;\n    const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n    const aggregationData = new Float32Array(aggregationSize).fill(0);\n    for (const bin of aggregatedBins) {\n      const {lonIdx, latIdx} = data[bin.i];\n      const {value, counts} = bin;\n      const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n      aggregationData[cellIndex] = value;\n      aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n    }\n    const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n    const maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n    const minData = new Float32Array([minValue, 0, 0, totalCount]);\n    this.updateResults({aggregationData, maxMinData, maxData, minData});\n  }\n}\n\nGridAggregationLayer.layerName = 'GridAggregationLayer';\n"],"file":"grid-aggregation-layer.js"}