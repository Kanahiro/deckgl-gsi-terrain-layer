{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["nop","defaultProps","colorDomain","colorRange","defaultColorRange","getColorValue","type","value","getColorWeight","x","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","pointToHexbin","getPosition","position","material","_filterData","optional","HexagonLayer","changeFlags","somethingChanged","cpuAggregator","CPUAggregator","getAggregator","props","getCellSize","state","aggregatorState","hexagonVertices","attributeManager","getAttributeManager","add","positions","size","accessor","opts","oldVertices","propsOrDataChanged","setState","updateState","viewport","context","attributes","getAttributes","layerData","vertices","convertLatLngToMeterOffset","updateRadiusAngle","getDistanceScales","unitsPerMeter","radiusCommon","angle","Array","isArray","length","vertex0","vertex3","centroid","centroidFlat","projectFlat","metersPerUnit","map","vt","vtFlat","log","error","info","getPickingInfo","cell","getAccessor","getUpdateTriggers","transitions","SubLayerClass","getSubLayerClass","ColumnLayer","updateTriggers","_getSublayerUpdateTriggers","geometry","diskResolution","getFillColor","_onGetSublayerColor","bind","getElevation","_onGetSublayerElevation","getSubLayerProps","id","data","AggregationLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class HexagonLayer extends AggregationLayer {\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      hexagonVertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calculated using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {cpuAggregator, hexagonVertices: oldVertices} = this.state;\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      this.setState({\n        // make a copy of the internal state of cpuAggregator for testing\n        aggregatorState: cpuAggregator.updateState(opts, {\n          viewport: this.context.viewport,\n          attributes: this.getAttributes()\n        })\n      });\n    }\n\n    // if user provided custom aggregator and returns hexagonVertices,\n    // Need to recalculate radius and angle based on vertices\n    const {hexagonVertices} = cpuAggregator.state.layerData || {};\n\n    if (hexagonVertices && oldVertices !== hexagonVertices) {\n      const vertices = this.convertLatLngToMeterOffset(hexagonVertices);\n      if (vertices) {\n        this.setState({\n          hexagonVertices,\n          vertices\n        });\n      }\n    } else {\n      // update radius angle by viewport\n      this.updateRadiusAngle();\n    }\n  }\n\n  updateRadiusAngle(vertices) {\n    const {viewport} = this.context;\n    const {unitsPerMeter} = viewport.getDistanceScales();\n    const {cpuAggregator} = this.state;\n\n    if (cpuAggregator.state.layerData && cpuAggregator.state.layerData.radiusCommon) {\n      const {radiusCommon} = cpuAggregator.state.layerData;\n      const radius = radiusCommon / unitsPerMeter[0];\n\n      // convert radius in common to meter\n      this.setState({angle: 90, radius});\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {viewport} = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      // get centroid of hexagons\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n\n      const {metersPerUnit} = viewport.getDistanceScales(centroid);\n\n      // offset all points by centroid to meter offset\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n\n        return [\n          (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n          (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n        ];\n      });\n\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {angle, radius, cpuAggregator, vertices} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices && vertices.length ? {vertices, radius: 1} : {radius, angle};\n    return new SubLayerClass(\n      {\n        ...geometry,\n        diskResolution: 6,\n        elevationScale,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"],"file":"hexagon-layer.js"}