{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.js"],"names":["defaultProps","colorDomain","colorRange","defaultColorRange","getColorWeight","type","value","x","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","position","extruded","material","DIMENSIONS","data","props","POSITION_ATTRIBUTE_NAME","GPUGridLayer","gl","context","isSupported","GPUGridAggregator","log","error","dimensions","setState","gpuAggregation","projectPoints","weights","color","needMin","needMax","combineMaxMin","maxMinBuffer","Buffer","byteLength","accessor","size","divisor","elevation","positionAttributeName","attributeManager","getAttributeManager","add","fp64","use64bitPositions","opts","state","aggregationDirty","gridHash","index","numRow","numCol","boundingBox","gridOffset","gridSize","gridOrigin","xMin","yMin","xOffset","yOffset","yIndex","Math","floor","xIndex","latIdx","lonIdx","yPos","xPos","info","mode","object","gpuGridAggregator","getPositionForIndex","colorInfo","getAggregationData","Object","assign","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","translation","viewport","attributes","getAttributes","cpuAggregation","key","getHashKeyForIndex","cpuAggregationData","picked","Boolean","cellSizeMeters","SubLayerClass","getSubLayerClass","GPUGridCellLayer","getSubLayerProps","id","colors","aggregationBuffer","elevations","colorMaxMinBuffer","elevationMaxMinBuffer","numInstances","forEach","weight","oldProps","coordinateSystem","cellSizeChanged","positionsChanged","isAttributeChanged","attributesChanged","getNumInstances","width","height","allocateResources","aggregationDataDirty","isAggregationDirty","dimension","compareAll","_updateAccessors","operation","AGGREGATION_OPERATION","GridAggregationLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Buffer} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n// This layer only perform GPU aggregation, no need to seperate data and weight props\n// aggregation will be dirty when any of the props are changed.\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n  // rest of the changes are detected by `state.attributesChanged`\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nexport default class GPUGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      gpuAggregation: true,\n      projectPoints: false, // aggregation in world space\n      isSupported,\n      weights: {\n        color: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        },\n        elevation: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        }\n      },\n      positionAttributeName: 'positions'\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      color: {size: 3, accessor: 'getColorWeight'},\n      elevation: {size: 3, accessor: 'getElevationWeight'}\n    });\n  }\n\n  updateState(opts) {\n    if (this.state.isSupported === false) {\n      // Skip update, layer not supported\n      return;\n    }\n    super.updateState(opts);\n    const {aggregationDirty} = this.state;\n    if (aggregationDirty) {\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({\n        gridHash: null\n      });\n    }\n  }\n\n  getHashKeyForIndex(index) {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index) {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    let object = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('color'))\n      );\n      const elevationInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('elevation'))\n      );\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {props} = this;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const {gridOffset, translation, boundingBox} = this.state;\n          const {viewport} = this.context;\n          const attributes = this.getAttributes();\n          const cpuAggregation = pointToDensityGridDataCPU(props, {\n            gridOffset,\n            attributes,\n            viewport,\n            translation,\n            boundingBox\n          });\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, numRow, numCol, gridOrigin, gridOffset} = this.state;\n    const {color, elevation} = weights;\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize: [numCol, numRow],\n        gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      }\n    );\n  }\n\n  finalizeState() {\n    const {color, elevation} = this.state.weights;\n    [color, elevation].forEach(weight => {\n      const {aggregationBuffer, maxMinBuffer} = weight;\n      maxMinBuffer.delete();\n      if (aggregationBuffer) {\n        aggregationBuffer.delete();\n      }\n    });\n    super.finalizeState();\n  }\n\n  // Aggregation Overrides\n\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    const {dimensions} = this.state;\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    // any attribute changed\n    const attributesChanged = positionsChanged || this.isAttributeChanged();\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        translation,\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      attributesChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n    if (aggregationDataDirty) {\n      this._updateAccessors(opts);\n    }\n    this.setState({\n      aggregationDataDirty\n    });\n  }\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {colorAggregation, elevationAggregation} = opts.props;\n    const {color, elevation} = this.state.weights;\n    color.operation = AGGREGATION_OPERATION[colorAggregation];\n    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n  }\n}\n\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-layer.js"}