{"version":3,"sources":["../../../src/utils/cpu-aggregator.js"],"names":["nop","dimensionSteps","defaultDimensions","key","accessor","pickingInfo","getBins","triggers","value","prop","updateTrigger","weight","aggregation","filterData","getDomain","lowerPercentile","upperPercentile","scaleType","getScaleFunc","domain","range","onSet","props","nullValue","defaultGetCellSize","cellSize","CPUAggregator","opts","state","layerData","dimensions","changeFlags","dimensionUpdaters","_getCellSize","getCellSize","_getAggregator","getAggregator","_addDimension","aggregationParams","oldProps","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","aggregationDirty","dataChanged","getAggregatedData","dimensionChanges","getDimensionChanges","forEach","f","setState","updateObject","Object","assign","result","hexagons","data","aggregator","normalizeResult","getSortedBins","getValue","getValueChanged","needUpdateDimensionStep","setDimensionState","updateTriggersChanged","all","getPosition","dimension","getDimensionUpdaters","sortedBins","scaleFunc","updater","getDimensionSortedBins","getDimensionValueDomain","getDimensionScale","attributeAccessor","getSubLayerDimensionAttribute","dimensionStep","values","some","item","updaters","needUpdate","find","step","push","bind","length","_updateTriggers","updateTriggers","fromProp","Array","isArray","undefined","dimensionUpdater","BinSorter","_filterData","valueDomain","getValueDomainByScale","dimensionRange","dimensionDomain","getScaleFunction","cell","bin","binMap","index","counts","cv","isValueInDomain","accessors","info","isPicked","picked","object","binInfo","points","filteredPoints","Boolean","dimensionKey","hasOwnProperty"],"mappings":";;;;;;;;;;;;;;;;;AAmBA;;AACA;;AACA;;AAEA,SAASA,GAAT,GAAe,CAAE;;AAEjB,IAAMC,cAAc,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,cAAzB,CAAvB;AACA,IAAMC,kBAAiB,GAAG,CACxB;AACEC,EAAAA,GAAG,EAAE,WADP;AAEEC,EAAAA,QAAQ,EAAE,cAFZ;AAGEC,EAAAA,WAAW,EAAE,YAHf;AAIEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,eADD;AAELC,QAAAA,aAAa,EAAE;AAFV,OADC;AAKRC,MAAAA,MAAM,EAAE;AACNF,QAAAA,IAAI,EAAE,gBADA;AAENC,QAAAA,aAAa,EAAE;AAFT,OALA;AASRE,MAAAA,WAAW,EAAE;AACXH,QAAAA,IAAI,EAAE;AADK,OATL;AAYRI,MAAAA,UAAU,EAAE;AACVJ,QAAAA,IAAI,EAAE,aADI;AAEVC,QAAAA,aAAa,EAAE;AAFL;AAZJ;AADH,GAJX;AAuBEI,EAAAA,SAAS,EAAE;AACTP,IAAAA,QAAQ,EAAE;AACRQ,MAAAA,eAAe,EAAE;AACfN,QAAAA,IAAI,EAAE;AADS,OADT;AAIRO,MAAAA,eAAe,EAAE;AACfP,QAAAA,IAAI,EAAE;AADS,OAJT;AAORQ,MAAAA,SAAS,EAAE;AACTR,QAAAA,IAAI,EAAE;AADG;AAPH;AADD,GAvBb;AAoCES,EAAAA,YAAY,EAAE;AACZX,IAAAA,QAAQ,EAAE;AACRY,MAAAA,MAAM,EAAE;AAACV,QAAAA,IAAI,EAAE;AAAP,OADA;AAERW,MAAAA,KAAK,EAAE;AAACX,QAAAA,IAAI,EAAE;AAAP;AAFC,KADE;AAKZY,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF;AALK,GApChB;AA6CEC,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AA7Cb,CADwB,EAgDxB;AACEpB,EAAAA,GAAG,EAAE,WADP;AAEEC,EAAAA,QAAQ,EAAE,cAFZ;AAGEC,EAAAA,WAAW,EAAE,gBAHf;AAIEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,mBADD;AAELC,QAAAA,aAAa,EAAE;AAFV,OADC;AAKRC,MAAAA,MAAM,EAAE;AACNF,QAAAA,IAAI,EAAE,oBADA;AAENC,QAAAA,aAAa,EAAE;AAFT,OALA;AASRE,MAAAA,WAAW,EAAE;AACXH,QAAAA,IAAI,EAAE;AADK,OATL;AAYRI,MAAAA,UAAU,EAAE;AACVJ,QAAAA,IAAI,EAAE,aADI;AAEVC,QAAAA,aAAa,EAAE;AAFL;AAZJ;AADH,GAJX;AAuBEI,EAAAA,SAAS,EAAE;AACTP,IAAAA,QAAQ,EAAE;AACRQ,MAAAA,eAAe,EAAE;AACfN,QAAAA,IAAI,EAAE;AADS,OADT;AAIRO,MAAAA,eAAe,EAAE;AACfP,QAAAA,IAAI,EAAE;AADS,OAJT;AAORQ,MAAAA,SAAS,EAAE;AACTR,QAAAA,IAAI,EAAE;AADG;AAPH;AADD,GAvBb;AAoCES,EAAAA,YAAY,EAAE;AACZX,IAAAA,QAAQ,EAAE;AACRY,MAAAA,MAAM,EAAE;AAACV,QAAAA,IAAI,EAAE;AAAP,OADA;AAERW,MAAAA,KAAK,EAAE;AAACX,QAAAA,IAAI,EAAE;AAAP;AAFC,KADE;AAKZY,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF;AALK,GApChB;AA6CEC,EAAAA,SAAS,EAAE,CAAC;AA7Cd,CAhDwB,CAA1B;;AAgGA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAF,KAAK;AAAA,SAAIA,KAAK,CAACG,QAAV;AAAA,CAAhC;;IACqBC,a;AACnB,yBAAYC,IAAZ,EAAkB;AAAA;AAChB,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,UAAU,EAAE;AAFD,KAAb;AAiBA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AAEA,SAAKC,YAAL,GAAoBN,IAAI,CAACO,WAAL,IAAoBV,kBAAxC;AACA,SAAKW,cAAL,GAAsBR,IAAI,CAACS,aAA3B;;AACA,SAAKC,aAAL,CAAmBV,IAAI,CAACG,UAAL,IAAmB5B,kBAAtC;AACD;;;;gCAMWyB,I,EAAMW,iB,EAAmB;AAAA,UAC5BC,QAD4B,GACIZ,IADJ,CAC5BY,QAD4B;AAAA,UAClBjB,KADkB,GACIK,IADJ,CAClBL,KADkB;AAAA,UACXS,WADW,GACIJ,IADJ,CACXI,WADW;AAEnC,WAAKS,mBAAL,CAAyBD,QAAzB,EAAmCjB,KAAnC,EAA0CS,WAA1C;AACA,UAAMU,eAAe,GAAG,KAAKC,oBAAL,CAA0BH,QAA1B,EAAoCjB,KAApC,EAA2CS,WAA3C,CAAxB;AACA,UAAIY,gBAAgB,GAAG,KAAvB;;AACA,UAAIZ,WAAW,CAACa,WAAZ,IAA2BH,eAA/B,EAAgD;AAE9C,aAAKI,iBAAL,CAAuBvB,KAAvB,EAA8BgB,iBAA9B;AACAK,QAAAA,gBAAgB,GAAG,IAAnB;AACD,OAJD,MAIO;AACL,YAAMG,gBAAgB,GAAG,KAAKC,mBAAL,CAAyBR,QAAzB,EAAmCjB,KAAnC,EAA0CS,WAA1C,KAA0D,EAAnF;AAEAe,QAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAAAC,CAAC;AAAA,iBAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,EAAhC;AAAA,SAA1B;AACAN,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AACD,WAAKO,QAAL,CAAc;AAACP,QAAAA,gBAAgB,EAAhBA;AAAD,OAAd;AAEA,aAAO,KAAKf,KAAZ;AACD;;;6BAGQuB,Y,EAAc;AACrB,WAAKvB,KAAL,GAAawB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKzB,KAAvB,EAA8BuB,YAA9B,CAAb;AACD;;;sCAGiBhD,G,EAAKgD,Y,EAAc;AACnC,WAAKD,QAAL,CAAc;AACZpB,QAAAA,UAAU,EAAEsB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKzB,KAAL,CAAWE,UAA7B,uCACT3B,GADS,EACHiD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKzB,KAAL,CAAWE,UAAX,CAAsB3B,GAAtB,CAAlB,EAA8CgD,YAA9C,CADG;AADA,OAAd;AAKD;;;sCAE4B;AAAA,UAAbG,MAAa,uEAAJ,EAAI;;AAE3B,UAAIA,MAAM,CAACC,QAAX,EAAqB;AACnB,eAAOH,MAAM,CAACC,MAAP,CAAc;AAACG,UAAAA,IAAI,EAAEF,MAAM,CAACC;AAAd,SAAd,EAAuCD,MAAvC,CAAP;AACD,OAFD,MAEO,IAAIA,MAAM,CAACzB,SAAX,EAAsB;AAC3B,eAAOuB,MAAM,CAACC,MAAP,CAAc;AAACG,UAAAA,IAAI,EAAEF,MAAM,CAACzB;AAAd,SAAd,EAAwCyB,MAAxC,CAAP;AACD;;AAED,aAAOA,MAAP;AACD;;;sCAEiBhC,K,EAAOgB,iB,EAAmB;AAC1C,UAAMmB,UAAU,GAAG,KAAKtB,cAAL,CAAoBb,KAApB,CAAnB;;AAEA,UAAMgC,MAAM,GAAGG,UAAU,CAACnC,KAAD,EAAQgB,iBAAR,CAAzB;AACA,WAAKY,QAAL,CAAc;AACZrB,QAAAA,SAAS,EAAE,KAAK6B,eAAL,CAAqBJ,MAArB;AADC,OAAd;AAGA,WAAKvB,WAAL,GAAmB;AACjBF,QAAAA,SAAS,EAAE;AADM,OAAnB;AAGA,WAAK8B,aAAL,CAAmBrC,KAAnB;AACD;;;wCAEmBiB,Q,EAAUjB,K,EAAOS,W,EAAa;AAChD,WAAK,IAAM5B,GAAX,IAAkB,KAAK6B,iBAAvB,EAA0C;AAAA,oCACH,KAAKA,iBAAL,CAAuB7B,GAAvB,EAA4BG,OAA5B,CAAoCC,QADjC;AAAA,YACjCC,KADiC,yBACjCA,KADiC;AAAA,YAC1BG,MAD0B,yBAC1BA,MAD0B;AAAA,YAClBC,WADkB,yBAClBA,WADkB;AAExC,YAAIgD,QAAQ,GAAGtC,KAAK,CAACd,KAAK,CAACC,IAAP,CAApB;AACA,YAAMoD,eAAe,GAAG,KAAKC,uBAAL,CACtB,KAAK9B,iBAAL,CAAuB7B,GAAvB,EAA4BG,OADN,EAEtBiC,QAFsB,EAGtBjB,KAHsB,EAItBS,WAJsB,CAAxB;;AAOA,YAAI8B,eAAe,IAAID,QAAQ,KAAK,IAApC,EAA0C;AAExCA,UAAAA,QAAQ,GAAG,6CAAatC,KAAK,CAACV,WAAW,CAACH,IAAb,CAAlB,EAAsCa,KAAK,CAACX,MAAM,CAACF,IAAR,CAA3C,CAAX;AACD;;AAED,YAAImD,QAAJ,EAAc;AACZ,eAAKG,iBAAL,CAAuB5D,GAAvB,EAA4B;AAACyD,YAAAA,QAAQ,EAARA;AAAD,WAA5B;AACD;AACF;AACF;;;yCAEoBrB,Q,EAAUjB,K,EAAOS,W,EAAa;AACjD,aACE,KAAKE,YAAL,CAAkBM,QAAlB,MAAgC,KAAKN,YAAL,CAAkBX,KAAlB,CAAhC,IACA,KAAKa,cAAL,CAAoBI,QAApB,MAAkC,KAAKJ,cAAL,CAAoBb,KAApB,CADlC,IAECS,WAAW,CAACiC,qBAAZ,KACEjC,WAAW,CAACiC,qBAAZ,CAAkCC,GAAlC,IAAyClC,WAAW,CAACiC,qBAAZ,CAAkCE,WAD7E,CAHH;AAMD;;;iCAGYpC,U,EAAY;AACvB,WAAKO,aAAL,CAAmBP,UAAnB;AACD;;;oCAE8B;AAAA;;AAAA,UAAjBA,UAAiB,uEAAJ,EAAI;AAC7BA,MAAAA,UAAU,CAACkB,OAAX,CAAmB,UAAAmB,SAAS,EAAI;AAAA,YACvBhE,GADuB,GAChBgE,SADgB,CACvBhE,GADuB;AAE9B,QAAA,KAAI,CAAC6B,iBAAL,CAAuB7B,GAAvB,IAA8B,KAAI,CAACiE,oBAAL,CAA0BD,SAA1B,CAA9B;AACA,QAAA,KAAI,CAACvC,KAAL,CAAWE,UAAX,CAAsB3B,GAAtB,IAA6B;AAC3ByD,UAAAA,QAAQ,EAAE,IADiB;AAE3BzC,UAAAA,MAAM,EAAE,IAFmB;AAG3BkD,UAAAA,UAAU,EAAE,IAHe;AAI3BC,UAAAA,SAAS,EAAEtE;AAJgB,SAA7B;AAMD,OATD;AAUD;;;+CAE+F;AAAA,UAA1EG,GAA0E,QAA1EA,GAA0E;AAAA,UAArEC,QAAqE,QAArEA,QAAqE;AAAA,UAA3DC,WAA2D,QAA3DA,WAA2D;AAAA,UAA9CC,OAA8C,QAA9CA,OAA8C;AAAA,UAArCQ,SAAqC,QAArCA,SAAqC;AAAA,UAA1BI,YAA0B,QAA1BA,YAA0B;AAAA,UAAZK,SAAY,QAAZA,SAAY;AAC9F,aAAO;AACLpB,QAAAA,GAAG,EAAHA,GADK;AAELC,QAAAA,QAAQ,EAARA,QAFK;AAGLC,QAAAA,WAAW,EAAXA,WAHK;AAILC,QAAAA,OAAO,EAAE8C,MAAM,CAACC,MAAP,CAAc;AAACkB,UAAAA,OAAO,EAAE,KAAKC;AAAf,SAAd,EAAsDlE,OAAtD,CAJJ;AAKLQ,QAAAA,SAAS,EAAEsC,MAAM,CAACC,MAAP,CAAc;AAACkB,UAAAA,OAAO,EAAE,KAAKE;AAAf,SAAd,EAAuD3D,SAAvD,CALN;AAMLI,QAAAA,YAAY,EAAEkC,MAAM,CAACC,MAAP,CAAc;AAACkB,UAAAA,OAAO,EAAE,KAAKG;AAAf,SAAd,EAAiDxD,YAAjD,CANT;AAOLyD,QAAAA,iBAAiB,EAAE,KAAKC,6BAAL,CAAmCzE,GAAnC,EAAwCoB,SAAxC;AAPd,OAAP;AASD;;;4CAEuBsD,a,EAAetC,Q,EAAUjB,K,EAAOS,W,EAAa;AAkBnE,aAAOqB,MAAM,CAAC0B,MAAP,CAAcD,aAAa,CAACtE,QAA5B,EAAsCwE,IAAtC,CAA2C,UAAAC,IAAI,EAAI;AACxD,YAAIA,IAAI,CAACtE,aAAT,EAAwB;AAEtB,iBACEqB,WAAW,CAACiC,qBAAZ,KACCjC,WAAW,CAACiC,qBAAZ,CAAkCC,GAAlC,IACClC,WAAW,CAACiC,qBAAZ,CAAkCgB,IAAI,CAACtE,aAAvC,CAFF,CADF;AAKD;;AAED,eAAO6B,QAAQ,CAACyC,IAAI,CAACvE,IAAN,CAAR,KAAwBa,KAAK,CAAC0D,IAAI,CAACvE,IAAN,CAApC;AACD,OAXM,CAAP;AAYD;;;wCAEmB8B,Q,EAAUjB,K,EAAOS,W,EAAa;AAAA;;AAEhD,UAAMkD,QAAQ,GAAG,EAAjB;;AAFgD,iCAKrC9E,GALqC;AAO9C,YAAM+E,UAAU,GAAGjF,cAAc,CAACkF,IAAf,CAAoB,UAAAC,IAAI;AAAA,iBACzC,MAAI,CAACtB,uBAAL,CACE,MAAI,CAAC9B,iBAAL,CAAuB7B,GAAvB,EAA4BiF,IAA5B,CADF,EAEE7C,QAFF,EAGEjB,KAHF,EAIES,WAJF,CADyC;AAAA,SAAxB,CAAnB;;AASA,YAAImD,UAAJ,EAAgB;AACdD,UAAAA,QAAQ,CAACI,IAAT,CACE,MAAI,CAACrD,iBAAL,CAAuB7B,GAAvB,EAA4B+E,UAA5B,EAAwCX,OAAxC,CAAgDe,IAAhD,CACE,MADF,EAEEhE,KAFF,EAGE,MAAI,CAACU,iBAAL,CAAuB7B,GAAvB,CAHF,CADF;AAOD;AAxB6C;;AAKhD,WAAK,IAAMA,GAAX,IAAkB,KAAK6B,iBAAvB,EAA0C;AAAA,cAA/B7B,GAA+B;AAoBzC;;AAED,aAAO8E,QAAQ,CAACM,MAAT,GAAkBN,QAAlB,GAA6B,IAApC;AACD;;;sCAEiB3D,K,EAAO;AAAA;;AACvB,UAAMkE,eAAe,GAAGlE,KAAK,CAACmE,cAAN,IAAwB,EAAhD;;AACA,UAAMA,cAAc,GAAG,EAAvB;;AAFuB,mCAIZtF,GAJY;AAAA,YAKdC,QALc,GAKF,MAAI,CAAC4B,iBAAL,CAAuB7B,GAAvB,CALE,CAKdC,QALc;AAOrBqF,QAAAA,cAAc,CAACrF,QAAD,CAAd,GAA2B,EAA3B;AAEAH,QAAAA,cAAc,CAAC+C,OAAf,CAAuB,UAAAoC,IAAI,EAAI;AAC7BhC,UAAAA,MAAM,CAAC0B,MAAP,CAAc,MAAI,CAAC9C,iBAAL,CAAuB7B,GAAvB,EAA4BiF,IAA5B,EAAkC7E,QAAhD,EAA0DyC,OAA1D,CACE,iBAA2B;AAAA,gBAAzBvC,IAAyB,SAAzBA,IAAyB;AAAA,gBAAnBC,aAAmB,SAAnBA,aAAmB;;AACzB,gBAAIA,aAAJ,EAAmB;AAIjB,kBAAMgF,QAAQ,GAAGF,eAAe,CAAC9E,aAAD,CAAhC;;AACA,kBAAI,yBAAOgF,QAAP,MAAoB,QAApB,IAAgC,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAArC,EAA8D;AAE5DtC,gBAAAA,MAAM,CAACC,MAAP,CAAcoC,cAAc,CAACrF,QAAD,CAA5B,EAAwCsF,QAAxC;AACD,eAHD,MAGO,IAAIA,QAAQ,KAAKG,SAAjB,EAA4B;AACjCJ,gBAAAA,cAAc,CAACrF,QAAD,CAAd,CAAyBK,IAAzB,IAAiCiF,QAAjC;AACD;AACF,aAXD,MAWO;AAELD,cAAAA,cAAc,CAACrF,QAAD,CAAd,CAAyBK,IAAzB,IAAiCa,KAAK,CAACb,IAAD,CAAtC;AACD;AACF,WAjBH;AAmBD,SApBD;AATqB;;AAIvB,WAAK,IAAMN,GAAX,IAAkB,KAAK6B,iBAAvB,EAA0C;AAAA,eAA/B7B,GAA+B;AA0BzC;;AAED,aAAOsF,cAAP;AACD;;;kCAEanE,K,EAAO;AACnB,WAAK,IAAMnB,GAAX,IAAkB,KAAK6B,iBAAvB,EAA0C;AACxC,aAAKwC,sBAAL,CAA4BlD,KAA5B,EAAmC,KAAKU,iBAAL,CAAuB7B,GAAvB,CAAnC;AACD;AACF;;;2CAEsBmB,K,EAAOwE,gB,EAAkB;AAAA,UACvC3F,GADuC,GAChC2F,gBADgC,CACvC3F,GADuC;AAAA,UAEvCyD,QAFuC,GAE3B,KAAKhC,KAAL,CAAWE,UAAX,CAAsB3B,GAAtB,CAF2B,CAEvCyD,QAFuC;AAI9C,UAAMS,UAAU,GAAG,IAAI0B,qBAAJ,CAAc,KAAKnE,KAAL,CAAWC,SAAX,CAAqB2B,IAArB,IAA6B,EAA3C,EAA+C;AAChEI,QAAAA,QAAQ,EAARA,QADgE;AAEhE/C,QAAAA,UAAU,EAAES,KAAK,CAAC0E;AAF8C,OAA/C,CAAnB;AAIA,WAAKjC,iBAAL,CAAuB5D,GAAvB,EAA4B;AAACkE,QAAAA,UAAU,EAAVA;AAAD,OAA5B;AACA,WAAKI,uBAAL,CAA6BnD,KAA7B,EAAoCwE,gBAApC;AACD;;;4CAEuBxE,K,EAAOwE,gB,EAAkB;AAAA,UACxChF,SADwC,GACtBgF,gBADsB,CACxChF,SADwC;AAAA,UAC7BX,GAD6B,GACtB2F,gBADsB,CAC7B3F,GAD6B;AAAA,gCAI3CW,SAJ2C,CAG7CP,QAH6C;AAAA,UAGlCQ,eAHkC,uBAGlCA,eAHkC;AAAA,UAGjBC,eAHiB,uBAGjBA,eAHiB;AAAA,UAGAC,SAHA,uBAGAA,SAHA;AAK/C,UAAMgF,WAAW,GAAG,KAAKrE,KAAL,CAAWE,UAAX,CAAsB3B,GAAtB,EAA2BkE,UAA3B,CAAsC6B,qBAAtC,CAClB5E,KAAK,CAACL,SAAS,CAACR,IAAX,CADa,EAElB,CAACa,KAAK,CAACP,eAAe,CAACN,IAAjB,CAAN,EAA8Ba,KAAK,CAACN,eAAe,CAACP,IAAjB,CAAnC,CAFkB,CAApB;AAKA,WAAKsD,iBAAL,CAAuB5D,GAAvB,EAA4B;AAAC8F,QAAAA,WAAW,EAAXA;AAAD,OAA5B;AACA,WAAKvB,iBAAL,CAAuBpD,KAAvB,EAA8BwE,gBAA9B;AACD;;;sCAEiBxE,K,EAAOwE,gB,EAAkB;AAAA,UAClC3F,GADkC,GACF2F,gBADE,CAClC3F,GADkC;AAAA,UAC7Be,YAD6B,GACF4E,gBADE,CAC7B5E,YAD6B;AAAA,UACfJ,SADe,GACFgF,gBADE,CACfhF,SADe;AAAA,kCAEjBI,YAAY,CAACX,QAFI;AAAA,UAElCY,MAFkC,yBAElCA,MAFkC;AAAA,UAE1BC,KAF0B,yBAE1BA,KAF0B;AAAA,UAGlCH,SAHkC,GAGrBH,SAAS,CAACP,QAHW,CAGlCU,SAHkC;AAAA,UAIlCI,KAJkC,GAIzBH,YAJyB,CAIlCG,KAJkC;AAKzC,UAAM8E,cAAc,GAAG7E,KAAK,CAACF,KAAK,CAACX,IAAP,CAA5B;AACA,UAAM2F,eAAe,GAAG9E,KAAK,CAACH,MAAM,CAACV,IAAR,CAAL,IAAsB,KAAKmB,KAAL,CAAWE,UAAX,CAAsB3B,GAAtB,EAA2B8F,WAAzE;AACA,UAAMI,gBAAgB,GAAG,6CAA4BpF,SAAS,IAAIK,KAAK,CAACL,SAAS,CAACR,IAAX,CAA9C,CAAzB;AACA,UAAM6D,SAAS,GAAG+B,gBAAgB,CAACD,eAAD,EAAkBD,cAAlB,CAAlC;;AAEA,UAAI,yBAAO9E,KAAP,MAAiB,QAAjB,IAA6B,OAAOC,KAAK,CAACD,KAAK,CAACC,KAAP,CAAZ,KAA8B,UAA/D,EAA2E;AACzEA,QAAAA,KAAK,CAACD,KAAK,CAACC,KAAP,CAAL,CAAmBgD,SAAS,CAACnD,MAAV,EAAnB;AACD;;AAED,WAAK4C,iBAAL,CAAuB5D,GAAvB,EAA4B;AAACmE,QAAAA,SAAS,EAATA;AAAD,OAA5B;AACD;;;kDAE6BnE,G,EAAKoB,S,EAAW;AAAA;;AAC5C,aAAO,UAAA+E,IAAI,EAAI;AAAA,oCACmB,MAAI,CAAC1E,KAAL,CAAWE,UAAX,CAAsB3B,GAAtB,CADnB;AAAA,YACNkE,UADM,yBACNA,UADM;AAAA,YACMC,SADN,yBACMA,SADN;AAEb,YAAMiC,GAAG,GAAGlC,UAAU,CAACmC,MAAX,CAAkBF,IAAI,CAACG,KAAvB,CAAZ;;AAEA,YAAIF,GAAG,IAAIA,GAAG,CAACG,MAAJ,KAAe,CAA1B,EAA6B;AAE3B,iBAAOnF,SAAP;AACD;;AACD,YAAMoF,EAAE,GAAGJ,GAAG,IAAIA,GAAG,CAAC/F,KAAtB;AACA,YAAMW,MAAM,GAAGmD,SAAS,CAACnD,MAAV,EAAf;AAEA,YAAMyF,eAAe,GAAGD,EAAE,IAAIxF,MAAM,CAAC,CAAD,CAAZ,IAAmBwF,EAAE,IAAIxF,MAAM,CAACA,MAAM,CAACoE,MAAP,GAAgB,CAAjB,CAAvD;AAGA,eAAOqB,eAAe,GAAGtC,SAAS,CAACqC,EAAD,CAAZ,GAAmBpF,SAAzC;AACD,OAfD;AAgBD;;;yCAEoBD,K,EAAO;AAC1B,UAAMuF,SAAS,GAAG,EAAlB;;AACA,WAAK,IAAM1G,GAAX,IAAkB,KAAK6B,iBAAvB,EAA0C;AAAA,YACjC5B,QADiC,GACrB,KAAK4B,iBAAL,CAAuB7B,GAAvB,CADqB,CACjCC,QADiC;AAExCyG,QAAAA,SAAS,CAACzG,QAAD,CAAT,GAAsB,KAAKwE,6BAAL,CAAmCtD,KAAnC,EAA0CnB,GAA1C,CAAtB;AACD;;AAED,aAAO0G,SAAP;AACD;;;0CAEsB;AAAA,UAAPC,IAAO,SAAPA,IAAO;AACrB,UAAMC,QAAQ,GAAGD,IAAI,CAACE,MAAL,IAAeF,IAAI,CAACL,KAAL,GAAa,CAAC,CAA9C;AACA,UAAIQ,MAAM,GAAG,IAAb;;AAEA,UAAIF,QAAJ,EAAc;AAGZ,YAAMT,IAAI,GAAG,KAAK1E,KAAL,CAAWC,SAAX,CAAqB2B,IAArB,CAA0BsD,IAAI,CAACL,KAA/B,CAAb;AAEA,YAAMS,OAAO,GAAG,EAAhB;;AACA,aAAK,IAAM/G,GAAX,IAAkB,KAAK6B,iBAAvB,EAA0C;AAAA,cACjC3B,WADiC,GAClB,KAAK2B,iBAAL,CAAuB7B,GAAvB,CADkB,CACjCE,WADiC;AAAA,cAEjCgE,UAFiC,GAEnB,KAAKzC,KAAL,CAAWE,UAAX,CAAsB3B,GAAtB,CAFmB,CAEjCkE,UAFiC;AAGxC,cAAM7D,KAAK,GAAG6D,UAAU,CAACmC,MAAX,CAAkBF,IAAI,CAACG,KAAvB,KAAiCpC,UAAU,CAACmC,MAAX,CAAkBF,IAAI,CAACG,KAAvB,EAA8BjG,KAA7E;AACA0G,UAAAA,OAAO,CAAC7G,WAAD,CAAP,GAAuBG,KAAvB;AACD;;AAEDyG,QAAAA,MAAM,GAAG7D,MAAM,CAACC,MAAP,CAAc6D,OAAd,EAAuBZ,IAAvB,EAA6B;AACpCa,UAAAA,MAAM,EAAEb,IAAI,CAACc,cAAL,IAAuBd,IAAI,CAACa;AADA,SAA7B,CAAT;AAGD;;AAGD,aAAO/D,MAAM,CAACC,MAAP,CAAcyD,IAAd,EAAoB;AACzBE,QAAAA,MAAM,EAAEK,OAAO,CAACJ,MAAD,CADU;AAGzBA,QAAAA,MAAM,EAANA;AAHyB,OAApB,CAAP;AAKD;;;gCAEWK,Y,EAAc;AACxB,UAAI,CAAC,KAAKtF,iBAAL,CAAuBuF,cAAvB,CAAsCD,YAAtC,CAAL,EAA0D;AACxD,eAAOtH,GAAP;AACD;;AACD,aAAO,KAAKgC,iBAAL,CAAuBsF,YAAvB,EAAqC3C,iBAA5C;AACD;;;wCA7U0B;AACzB,aAAOzE,kBAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport BinSorter from './bin-sorter';\nimport {getScaleFunctionByScaleType} from './scale-utils';\nimport {getValueFunc} from './aggregation-operation-utils';\n\nfunction nop() {}\n\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [\n  {\n    key: 'fillColor',\n    accessor: 'getFillColor',\n    pickingInfo: 'colorValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getColorValue',\n          updateTrigger: 'getColorValue'\n        },\n        weight: {\n          prop: 'getColorWeight',\n          updateTrigger: 'getColorWeight'\n        },\n        aggregation: {\n          prop: 'colorAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'lowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'upperPercentile'\n        },\n        scaleType: {\n          prop: 'colorScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'colorDomain'},\n        range: {prop: 'colorRange'}\n      },\n      onSet: {\n        props: 'onSetColorDomain'\n      }\n    },\n    nullValue: [0, 0, 0, 0]\n  },\n  {\n    key: 'elevation',\n    accessor: 'getElevation',\n    pickingInfo: 'elevationValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getElevationValue',\n          updateTrigger: 'getElevationValue'\n        },\n        weight: {\n          prop: 'getElevationWeight',\n          updateTrigger: 'getElevationWeight'\n        },\n        aggregation: {\n          prop: 'elevationAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'elevationLowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'elevationUpperPercentile'\n        },\n        scaleType: {\n          prop: 'elevationScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'elevationDomain'},\n        range: {prop: 'elevationRange'}\n      },\n      onSet: {\n        props: 'onSetElevationDomain'\n      }\n    },\n    nullValue: -1\n  }\n];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {\n        // color: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // },\n        // elevation: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // }\n      }\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n\n  updateState(opts, aggregationParams) {\n    const {oldProps, props, changeFlags} = opts;\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n    let aggregationDirty = false;\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into bin and aggregate wegiths per bin\n      this.getAggregatedData(props, aggregationParams);\n      aggregationDirty = true;\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      // this here is layer\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n      aggregationDirty = true;\n    }\n    this.setState({aggregationDirty});\n\n    return this.state;\n  }\n\n  // Update private state\n  setState(updateObject) {\n    this.state = Object.assign({}, this.state, updateObject);\n  }\n\n  // Update private state.dimensions\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: Object.assign({}, this.state.dimensions, {\n        [key]: Object.assign({}, this.state.dimensions[key], updateObject)\n      })\n    });\n  }\n\n  normalizeResult(result = {}) {\n    // support previous hexagonAggregator API\n    if (result.hexagons) {\n      return Object.assign({data: result.hexagons}, result);\n    } else if (result.layerData) {\n      return Object.assign({data: result.layerData}, result);\n    }\n\n    return result;\n  }\n\n  getAggregatedData(props, aggregationParams) {\n    const aggregator = this._getAggregator(props);\n\n    const result = aggregator(props, aggregationParams);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {value, weight, aggregation} = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(\n        this.dimensionUpdaters[key].getBins,\n        oldProps,\n        props,\n        changeFlags\n      );\n\n      if (getValueChanged && getValue === null) {\n        // If `getValue` is not provided from props, build it with aggregation and weight.\n        getValue = getValueFunc(props[aggregation.prop], props[weight.prop]);\n      }\n\n      if (getValue) {\n        this.setDimensionState(key, {getValue});\n      }\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      this._getCellSize(oldProps) !== this._getCellSize(props) ||\n      this._getAggregator(oldProps) !== this._getAggregator(props) ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  // Adds dimensions\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n\n  _addDimension(dimensions = []) {\n    dimensions.forEach(dimension => {\n      const {key} = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n\n  getDimensionUpdaters({key, accessor, pickingInfo, getBins, getDomain, getScaleFunc, nullValue}) {\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: Object.assign({updater: this.getDimensionSortedBins}, getBins),\n      getDomain: Object.assign({updater: this.getDimensionValueDomain}, getDomain),\n      getScaleFunc: Object.assign({updater: this.getDimensionScale}, getScaleFunc),\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    // whether need to update current dimension step\n    // dimension step is the value, domain, scaleFunction of each dimension\n    // each step is an object with properties links to layer prop and whether the prop is\n    // controlled by updateTriggers\n    // getBins: {\n    //   value: {\n    //     prop: 'getElevationValue',\n    //     updateTrigger: 'getElevationValue'\n    //   },\n    //   weight: {\n    //     prop: 'getElevationWeight',\n    //     updateTrigger: 'getElevationWeight'\n    //   },\n    //   aggregation: {\n    //     prop: 'elevationAggregation'\n    //   }\n    // }\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        // check based on updateTriggers change first\n        return (\n          changeFlags.updateTriggersChanged &&\n          (changeFlags.updateTriggersChanged.all ||\n            changeFlags.updateTriggersChanged[item.updateTrigger])\n        );\n      }\n      // fallback to direct comparison\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n\n  getDimensionChanges(oldProps, props, changeFlags) {\n    // const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const key in this.dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionSteps.find(step =>\n        this.needUpdateDimensionStep(\n          this.dimensionUpdaters[key][step],\n          oldProps,\n          props,\n          changeFlags\n        )\n      );\n\n      if (needUpdate) {\n        updaters.push(\n          this.dimensionUpdaters[key][needUpdate].updater.bind(\n            this,\n            props,\n            this.dimensionUpdaters[key]\n          )\n        );\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n    const updateTriggers = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      // fold dimension triggers into each accessor\n      updateTriggers[accessor] = {};\n\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(\n          ({prop, updateTrigger}) => {\n            if (updateTrigger) {\n              // if prop is based on updateTrigger e.g. getColorValue, getColorWeight\n              // and updateTriggers is passed in from layer prop\n              // fold the updateTriggers into accessor\n              const fromProp = _updateTriggers[updateTrigger];\n              if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n                // if updateTrigger is an object spread it\n                Object.assign(updateTriggers[accessor], fromProp);\n              } else if (fromProp !== undefined) {\n                updateTriggers[accessor][prop] = fromProp;\n              }\n            } else {\n              // if prop is not based on updateTrigger\n              updateTriggers[accessor][prop] = props[prop];\n            }\n          }\n        );\n      });\n    }\n\n    return updateTriggers;\n  }\n\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n\n  getDimensionSortedBins(props, dimensionUpdater) {\n    const {key} = dimensionUpdater;\n    const {getValue} = this.state.dimensions[key];\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {\n      getValue,\n      filterData: props._filterData\n    });\n    this.setDimensionState(key, {sortedBins});\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {getDomain, key} = dimensionUpdater;\n    const {\n      triggers: {lowerPercentile, upperPercentile, scaleType}\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(\n      props[scaleType.prop],\n      [props[lowerPercentile.prop], props[upperPercentile.prop]]\n    );\n\n    this.setDimensionState(key, {valueDomain});\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n\n  getDimensionScale(props, dimensionUpdater) {\n    const {key, getScaleFunc, getDomain} = dimensionUpdater;\n    const {domain, range} = getScaleFunc.triggers;\n    const {scaleType} = getDomain.triggers;\n    const {onSet} = getScaleFunc;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](scaleFunc.domain());\n    }\n\n    this.setDimensionState(key, {scaleFunc});\n  }\n\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {sortedBins, scaleFunc} = this.state.dimensions[key];\n      const bin = sortedBins.binMap[cell.index];\n\n      if (bin && bin.counts === 0) {\n        // no points left in bin after filtering\n        return nullValue;\n      }\n      const cv = bin && bin.value;\n      const domain = scaleFunc.domain();\n\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n\n      // if cell value is outside domain, set alpha to 0\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n\n  getSubLayerAccessors(props) {\n    const accessors = {};\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n\n    return accessors;\n  }\n\n  getPickingInfo({info}) {\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      // const {sortedColorBins, sortedElevationBins} = this.state;\n\n      const cell = this.state.layerData.data[info.index];\n\n      const binInfo = {};\n      for (const key in this.dimensionUpdaters) {\n        const {pickingInfo} = this.dimensionUpdaters[key];\n        const {sortedBins} = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n\n      object = Object.assign(binInfo, cell, {\n        points: cell.filteredPoints || cell.points\n      });\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n}\n"],"file":"cpu-aggregator.js"}