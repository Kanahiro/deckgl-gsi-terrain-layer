{"version":3,"sources":["../../../src/utils/grid-aggregation-utils.js"],"names":["R_EARTH","toFinite","n","Number","isFinite","getBoundingBox","attributes","vertexCount","positions","value","yMin","Infinity","yMax","xMin","xMax","y","x","i","boundingBox","getTranslation","gridOffset","coordinateSystem","viewport","width","height","worldOrigin","COORDINATE_SYSTEM","CARTESIAN","log","assert","LNGLAT","DEFAULT","includes","alignToCell","xOffset","yOffset","inValue","cellSize","sign","Math","abs","floor","getGridOffset","convertToMeters","centerLat","calculateGridLatLonOffset","getGridParams","translation","numCol","ceil","numRow","latitude","calculateLatOffset","calculateLonOffset","dy","PI","lat","dx","cos"],"mappings":"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","sourcesContent":["import {log, COORDINATE_SYSTEM} from '@deck.gl/core';\nconst R_EARTH = 6378000;\n\nfunction toFinite(n) {\n  return Number.isFinite(n) ? n : 0;\n}\n\n// Parse input data to build positions, wights and bounding box.\n/* eslint-disable max-statements */\nexport function getBoundingBox(attributes, vertexCount) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = attributes.positions.value;\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 3];\n    y = positions[i * 3 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  const boundingBox = {\n    xMin: toFinite(xMin),\n    xMax: toFinite(xMax),\n    yMin: toFinite(yMin),\n    yMax: toFinite(yMax)\n  };\n\n  return boundingBox;\n}\n/* eslint-enable max-statements */\n\n// Returns XY translation for positions to peform aggregation in +ve sapce\nfunction getTranslation(boundingBox, gridOffset, coordinateSystem, viewport) {\n  const {width, height} = viewport;\n\n  // Origin to define grid\n  // DEFAULT coordinate system is treated as LNGLAT\n  const worldOrigin =\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ? [-width / 2, -height / 2] : [-180, -90];\n\n  // Other coordinate systems not supported/verified yet.\n  log.assert(\n    [COORDINATE_SYSTEM.CARTESIAN, COORDINATE_SYSTEM.LNGLAT, COORDINATE_SYSTEM.DEFAULT].includes(\n      coordinateSystem\n    )\n  );\n\n  const {xMin, yMin} = boundingBox;\n  return [\n    // Align origin to match grid cell boundaries in CPU and GPU aggregations\n    -1 * (alignToCell(xMin - worldOrigin[0], gridOffset.xOffset) + worldOrigin[0]),\n    -1 * (alignToCell(yMin - worldOrigin[1], gridOffset.yOffset) + worldOrigin[1])\n  ];\n}\n\n// Aligns `inValue` to given `cellSize`\nexport function alignToCell(inValue, cellSize) {\n  const sign = inValue < 0 ? -1 : 1;\n\n  let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);\n\n  value = Math.floor(value / cellSize) * cellSize;\n\n  return value * sign;\n}\n\n/**\n * Based on geometric center of sample points, calculate cellSize in lng/lat (degree) space\n * @param {object} boundingBox - {xMin, yMin, xMax, yMax} contains bounding box of data\n * @param {number} cellSize - grid cell size in meters\n * @param {boolean, optional} converToDegrees - when true offsets are converted from meters to lng/lat (degree) space\n * @returns {xOffset, yOffset} - cellSize size\n */\n\nexport function getGridOffset(boundingBox, cellSize, convertToMeters = true) {\n  if (!convertToMeters) {\n    return {xOffset: cellSize, yOffset: cellSize};\n  }\n\n  const {yMin, yMax} = boundingBox;\n  const centerLat = (yMin + yMax) / 2;\n\n  return calculateGridLatLonOffset(cellSize, centerLat);\n}\n\nexport function getGridParams(boundingBox, cellSize, viewport, coordinateSystem) {\n  const gridOffset = getGridOffset(\n    boundingBox,\n    cellSize,\n    coordinateSystem !== COORDINATE_SYSTEM.CARTESIAN\n  );\n\n  const translation = getTranslation(boundingBox, gridOffset, coordinateSystem, viewport);\n\n  const {xMin, yMin, xMax, yMax} = boundingBox;\n\n  const width = xMax - xMin + gridOffset.xOffset;\n  const height = yMax - yMin + gridOffset.yOffset;\n\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n  return {gridOffset, translation, width, height, numCol, numRow};\n}\n\n/**\n * calculate grid layer cell size in lat lon based on world unit size\n * and current latitude\n * @param {number} cellSize\n * @param {number} latitude\n * @returns {object} - lat delta and lon delta\n */\nfunction calculateGridLatLonOffset(cellSize, latitude) {\n  const yOffset = calculateLatOffset(cellSize);\n  const xOffset = calculateLonOffset(latitude, cellSize);\n  return {yOffset, xOffset};\n}\n\n/**\n * with a given x-km change, calculate the increment of latitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} dy - change in km\n * @return {number} - increment in latitude\n */\nfunction calculateLatOffset(dy) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\n/**\n * with a given x-km change, and current latitude\n * calculate the increment of longitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} lat - latitude of current location (based on city)\n * @param {number} dx - change in km\n * @return {number} - increment in longitude\n */\nfunction calculateLonOffset(lat, dx) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\n"],"file":"grid-aggregation-utils.js"}