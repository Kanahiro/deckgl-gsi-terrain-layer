{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","gpuAggregation","aggregation","contours","threshold","zOffset","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ContourLayer","dimensions","setState","contourData","projectPoints","count","size","operation","AGGREGATION_OPERATION","SUM","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","opts","contoursChanged","oldProps","aggregationDirty","state","_updateThresholdData","getNumInstances","_generateContours","contourSegments","contourPolygons","LinesSubLayerClass","getSubLayerClass","LineLayer","BandsSubLayerClass","SolidPolygonLayer","lineLayer","length","getSubLayerProps","id","getSourcePosition","d","start","getTargetPosition","end","getColor","contour","color","getWidth","strokeWidth","bandsLayer","getPolygon","vertices","getFillColor","coordinateSystem","viewport","context","cellSizeChanged","GPUGridAggregator","isSupported","gl","log","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","boundingBox","getAttributes","gridOffset","translation","width","height","numCol","numRow","allocateResources","posOffset","slice","gridOrigin","aggregationDataDirty","isAggregationDirty","dimension","compareAll","aggregationWeightsDirty","_updateAccessors","_resetResults","getValue","aggregationData","thresholdData","aggregationBuffer","getData","getCellData","countsData","cellWeights","gridSize","xOffset","yOffset","Array","i","zIndex","GridAggregationLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: x => 1},\n  gpuAggregation: true,\n  aggregation: 'SUM',\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  zOffset: 0.005\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {oldProps, props} = opts;\n    const {aggregationDirty} = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n\n    // Contour lines layer\n    const lineLayer =\n      contourSegments &&\n      contourSegments.length > 0 &&\n      new LinesSubLayerClass(\n        this.getSubLayerProps({\n          id: 'lines'\n        }),\n        {\n          data: this.state.contourData.contourSegments,\n          getSourcePosition: d => d.start,\n          getTargetPosition: d => d.end,\n          getColor: d => d.contour.color || DEFAULT_COLOR,\n          getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n        }\n      );\n\n    // Contour bands layer\n    const bandsLayer =\n      contourPolygons &&\n      contourPolygons.length > 0 &&\n      new BandsSubLayerClass(\n        this.getSubLayerProps({\n          id: 'bands'\n        }),\n        {\n          data: this.state.contourData.contourPolygons,\n          getPolygon: d => d.vertices,\n          getFillColor: d => d.contour.color || DEFAULT_COLOR\n        }\n      );\n\n    return [lineLayer, bandsLayer];\n  }\n\n  // Aggregation Overrides\n\n  /* eslint-disable max-statements, complexity */\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const {dimensions} = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {data, weights} = dimensions;\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n  /* eslint-enable max-statements, complexity */\n\n  // Private (Aggregation)\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight)});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  // Private (Contours)\n\n  _generateContours() {\n    const {numCol, numRow, gridOrigin, gridOffset, thresholdData} = this.state;\n    const {count} = this.state.weights;\n    let {aggregationData} = count;\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData: aggregationData});\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _updateThresholdData(props) {\n    const {contours, zOffset} = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}