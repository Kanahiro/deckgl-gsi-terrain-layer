{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","ScreenGridCellLayer","GridAggregationLayer","getFloatTexture","defaultProps","Object","assign","getPosition","type","value","d","position","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ScreenGridLayer","initializeState","gl","context","isSupported","setState","supported","error","id","dimensions","getCellSize","cellSizePixels","count","size","operation","SUM","needMax","maxTexture","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","shouldUpdateState","changeFlags","state","somethingChanged","updateState","opts","renderLayers","numRow","numCol","updateTriggers","aggregationBuffer","CellLayerClass","getSubLayerClass","getSubLayerProps","instanceCounts","numInstances","finalizeState","maxBuffer","delete","getPickingInfo","info","mode","index","gpuGridAggregator","aggregationResults","getData","object","getAggregationData","pixelIndex","updateResults","aggregationData","maxData","setData","setImageData","updateAggregationState","cellSize","cellSizeChanged","oldProps","viewportChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","viewport","width","height","Math","ceil","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps = Object.assign({}, ScreenGridCellLayer.defaultProps, {\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n});\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ScreenGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS,\n      getCellSize: props => props.cellSizePixels\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n    if (maxBuffer) {\n      maxBuffer.delete();\n    }\n    if (maxTexture) {\n      maxTexture.delete();\n    }\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuGridAggregator.getData('count');\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, aggregationResults)\n      );\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight)});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}