{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["LineLayer","SolidPolygonLayer","generateContours","log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","getBoundingBox","getGridParams","GridAggregationLayer","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","gpuAggregation","aggregation","contours","threshold","zOffset","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ContourLayer","initializeState","dimensions","setState","contourData","projectPoints","count","size","operation","SUM","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","updateState","opts","contoursChanged","oldProps","aggregationDirty","state","_updateThresholdData","getNumInstances","_generateContours","renderLayers","contourSegments","contourPolygons","LinesSubLayerClass","getSubLayerClass","BandsSubLayerClass","lineLayer","length","getSubLayerProps","id","getSourcePosition","d","start","getTargetPosition","end","getColor","contour","color","getWidth","strokeWidth","bandsLayer","getPolygon","vertices","getFillColor","updateAggregationState","coordinateSystem","viewport","context","cellSizeChanged","isSupported","gl","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","boundingBox","getAttributes","gridOffset","translation","width","height","numCol","numRow","allocateResources","posOffset","slice","gridOrigin","aggregationDataDirty","isAggregationDirty","dimension","compareAll","aggregationWeightsDirty","_updateAccessors","_resetResults","getValue","aggregationData","thresholdData","aggregationBuffer","getData","cellWeights","getCellData","countsData","gridSize","xOffset","yOffset","Array","i","zIndex","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: x => 1},\n  gpuAggregation: true,\n  aggregation: 'SUM',\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  zOffset: 0.005\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {oldProps, props} = opts;\n    const {aggregationDirty} = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n\n    // Contour lines layer\n    const lineLayer =\n      contourSegments &&\n      contourSegments.length > 0 &&\n      new LinesSubLayerClass(\n        this.getSubLayerProps({\n          id: 'lines'\n        }),\n        {\n          data: this.state.contourData.contourSegments,\n          getSourcePosition: d => d.start,\n          getTargetPosition: d => d.end,\n          getColor: d => d.contour.color || DEFAULT_COLOR,\n          getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n        }\n      );\n\n    // Contour bands layer\n    const bandsLayer =\n      contourPolygons &&\n      contourPolygons.length > 0 &&\n      new BandsSubLayerClass(\n        this.getSubLayerProps({\n          id: 'bands'\n        }),\n        {\n          data: this.state.contourData.contourPolygons,\n          getPolygon: d => d.vertices,\n          getFillColor: d => d.contour.color || DEFAULT_COLOR\n        }\n      );\n\n    return [lineLayer, bandsLayer];\n  }\n\n  // Aggregation Overrides\n\n  /* eslint-disable max-statements, complexity */\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const {dimensions} = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {data, weights} = dimensions;\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n  /* eslint-enable max-statements, complexity */\n\n  // Private (Aggregation)\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight)});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  // Private (Contours)\n\n  _generateContours() {\n    const {numCol, numRow, gridOrigin, gridOffset, thresholdData} = this.state;\n    const {count} = this.state.weights;\n    let {aggregationData} = count;\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData: aggregationData});\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _updateThresholdData(props) {\n    const {contours, zOffset} = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}