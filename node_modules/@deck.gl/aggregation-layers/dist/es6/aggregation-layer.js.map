{"version":3,"sources":["../../src/aggregation-layer.js"],"names":["CompositeLayer","AttributeManager","_compareProps","compareProps","cssToDeviceRatio","filterProps","AggregationLayer","initializeState","dimensions","setState","ignoreProps","constructor","_propTypes","data","props","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getShaderAttributes","getModuleSettings","viewport","mousePosition","gl","context","moduleSettings","Object","assign","create","pickingActive","devicePixelRatio","isAggregationDirty","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","all","accessor","newProps","propTypes","name","isAttributeChanged","isObjectEmpty","undefined","_getAttributeManager","id","stats","obj","isEmpty","key","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, AttributeManager, _compareProps as compareProps} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport default class AggregationLayer extends CompositeLayer {\n  initializeState(dimensions) {\n    super.initializeState();\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes(opts.props);\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(updateOpts, params = {}) {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n\nAggregationLayer.layerName = 'AggregationLayer';\n"],"file":"aggregation-layer.js"}