{"version":3,"sources":["../../../src/utils/typed-array-manager.js"],"names":["TypedArrayManager","constructor","props","_pool","overAlloc","poolSize","setProps","Object","assign","allocate","typedArray","count","size","type","padding","copy","initialize","Type","Float32Array","newSize","ArrayBuffer","isView","length","BYTES_PER_ELEMENT","buffer","byteLength","newArray","_allocate","set","fill","_release","release","Math","max","ceil","pool","i","findIndex","b","array","splice","push","shift"],"mappings":"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","sourcesContent":["export class TypedArrayManager {\n  constructor(props) {\n    this._pool = [];\n    this.props = {overAlloc: 2, poolSize: 100};\n    this.setProps(props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  allocate(typedArray, count, {size = 1, type, padding = 0, copy = false, initialize = false}) {\n    const Type = type || (typedArray && typedArray.constructor) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      // Hack - always initialize the first 4 elements. NaNs crashe the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  release(typedArray) {\n    this._release(typedArray);\n  }\n\n  _allocate(Type, size, initialize) {\n    // Allocate at least one element to ensure a valid buffer\n    size = Math.max(Math.ceil(size * this.props.overAlloc), 1);\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * size;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      const array = new Type(pool.splice(i, 1)[0], 0, size);\n      if (initialize) {\n        // Viewing a buffer with a different type may create NaNs\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(size);\n  }\n\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.props.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.props.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"],"file":"typed-array-manager.js"}