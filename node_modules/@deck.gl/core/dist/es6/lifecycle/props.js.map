{"version":3,"sources":["../../../src/lifecycle/props.js"],"names":["PROP_SYMBOLS","COMPONENT","validateProps","props","propTypes","getPropTypes","propName","propType","validate","Error","diffProps","oldProps","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","extensions","transitions","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","extensionsChanged","diffExtensions","transitionsChanged","diffTransitions","result","key","type","isTransitionable","comparePropValues","triggerName","Object","keys","changed","hasOwnProperty","call","newProp","oldProp","equal","equals","dataComparator","_dataDiff","diffReason","diffUpdateTrigger","all","triggerChanged","reason","oldExtensions","length","i","newTriggers","undefined","oldTriggers","layer","LayerType","constructor","_propTypes"],"mappings":"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","sourcesContent":["import {PROP_SYMBOLS} from './constants';\n\nconst {COMPONENT} = PROP_SYMBOLS;\n\nexport function validateProps(props) {\n  const propTypes = getPropTypes(props);\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {validate} = propType;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n    }\n  }\n}\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(props, oldProps) {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {data: null, updateTriggers: null, extensions: null, transitions: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps) {\n  if (!props.transitions) {\n    return null;\n  }\n  const result = {};\n  const propTypes = getPropTypes(props);\n\n  for (const key in props.transitions) {\n    const propType = propTypes[key];\n    const type = propType && propType.type;\n    const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\n/*\n * Note: for better performance, this function assumes that both oldProps and newProps\n   inherit the same prototype (defaultProps). That is, if neither object contains own\n   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.\n */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n} = {}) {\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return null;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Compare explicitly defined new props against old/default values\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added`;\n      }\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n      if (changed) {\n        return `${triggerName}.${key} ${changed}`;\n      }\n    }\n  }\n\n  // Test if any old props have been dropped\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped`;\n      }\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        // Compare dropped old prop against default value\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n        if (changed) {\n          return `${triggerName}.${key} ${changed}`;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\nfunction comparePropValues(newProp, oldProp, propType) {\n  // If prop type has an equal function, invoke it\n  let equal = propType && propType.equal;\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    // If object has an equals function, invoke it\n    equal = newProp && oldProp && newProp.equals;\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged = null;\n  // Support optional app defined comparison of data\n  const {dataComparator, _dataDiff} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const triggerChanged = {};\n  let reason = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (diffReason) {\n        triggerChanged[triggerName] = true;\n        reason = triggerChanged;\n      }\n    }\n  }\n\n  return reason;\n}\n\n// Returns true if any extensions have changed\nfunction diffExtensions(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {extensions} = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n\nfunction getPropTypes(props) {\n  const layer = props[COMPONENT];\n  const LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}\n"],"file":"props.js"}