{"version":3,"sources":["../../../src/transitions/viewport-fly-to-interpolator.js"],"names":["TransitionInterpolator","lerp","flyToViewport","getFlyToDuration","LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","FlyToInterpolator","constructor","props","compare","extract","required","Object","assign","interpolateProps","startProps","endProps","t","viewport","key","getDuration","transitionDuration"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAAQC,IAAR,QAAmB,SAAnB;AAEA,SAAQC,aAAR,EAAuBC,gBAAvB,QAA8C,uBAA9C;AAEA,MAAMC,2BAA2B,GAAG,CAAC,SAAD,EAAY,OAAZ,CAApC;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,GADY;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAaA,eAAe,MAAMC,iBAAN,SAAgCR,sBAAhC,CAAuD;AAQpES,EAAAA,WAAW,CAACC,KAAK,GAAG,EAAT,EAAa;AACtB,UAAM;AACJC,MAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CADL;AAEJC,MAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,UAAjC,EAA6C,MAA7C,EAAqD,SAArD,EAAgE,OAAhE,CAFL;AAGJC,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,WAAhC,EAA6C,MAA7C;AAHN,KAAN;AAKA,SAAKH,KAAL,GAAaI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,YAAlB,EAAgCK,KAAhC,CAAb;AACD;;AAEDM,EAAAA,gBAAgB,CAACC,UAAD,EAAaC,QAAb,EAAuBC,CAAvB,EAA0B;AACxC,UAAMC,QAAQ,GAAGlB,aAAa,CAACe,UAAD,EAAaC,QAAb,EAAuBC,CAAvB,EAA0B,KAAKT,KAA/B,CAA9B;;AAOA,SAAK,MAAMW,GAAX,IAAkBjB,2BAAlB,EAA+C;AAC7CgB,MAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgBpB,IAAI,CAACgB,UAAU,CAACI,GAAD,CAAV,IAAmB,CAApB,EAAuBH,QAAQ,CAACG,GAAD,CAAR,IAAiB,CAAxC,EAA2CF,CAA3C,CAApB;AACD;;AAED,WAAOC,QAAP;AACD;;AAGDE,EAAAA,WAAW,CAACL,UAAD,EAAaC,QAAb,EAAuB;AAChC,QAAI;AAACK,MAAAA;AAAD,QAAuBL,QAA3B;;AACA,QAAIK,kBAAkB,KAAK,MAA3B,EAAmC;AAEjCA,MAAAA,kBAAkB,GAAGpB,gBAAgB,CAACc,UAAD,EAAaC,QAAb,EAAuB,KAAKR,KAA5B,CAArC;AACD;;AACD,WAAOa,kBAAP;AACD;;AAxCmE","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nimport {flyToViewport, getFlyToDuration} from '@math.gl/web-mercator';\n\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  /**\n   * @param props {Object}\n    - `props.curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n    - `props.speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n    - `props.screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n    - `props.maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n   */\n  constructor(props = {}) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.props = Object.assign({}, DEFAULT_OPTS, props);\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.props);\n\n    // Linearly interpolate 'bearing' and 'pitch'.\n    // If pitch/bearing are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n    }\n    return transitionDuration;\n  }\n}\n"],"file":"viewport-fly-to-interpolator.js"}