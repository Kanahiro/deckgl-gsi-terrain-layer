{"version":3,"sources":["../../../src/transitions/transition.js"],"names":["noop","DEFAULT_SETTINGS","onStart","onUpdate","onInterrupt","onEnd","Transition","constructor","timeline","_inProgress","_handle","settings","inProgress","start","props","cancel","Object","assign","end","removeChannel","update","addChannel","delay","getTime","duration","time","_onUpdate","isFinished"],"mappings":"AAAA,SAASA,IAAT,GAAgB,CAAE;;AAElB,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,OAAO,EAAEF,IADc;AAEvBG,EAAAA,QAAQ,EAAEH,IAFa;AAGvBI,EAAAA,WAAW,EAAEJ,IAHU;AAIvBK,EAAAA,KAAK,EAAEL;AAJgB,CAAzB;AAOA,eAAe,MAAMM,UAAN,CAAiB;AAI9BC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AAGA,SAAKG,QAAL,GAAgB,EAAhB;AACD;;AAGD,MAAIC,UAAJ,GAAiB;AACf,WAAO,KAAKH,WAAZ;AACD;;AAMDI,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACX,SAAKC,MAAL;AACA,SAAKJ,QAAL,GAAgBK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,gBAAlB,EAAoCa,KAApC,CAAhB;AACA,SAAKL,WAAL,GAAmB,IAAnB;AACA,SAAKE,QAAL,CAAcT,OAAd,CAAsB,IAAtB;AACD;;AAKDgB,EAAAA,GAAG,GAAG;AACJ,QAAI,KAAKT,WAAT,EAAsB;AACpB,WAAKD,QAAL,CAAcW,aAAd,CAA4B,KAAKT,OAAjC;AACA,WAAKA,OAAL,GAAe,IAAf;AACA,WAAKD,WAAL,GAAmB,KAAnB;AACA,WAAKE,QAAL,CAAcN,KAAd,CAAoB,IAApB;AACD;AACF;;AAKDU,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKN,WAAT,EAAsB;AACpB,WAAKE,QAAL,CAAcP,WAAd,CAA0B,IAA1B;AACA,WAAKI,QAAL,CAAcW,aAAd,CAA4B,KAAKT,OAAjC;AACA,WAAKA,OAAL,GAAe,IAAf;AACA,WAAKD,WAAL,GAAmB,KAAnB;AACD;AACF;;AAKDW,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKX,WAAV,EAAuB;AACrB,aAAO,KAAP;AACD;;AAMD,QAAI,KAAKC,OAAL,KAAiB,IAArB,EAA2B;AACzB,YAAM;AAACF,QAAAA,QAAD;AAAWG,QAAAA;AAAX,UAAuB,IAA7B;AACA,WAAKD,OAAL,GAAeF,QAAQ,CAACa,UAAT,CAAoB;AACjCC,QAAAA,KAAK,EAAEd,QAAQ,CAACe,OAAT,EAD0B;AAEjCC,QAAAA,QAAQ,EAAEb,QAAQ,CAACa;AAFc,OAApB,CAAf;AAID;;AAED,SAAKC,IAAL,GAAY,KAAKjB,QAAL,CAAce,OAAd,CAAsB,KAAKb,OAA3B,CAAZ;;AAEA,SAAKgB,SAAL;;AAEA,SAAKf,QAAL,CAAcR,QAAd,CAAuB,IAAvB;;AAIA,QAAI,KAAKK,QAAL,CAAcmB,UAAd,CAAyB,KAAKjB,OAA9B,CAAJ,EAA4C;AAC1C,WAAKQ,GAAL;AACD;;AACD,WAAO,IAAP;AACD;;AAIDQ,EAAAA,SAAS,GAAG,CAEX;;AA3F6B","sourcesContent":["function noop() {}\n\nconst DEFAULT_SETTINGS = {\n  onStart: noop,\n  onUpdate: noop,\n  onInterrupt: noop,\n  onEnd: noop\n};\n\nexport default class Transition {\n  /**\n   * @params timeline {Timeline}\n   */\n  constructor(timeline) {\n    this._inProgress = false;\n    this._handle = null;\n    this.timeline = timeline;\n\n    // Defaults\n    this.settings = {};\n  }\n\n  /* Public API */\n  get inProgress() {\n    return this._inProgress;\n  }\n\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(props) {\n    this.cancel();\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, props);\n    this._inProgress = true;\n    this.settings.onStart(this);\n  }\n\n  /**\n   * end this transition if it is in progress.\n   */\n  end() {\n    if (this._inProgress) {\n      this.timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n      this.settings.onEnd(this);\n    }\n  }\n\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this._inProgress) {\n      this.settings.onInterrupt(this);\n      this.timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n    }\n  }\n\n  /**\n   * update this transition. Returns `true` if updated.\n   */\n  update() {\n    if (!this._inProgress) {\n      return false;\n    }\n\n    // It is important to initialize the handle during `update` instead of `start`.\n    // The CPU time that the `start` frame takes should not be counted towards the duration.\n    // On the other hand, `update` always happens during a render cycle. The clock starts when the\n    // transition is rendered for the first time.\n    if (this._handle === null) {\n      const {timeline, settings} = this;\n      this._handle = timeline.addChannel({\n        delay: timeline.getTime(),\n        duration: settings.duration\n      });\n    }\n\n    this.time = this.timeline.getTime(this._handle);\n    // Call subclass method\n    this._onUpdate();\n    // Call user callback\n    this.settings.onUpdate(this);\n\n    // This only works if `settings.duration` is set\n    // Spring transition must call `end` manually\n    if (this.timeline.isFinished(this._handle)) {\n      this.end();\n    }\n    return true;\n  }\n\n  /* Private API */\n\n  _onUpdate() {\n    // for subclass override\n  }\n}\n"],"file":"transition.js"}