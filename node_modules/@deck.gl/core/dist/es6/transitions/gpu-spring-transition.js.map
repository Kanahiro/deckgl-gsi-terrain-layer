{"version":3,"sources":["../../../src/transitions/gpu-spring-transition.js"],"names":["Buffer","Transform","Framebuffer","Texture2D","readPixelsToArray","padBuffer","getAttributeTypeFromSize","getSourceBufferAttribute","getAttributeBufferLength","cycleBuffers","Attribute","Transition","GPUSpringTransition","constructor","gl","attribute","timeline","type","transition","attributeInTransition","Object","assign","settings","normalized","currentStartIndices","startIndices","currentLength","texture","getTexture","framebuffer","getFramebuffer","transform","getTransform","bufferOpts","byteLength","usage","buffers","inProgress","start","transitionSettings","numInstances","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","update","value","elementCount","Math","floor","size","sourceBuffers","aTo","updated","aPrev","aCur","feedbackBuffers","vNext","run","discard","clearRenderTarget","uniforms","stiffness","damping","parameters","depthTest","blend","viewport","blendFunc","blendEquation","isTransitioning","end","cancel","delete","length","pop","attributeType","vs","fs","defines","ATTRIBUTE_TYPE","varyings","data","Uint8Array","format","border","mipmaps","dataFormat","width","height","id","attachments"],"mappings":";;;;;;AAEA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,SAAxC,EAAmDC,iBAAnD,QAA2E,eAA3E;AACA,SACEC,SADF,EAEEC,wBAFF,EAGEC,wBAHF,EAIEC,wBAJF,EAKEC,YALF,QAMO,6CANP;AAOA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,eAAe,MAAMC,mBAAN,CAA0B;AACvCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA,SAAL;AAAgBC,IAAAA;AAAhB,GAAD,EAA4B;AACrC,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKG,IAAL,GAAY,QAAZ;AACA,SAAKC,UAAL,GAAkB,IAAIP,UAAJ,CAAeK,QAAf,CAAlB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AAKA,SAAKI,qBAAL,GAA6B,IAAIT,SAAJ,CAC3BI,EAD2B,EAE3BM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAS,CAACO,QAA5B,EAAsC;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAtC,CAF2B,CAA7B;AAIA,SAAKC,mBAAL,GAA2BT,SAAS,CAACU,YAArC;AAIA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,OAAL,GAAeC,UAAU,CAACd,EAAD,CAAzB;AACA,SAAKe,WAAL,GAAmBC,cAAc,CAAChB,EAAD,EAAK,KAAKa,OAAV,CAAjC;AACA,SAAKI,SAAL,GAAiBC,YAAY,CAAClB,EAAD,EAAKC,SAAL,EAAgB,KAAKc,WAArB,CAA7B;AACA,UAAMI,UAAU,GAAG;AACjBC,MAAAA,UAAU,EAAE,CADK;AAEjBC,MAAAA,KAAK;AAFY,KAAnB;AAIA,SAAKC,OAAL,GAAe,CACb,IAAIpC,MAAJ,CAAWc,EAAX,EAAemB,UAAf,CADa,EAEb,IAAIjC,MAAJ,CAAWc,EAAX,EAAemB,UAAf,CAFa,EAGb,IAAIjC,MAAJ,CAAWc,EAAX,EAAemB,UAAf,CAHa,CAAf;AAKD;;AAED,MAAII,UAAJ,GAAiB;AACf,WAAO,KAAKnB,UAAL,CAAgBmB,UAAvB;AACD;;AAODC,EAAAA,KAAK,CAACC,kBAAD,EAAqBC,YAArB,EAAmC;AACtC,UAAM;AAAC1B,MAAAA,EAAD;AAAKsB,MAAAA,OAAL;AAAcrB,MAAAA;AAAd,QAA2B,IAAjC;AACA,UAAM0B,aAAa,GAAG;AACpBD,MAAAA,YADoB;AAEpBzB,MAAAA,SAFoB;AAGpB2B,MAAAA,UAAU,EAAE,KAAKhB,aAHG;AAIpBiB,MAAAA,gBAAgB,EAAE,KAAKnB,mBAJH;AAKpBoB,MAAAA,OAAO,EAAEL,kBAAkB,CAACM;AALR,KAAtB;;AAQA,SAAK,MAAMC,MAAX,IAAqBV,OAArB,EAA8B;AAC5B/B,MAAAA,SAAS;AAAEyC,QAAAA;AAAF,SAAaL,aAAb,EAAT;AACD;;AAED,SAAKjB,mBAAL,GAA2BT,SAAS,CAACU,YAArC;AACA,SAAKC,aAAL,GAAqBlB,wBAAwB,CAACO,SAAD,EAAYyB,YAAZ,CAA7C;AACA,SAAKrB,qBAAL,CAA2B4B,MAA3B,CAAkC;AAChCD,MAAAA,MAAM,EAAEV,OAAO,CAAC,CAAD,CADiB;AAIhCY,MAAAA,KAAK,EAAEjC,SAAS,CAACiC;AAJe,KAAlC;AAWA,SAAK9B,UAAL,CAAgBoB,KAAhB,CAAsBC,kBAAtB;AAEA,SAAKR,SAAL,CAAegB,MAAf,CAAsB;AACpBE,MAAAA,YAAY,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKzB,aAAL,GAAqBX,SAAS,CAACqC,IAA1C,CADM;AAEpBC,MAAAA,aAAa,EAAE;AACbC,QAAAA,GAAG,EAAE/C,wBAAwB,CAACO,EAAD,EAAKC,SAAL;AADhB;AAFK,KAAtB;AAMD;;AAEDgC,EAAAA,MAAM,GAAG;AACP,UAAM;AAACX,MAAAA,OAAD;AAAUL,MAAAA,SAAV;AAAqBF,MAAAA,WAArB;AAAkCX,MAAAA;AAAlC,QAAgD,IAAtD;AACA,UAAMqC,OAAO,GAAGrC,UAAU,CAAC6B,MAAX,EAAhB;;AACA,QAAI,CAACQ,OAAL,EAAc;AACZ,aAAO,KAAP;AACD;;AAEDxB,IAAAA,SAAS,CAACgB,MAAV,CAAiB;AACfM,MAAAA,aAAa,EAAE;AACbG,QAAAA,KAAK,EAAEpB,OAAO,CAAC,CAAD,CADD;AAEbqB,QAAAA,IAAI,EAAErB,OAAO,CAAC,CAAD;AAFA,OADA;AAKfsB,MAAAA,eAAe,EAAE;AACfC,QAAAA,KAAK,EAAEvB,OAAO,CAAC,CAAD;AADC;AALF,KAAjB;AASAL,IAAAA,SAAS,CAAC6B,GAAV,CAAc;AACZ/B,MAAAA,WADY;AAEZgC,MAAAA,OAAO,EAAE,KAFG;AAGZC,MAAAA,iBAAiB,EAAE,IAHP;AAIZC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE9C,UAAU,CAACI,QAAX,CAAoB0C,SADvB;AAERC,QAAAA,OAAO,EAAE/C,UAAU,CAACI,QAAX,CAAoB2C;AAFrB,OAJE;AAQZC,MAAAA,UAAU,EAAE;AACVC,QAAAA,SAAS,EAAE,KADD;AAEVC,QAAAA,KAAK,EAAE,IAFG;AAGVC,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAHA;AAIVC,QAAAA,SAAS,EAAE,MAJD;AAKVC,QAAAA,aAAa,EAAE;AALL;AARA,KAAd;AAiBA9D,IAAAA,YAAY,CAAC2B,OAAD,CAAZ;AACA,SAAKjB,qBAAL,CAA2B4B,MAA3B,CAAkC;AAChCD,MAAAA,MAAM,EAAEV,OAAO,CAAC,CAAD,CADiB;AAIhCY,MAAAA,KAAK,EAAE,KAAKjC,SAAL,CAAeiC;AAJU,KAAlC;AAOA,UAAMwB,eAAe,GAAGpE,iBAAiB,CAACyB,WAAD,CAAjB,CAA+B,CAA/B,IAAoC,CAA5D;;AAEA,QAAI,CAAC2C,eAAL,EAAsB;AACpBtD,MAAAA,UAAU,CAACuD,GAAX;AACD;;AAED,WAAO,IAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKxD,UAAL,CAAgBwD,MAAhB;AACA,SAAK3C,SAAL,CAAe4C,MAAf;;AACA,WAAO,KAAKvC,OAAL,CAAawC,MAApB,EAA4B;AAC1B,WAAKxC,OAAL,CAAayC,GAAb,GAAmBF,MAAnB;AACD;;AACD,SAAKhD,OAAL,CAAagD,MAAb;AACA,SAAKhD,OAAL,GAAe,IAAf;AACA,SAAKE,WAAL,CAAiB8C,MAAjB;AACA,SAAK9C,WAAL,GAAmB,IAAnB;AACD;;AA3IsC;;AA8IzC,SAASG,YAAT,CAAsBlB,EAAtB,EAA0BC,SAA1B,EAAqCc,WAArC,EAAkD;AAChD,QAAMiD,aAAa,GAAGxE,wBAAwB,CAACS,SAAS,CAACqC,IAAX,CAA9C;AACA,SAAO,IAAInD,SAAJ,CAAca,EAAd,EAAkB;AACvBe,IAAAA,WADuB;AAEvBkD,IAAAA,EAAE,i4BAFqB;AAgCvBC,IAAAA,EAAE,iOAhCqB;AA2CvBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,cAAc,EAAEJ;AADT,KA3Cc;AA8CvBK,IAAAA,QAAQ,EAAE,CAAC,OAAD;AA9Ca,GAAlB,CAAP;AAgDD;;AAED,SAASvD,UAAT,CAAoBd,EAApB,EAAwB;AACtB,SAAO,IAAIX,SAAJ,CAAcW,EAAd,EAAkB;AACvBsE,IAAAA,IAAI,EAAE,IAAIC,UAAJ,CAAe,CAAf,CADiB;AAEvBC,IAAAA,MAAM,MAFiB;AAGvBrE,IAAAA,IAAI,MAHmB;AAIvBsE,IAAAA,MAAM,EAAE,CAJe;AAKvBC,IAAAA,OAAO,EAAE,KALc;AAMvBC,IAAAA,UAAU,MANa;AAOvBC,IAAAA,KAAK,EAAE,CAPgB;AAQvBC,IAAAA,MAAM,EAAE;AARe,GAAlB,CAAP;AAUD;;AAED,SAAS7D,cAAT,CAAwBhB,EAAxB,EAA4Ba,OAA5B,EAAqC;AACnC,SAAO,IAAIzB,WAAJ,CAAgBY,EAAhB,EAAoB;AACzB8E,IAAAA,EAAE,EAAE,gDADqB;AAEzBF,IAAAA,KAAK,EAAE,CAFkB;AAGzBC,IAAAA,MAAM,EAAE,CAHiB;AAIzBE,IAAAA,WAAW,EAAE;AACX,eAAwBlE;AADb;AAJY,GAApB,CAAP;AAQD","sourcesContent":["/* eslint-disable complexity, max-statements, max-params */\nimport GL from '@luma.gl/constants';\nimport {Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray} from '@luma.gl/core';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers\n} from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\n\nexport default class GPUSpringTransition {\n  constructor({gl, attribute, timeline}) {\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(\n      gl,\n      Object.assign({}, attribute.settings, {normalized: false})\n    );\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // previous\n      new Buffer(gl, bufferOpts), // current\n      new Buffer(gl, bufferOpts) // next\n    ];\n  }\n\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings, numInstances) {\n    const {gl, buffers, attribute} = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value\n    });\n\n    // when an attribute changes values, a new transition is started. These\n    // are properties that we have to store on this.transition but can change\n    // when new transitions are started, so we have to keep them up-to-date.\n    // this.transition.start() takes the latest settings and updates them.\n    this.transition.start(transitionSettings);\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {buffers, transform, framebuffer, transition} = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: transition.settings.stiffness,\n        damping: transition.settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: [GL.MAX, GL.MAX]\n      }\n    });\n\n    cycleBuffers(buffers);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: this.attribute.value\n    });\n\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    while (this.buffers.length) {\n      this.buffers.pop().delete();\n    }\n    this.texture.delete();\n    this.texture = null;\n    this.framebuffer.delete();\n    this.framebuffer = null;\n  }\n}\n\nfunction getTransform(gl, attribute, framebuffer) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: `\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`,\n    fs: `\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}`,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: GL.RGBA,\n    type: GL.UNSIGNED_BYTE,\n    border: 0,\n    mipmaps: false,\n    dataFormat: GL.RGBA,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n}\n"],"file":"gpu-spring-transition.js"}