{"version":3,"sources":["../../../src/transitions/transition-interpolator.js"],"names":["equals","assert","TransitionInterpolator","constructor","opts","Array","isArray","compare","extract","required","_propsToCompare","_propsToExtract","_requiredProps","arePropsEqual","currentProps","nextProps","key","Object","keys","initializeProps","startProps","endProps","result","startViewStateProps","endViewStateProps","start","end","_checkRequiredProps","interpolateProps","t","getDuration","transitionDuration","props","forEach","propName","value","Number","isFinite"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,SAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,eAAe,MAAMC,sBAAN,CAA6B;AAQ1CC,EAAAA,WAAW,CAACC,IAAI,GAAG,EAAR,EAAY;AACrB,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvBA,MAAAA,IAAI,GAAG;AACLG,QAAAA,OAAO,EAAEH,IADJ;AAELI,QAAAA,OAAO,EAAEJ,IAFJ;AAGLK,QAAAA,QAAQ,EAAEL;AAHL,OAAP;AAKD;;AACD,UAAM;AAACG,MAAAA,OAAD;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,QAA+BL,IAArC;AAEA,SAAKM,eAAL,GAAuBH,OAAvB;AACA,SAAKI,eAAL,GAAuBH,OAAvB;AACA,SAAKI,cAAL,GAAsBH,QAAtB;AACD;;AAQDI,EAAAA,aAAa,CAACC,YAAD,EAAeC,SAAf,EAA0B;AACrC,SAAK,MAAMC,GAAX,IAAkB,KAAKN,eAAL,IAAwBO,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAA1C,EAAkE;AAChE,UACE,EAAEC,GAAG,IAAIF,YAAT,KACA,EAAEE,GAAG,IAAID,SAAT,CADA,IAEA,CAACf,MAAM,CAACc,YAAY,CAACE,GAAD,CAAb,EAAoBD,SAAS,CAACC,GAAD,CAA7B,CAHT,EAIE;AACA,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AASDG,EAAAA,eAAe,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACpC,QAAIC,MAAJ;;AAEA,QAAI,KAAKX,eAAT,EAA0B;AACxB,YAAMY,mBAAmB,GAAG,EAA5B;AACA,YAAMC,iBAAiB,GAAG,EAA1B;;AAEA,WAAK,MAAMR,GAAX,IAAkB,KAAKL,eAAvB,EAAwC;AACtCY,QAAAA,mBAAmB,CAACP,GAAD,CAAnB,GAA2BI,UAAU,CAACJ,GAAD,CAArC;AACAQ,QAAAA,iBAAiB,CAACR,GAAD,CAAjB,GAAyBK,QAAQ,CAACL,GAAD,CAAjC;AACD;;AACDM,MAAAA,MAAM,GAAG;AAACG,QAAAA,KAAK,EAAEF,mBAAR;AAA6BG,QAAAA,GAAG,EAAEF;AAAlC,OAAT;AACD,KATD,MASO;AACLF,MAAAA,MAAM,GAAG;AAACG,QAAAA,KAAK,EAAEL,UAAR;AAAoBM,QAAAA,GAAG,EAAEL;AAAzB,OAAT;AACD;;AAED,SAAKM,mBAAL,CAAyBL,MAAM,CAACG,KAAhC;;AACA,SAAKE,mBAAL,CAAyBL,MAAM,CAACI,GAAhC;;AAEA,WAAOJ,MAAP;AACD;;AASDM,EAAAA,gBAAgB,CAACR,UAAD,EAAaC,QAAb,EAAuBQ,CAAvB,EAA0B;AACxC,WAAOR,QAAP;AACD;;AAQDS,EAAAA,WAAW,CAACV,UAAD,EAAaC,QAAb,EAAuB;AAChC,WAAOA,QAAQ,CAACU,kBAAhB;AACD;;AAEDJ,EAAAA,mBAAmB,CAACK,KAAD,EAAQ;AACzB,QAAI,CAAC,KAAKpB,cAAV,EAA0B;AACxB;AACD;;AAED,SAAKA,cAAL,CAAoBqB,OAApB,CAA4BC,QAAQ,IAAI;AACtC,YAAMC,KAAK,GAAGH,KAAK,CAACE,QAAD,CAAnB;AACAjC,MAAAA,MAAM,CACJmC,MAAM,CAACC,QAAP,CAAgBF,KAAhB,KAA0B9B,KAAK,CAACC,OAAN,CAAc6B,KAAd,CADtB,YAEDD,QAFC,iCAAN;AAID,KAND;AAOD;;AAxGyC","sourcesContent":["import {equals} from 'math.gl';\nimport assert from '../utils/assert';\n\nexport default class TransitionInterpolator {\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts = {}) {\n    if (Array.isArray(opts)) {\n      opts = {\n        compare: opts,\n        extract: opts,\n        required: opts\n      };\n    }\n    const {compare, extract, required} = opts;\n\n    this._propsToCompare = compare;\n    this._propsToExtract = extract;\n    this._requiredProps = required;\n  }\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps, nextProps) {\n    for (const key of this._propsToCompare || Object.keys(nextProps)) {\n      if (\n        !(key in currentProps) ||\n        !(key in nextProps) ||\n        !equals(currentProps[key], nextProps[key])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(startProps, endProps) {\n    let result;\n\n    if (this._propsToExtract) {\n      const startViewStateProps = {};\n      const endViewStateProps = {};\n\n      for (const key of this._propsToExtract) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n      result = {start: startViewStateProps, end: endViewStateProps};\n    } else {\n      result = {start: startProps, end: endProps};\n    }\n\n    this._checkRequiredProps(result.start);\n    this._checkRequiredProps(result.end);\n\n    return result;\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  interpolateProps(startProps, endProps, t) {\n    return endProps;\n  }\n\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps, endProps) {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(\n        Number.isFinite(value) || Array.isArray(value),\n        `${propName} is required for transition`\n      );\n    });\n  }\n}\n"],"file":"transition-interpolator.js"}