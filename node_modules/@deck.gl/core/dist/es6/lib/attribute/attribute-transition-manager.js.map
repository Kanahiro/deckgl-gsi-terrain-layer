{"version":3,"sources":["../../../../src/lib/attribute/attribute-transition-manager.js"],"names":["Transform","GPUInterpolationTransition","GPUSpringTransition","log","TRANSITION_TYPES","interpolation","spring","AttributeTransitionManager","constructor","gl","id","timeline","transitions","needsRedraw","numInstances","isSupported","warn","finalize","attributeName","_removeTransition","update","attributes","attribute","settings","getTransitionSetting","_updateAttribute","hasAttribute","transition","inProgress","getAttributes","animatedAttributes","attributeInTransition","run","updated","cancel","isNew","type","TransitionType","error","start"],"mappings":"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","sourcesContent":["import {Transform} from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\n\nconst TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id, timeline}) {\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else if (gl) {\n      // This class may be instantiated without a WebGL context (e.g. web worker)\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  finalize() {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions = {}, numInstances}) {\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    if (!this.isSupported) {\n      return;\n    }\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n\n      // this attribute might not support transitions?\n      if (!settings) continue; // eslint-disable-line no-continue\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  run() {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _removeTransition(attributeName) {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute, settings) {\n    const transition = this.transitions[attributeName];\n    // an attribute can change transition type when it updates\n    // let's remove the transition when that happens so we can create the new transition type\n    // TODO: when switching transition types, make sure to carry over the attribute's\n    // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n    // for the next transition\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(`unsupported transition type '${settings.type}'`)();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}\n"],"file":"attribute-transition-manager.js"}