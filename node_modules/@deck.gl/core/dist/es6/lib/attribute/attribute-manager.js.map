{"version":3,"sources":["../../../../src/lib/attribute/attribute-manager.js"],"names":["Attribute","log","debug","AttributeTransitionManager","TRACE_INVALIDATE","TRACE_UPDATE_START","TRACE_UPDATE_END","TRACE_ATTRIBUTE_UPDATE_START","TRACE_ATTRIBUTE_ALLOCATE","TRACE_ATTRIBUTE_UPDATE_END","AttributeManager","constructor","gl","id","stats","timeline","attributes","updateTriggers","accessors","needsRedraw","userData","attributeTransitionManager","Object","seal","finalize","attributeName","delete","getNeedsRedraw","opts","clearRedrawFlags","redraw","setNeedsRedraw","add","updaters","_add","addInstanced","instanced","remove","attributeNameArray","i","length","name","undefined","invalidate","triggerName","dataRange","invalidatedAttributes","_invalidateTrigger","invalidateAll","setNeedsUpdate","update","data","numInstances","startIndices","transitions","props","buffers","context","updated","get","timeStart","attribute","accessorName","settings","accessor","removed","setExternalBuffer","setBinaryValue","setConstantValue","needsUpdate","_updateAttribute","timeEnd","updateTransition","transitionUpdated","run","getAttributes","getChangedAttributes","clearChangedFlags","changedAttributes","assign","hasAttribute","getShaderAttributes","excludeAttributes","shaderAttributes","getAccessors","extraProps","warn","newAttributes","newAttribute","_createAttribute","_mapUpdateTriggersToAttributes","constant","isIndexed","elements","size","value","divisor","triggers","getUpdateTriggers","forEach","push","allocate","updateBuffer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute from './attribute';\nimport log from '../../utils/log';\nimport debug from '../../debug';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\n\nexport default class AttributeManager {\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  constructor(gl, {id = 'attribute-manager', stats, timeline} = {}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`,\n      timeline\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n    this.attributeTransitionManager.finalize();\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  // @return {AttributeManager} - for chaining\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = true;\n    return this;\n  }\n\n  // Adds attributes\n  add(attributes, updaters) {\n    this._add(attributes, updaters);\n  }\n\n  // Adds attributes\n  addInstanced(attributes, updaters) {\n    this._add(attributes, updaters, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName, dataRange) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n  }\n\n  invalidateAll(dataRange) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, 'all');\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({\n    data,\n    numInstances,\n    startIndices = null,\n    transitions,\n    props = {},\n    buffers = {},\n    context = {}\n  } = {}) {\n    // keep track of whether some attributes are updated\n    let updated = false;\n\n    debug(TRACE_UPDATE_START, this);\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      const accessorName = attribute.settings.accessor;\n      attribute.startIndices = startIndices;\n\n      if (props[attributeName]) {\n        log.removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();\n      }\n\n      if (attribute.setExternalBuffer(buffers[attributeName])) {\n        // Step 1: try update attribute directly from external buffers\n      } else if (attribute.setBinaryValue(buffers[accessorName], data.startIndices)) {\n        // Step 2: try set packed value from external typed array\n      } else if (!buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {\n        // Step 3: try set constant value from props\n        // Note: if buffers[accessorName] is supplied, ignore props[accessorName]\n        // This may happen when setBinaryValue falls through to use the auto updater\n      } else if (attribute.needsUpdate()) {\n        // Step 4: update via updater callback\n        updated = true;\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n\n    if (updated) {\n      // Only initiate alloc/update (and logging) if actually needed\n      debug(TRACE_UPDATE_END, this, numInstances);\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition() {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.run();\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes() {\n    return this.attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuffers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes(opts = {clearChangedFlags: false}) {\n    const {attributes, attributeTransitionManager} = this;\n\n    const changedAttributes = Object.assign({}, attributeTransitionManager.getAttributes());\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  // Returns shader attributes\n  getShaderAttributes(attributes, excludeAttributes = {}) {\n    if (!attributes) {\n      attributes = this.getAttributes();\n    }\n    const shaderAttributes = {};\n    for (const attributeName in attributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());\n      }\n    }\n    return shaderAttributes;\n  }\n\n  // PROTECTED METHODS - Only to be used by collaborating classes, not by apps\n\n  // Returns object containing all accessors as keys, with non-null values\n  // @return {Object} - accessors object\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  _add(attributes, updaters, extraProps = {}) {\n    if (updaters) {\n      log.warn('AttributeManager.add({updaters}) - updater map no longer supported')();\n    }\n\n    const newAttributes = {};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      const newAttribute = this._createAttribute(attributeName, attribute, extraProps);\n\n      newAttributes[attributeName] = newAttribute;\n    }\n\n    Object.assign(this.attributes, newAttributes);\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  _createAttribute(name, attribute, extraProps) {\n    const props = {\n      id: name,\n      // Luma fields\n      constant: attribute.constant || false,\n      isIndexed: attribute.isIndexed || attribute.elements,\n      size: (attribute.elements && 1) || attribute.size,\n      value: attribute.value || null,\n      divisor: attribute.instanced || extraProps.instanced ? 1 : attribute.divisor\n    };\n\n    return new Attribute(this.gl, Object.assign({}, attribute, props));\n  }\n\n  // build updateTrigger name to attribute name mapping\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName, dataRange) {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    }\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute(opts) {\n    const {attribute, numInstances} = opts;\n    debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n\n    if (attribute.allocate(numInstances)) {\n      debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n    }\n\n    // Calls update on any buffers that need update\n    const updated = attribute.updateBuffer(opts);\n    if (updated) {\n      this.needsRedraw = true;\n      debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n    }\n  }\n}\n"],"file":"attribute-manager.js"}