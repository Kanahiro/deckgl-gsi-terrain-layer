{"version":3,"sources":["../../../../src/lib/attribute/shader-attribute.js"],"names":["ShaderAttribute","constructor","dataColumn","opts","source","value","getValue","buffer","getBuffer","accessor","getAccessor","size","constantValue","length","Float32Array","index","elementOffset","i"],"mappings":";;;;;;AAGA,eAAe,MAAMA,eAAN,CAAsB;AACnCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,IAAb,EAAmB;AAE5B,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcF,UAAd;AACD;;AAED,MAAIG,KAAJ,GAAY;AACV,WAAO,KAAKD,MAAL,CAAYC,KAAnB;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMC,MAAM,GAAG,KAAKH,MAAL,CAAYI,SAAZ,EAAf;AACA,UAAMC,QAAQ,GAAG,KAAKC,WAAL,EAAjB;;AACA,QAAIH,MAAJ,EAAY;AACV,aAAO,CAACA,MAAD,EAASE,QAAT,CAAP;AACD;;AAED,UAAM;AAACJ,MAAAA;AAAD,QAAU,KAAKD,MAArB;AACA,UAAM;AAACO,MAAAA;AAAD,QAASF,QAAf;AACA,QAAIG,aAAa,GAAGP,KAApB;;AAEA,QAAIA,KAAK,IAAIA,KAAK,CAACQ,MAAN,KAAiBF,IAA9B,EAAoC;AAClCC,MAAAA,aAAa,GAAG,IAAIE,YAAJ,CAAiBH,IAAjB,CAAhB;AAEA,YAAMI,KAAK,GAAGN,QAAQ,CAACO,aAAT,IAA0B,CAAxC;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0B,EAAEM,CAA5B,EAA+B;AAC7BL,QAAAA,aAAa,CAACK,CAAD,CAAb,GAAmBZ,KAAK,CAACU,KAAK,GAAGE,CAAT,CAAxB;AACD;AACF;;AAED,WAAOL,aAAP;AACD;;AAEDF,EAAAA,WAAW,GAAG;AACZ,2CAEK,KAAKN,MAAL,CAAYM,WAAZ,EAFL,GAIK,KAAKP,IAJV;AAMD;;AAzCkC","sourcesContent":["/* eslint-disable complexity */\n\n/* This class creates a luma.gl-compatible \"view\" on top of a DataColumn instance */\nexport default class ShaderAttribute {\n  constructor(dataColumn, opts) {\n    // Options that cannot be changed later\n    this.opts = opts;\n    this.source = dataColumn;\n  }\n\n  get value() {\n    return this.source.value;\n  }\n\n  getValue() {\n    const buffer = this.source.getBuffer();\n    const accessor = this.getAccessor();\n    if (buffer) {\n      return [buffer, accessor];\n    }\n\n    const {value} = this.source;\n    const {size} = accessor;\n    let constantValue = value;\n\n    if (value && value.length !== size) {\n      constantValue = new Float32Array(size);\n      // initiate offset values\n      const index = accessor.elementOffset || 0; // element offset\n      for (let i = 0; i < size; ++i) {\n        constantValue[i] = value[index + i];\n      }\n    }\n\n    return constantValue;\n  }\n\n  getAccessor() {\n    return {\n      // source data accessor\n      ...this.source.getAccessor(),\n      // shader attribute overrides\n      ...this.opts\n    };\n  }\n}\n"],"file":"shader-attribute.js"}