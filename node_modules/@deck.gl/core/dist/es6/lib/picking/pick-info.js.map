{"version":3,"sources":["../../../../src/lib/picking/pick-info.js"],"names":["getEmptyPickingInfo","pickInfo","viewports","pixelRatio","x","y","z","viewport","getViewportFromCoordinates","coordinate","unproject","targetZ","color","layer","index","picked","pixel","lngLat","devicePixel","pickedX","pickedY","processPickInfo","opts","lastPickedInfo","mode","layers","pickedColor","pickedLayer","pickedObjectIndex","affectedLayers","lastPickedObjectIndex","lastPickedLayerId","layerId","pickedLayerId","props","id","lastPickedLayer","find","unshift","info","baseInfo","infos","Map","set","forEach","Object","assign","getLayerPickingInfo","autoHighlight","pickingModuleParameters","pickingSelectedColor","highlightColor","pickingHighlightColor","setModuleParameters","setNeedsRedraw","sourceLayer","getPickingInfo","parent"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Even if nothing gets picked, we need to expose some information of the picking action:\n// x, y, coordinates etc.\nexport function getEmptyPickingInfo({pickInfo, viewports, pixelRatio, x, y, z}) {\n  const viewport = getViewportFromCoordinates({viewports}); // TODO - add coords\n  const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y], {targetZ: z});\n\n  return {\n    color: null,\n    layer: null,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    // TODO remove the lngLat prop after compatibility check\n    lngLat: coordinate,\n    devicePixel: pickInfo && [pickInfo.pickedX, pickInfo.pickedY],\n    pixelRatio\n  };\n}\n\n/* eslint-disable max-depth */\nexport function processPickInfo(opts) {\n  const {pickInfo, lastPickedInfo, mode, layers} = opts;\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedObjectIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = Object.assign({}, baseInfo);\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    if (info) {\n      infos.set(info.layer.id, info);\n    }\n\n    if (mode === 'hover' && layer.props.autoHighlight) {\n      const pickingModuleParameters = {\n        pickingSelectedColor: pickedLayer === layer ? pickedColor : null\n      };\n      const {highlightColor} = layer.props;\n      if (pickedLayer === layer && typeof highlightColor === 'function') {\n        pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n      }\n      layer.setModuleParameters(pickingModuleParameters);\n      // setModuleParameters does not trigger redraw\n      layer.setNeedsRedraw();\n    }\n  });\n\n  return infos;\n}\n\n// Walk up the layer composite chain to populate the info object\nexport function getLayerPickingInfo({layer, info, mode}) {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || layer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent;\n  }\n  return info;\n}\n\n// Indentifies which viewport, if any corresponds to x and y\n// Returns first viewport if no match\n// TODO - need to determine which viewport we are in\n// TODO - document concept of \"primary viewport\" that matches all coords?\n// TODO - static method on Viewport class?\nfunction getViewportFromCoordinates({viewports}) {\n  const viewport = viewports[0];\n  return viewport;\n}\n"],"file":"pick-info.js"}