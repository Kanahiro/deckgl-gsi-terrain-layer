{"version":3,"sources":["../../../../src/lib/resource/resource-manager.js"],"names":["Resource","ResourceManager","constructor","gl","protocol","_context","resourceManager","_resources","_consumers","_pruneRequest","contains","resourceId","startsWith","add","data","forceUpdate","persistent","res","setData","remove","delete","unsubscribe","consumerId","consumer","requestId","request","resource","prune","subscribe","onChange","resources","replace","_track","getData","undefined","setTimeout","_prune","finalize","key","consumers","Object","keys","inUse"],"mappings":"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","sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\n\nexport default class ResourceManager {\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({resourceId, data, forceUpdate = false, persistent = true}) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}) {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        if (request.resource) {\n          request.resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe({resourceId, onChange, consumerId, requestId = 'default'}) {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    if (request.resource) {\n      request.resource.unsubscribe(request);\n      request.resource = null;\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resource = resource;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"],"file":"resource-manager.js"}