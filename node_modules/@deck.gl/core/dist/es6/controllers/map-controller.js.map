{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","LinearInterpolator","TRANSITION_EVENTS","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","NO_TRANSITION_PROPS","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","constructor","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_interactiveState","getViewportProps","_viewportProps","getInteractiveState","panStart","pos","_getUpdatedState","_unproject","pan","startPos","_calculateNewLngLat","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","getMapCenterByLngLatPosition","lngLat","zoomEnd","zoomIn","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","props","Object","assign","Math","abs","offset","newProps","_applyConstraints","viewport","unproject","log2","MapController","invertPan","_getTransitionProps","_onPanRotate","event","dragRotate","deltaX","deltaY","centerY","getCenter","startY","controllerState","min","max","newControllerState","updateViewport","isDragging","isRotating"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    return this._panFromCenter([100, 0]);\n  }\n\n  moveRight() {\n    return this._panFromCenter([-100, 0]);\n  }\n\n  moveUp() {\n    return this._panFromCenter([0, 100]);\n  }\n\n  moveDown() {\n    return this._panFromCenter([0, -100]);\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._interactiveState,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    super(MapState, props);\n    this.invertPan = true;\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n  }\n}\n"],"file":"map-controller.js"}