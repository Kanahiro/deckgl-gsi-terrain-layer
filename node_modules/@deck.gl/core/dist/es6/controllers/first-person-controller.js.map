{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["Controller","ViewState","mod","Vector3","_SphericalCoordinates","SphericalCoordinates","clamp","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","FirstPersonState","constructor","width","height","longitude","latitude","startBearing","startPitch","startZoomPosition","startZoom","_interactiveState","getInteractiveState","getDirection","use2D","spherical","_viewportProps","direction","toVector3","normalize","panStart","pan","panEnd","rotateStart","pos","_getUpdatedState","rotate","deltaScaleX","deltaScaleY","Number","isFinite","rotateEnd","zoomStart","zoom","scale","_move","Math","log2","zoomEnd","moveLeft","rotateZ","radians","PI","moveRight","moveUp","moveDown","negate","rotateLeft","rotateRight","rotateUp","rotateDown","zoomIn","zoomOut","shortestPathFrom","viewState","fromProps","getViewportProps","props","Object","assign","abs","speed","fromPosition","delta","add","newProps","_applyConstraints","FirstPersonController"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    return this._getUpdatedState({\n      bearing: startBearing - deltaScaleX * 180,\n      pitch: startPitch - deltaScaleY * 90\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._interactiveState;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale), startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft() {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}));\n  }\n\n  moveRight() {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}));\n  }\n\n  // forward\n  moveUp() {\n    const direction = this.getDirection(true);\n    return this._move(direction);\n  }\n\n  // backward\n  moveDown() {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate());\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  zoomIn() {\n    return this.zoom({scale: 2});\n  }\n\n  zoomOut() {\n    return this.zoom({scale: 0.5});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed = 1, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed * MOVEMENT_SPEED);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n}\n"],"file":"first-person-controller.js"}