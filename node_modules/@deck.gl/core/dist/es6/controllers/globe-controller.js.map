{"version":3,"sources":["../../../src/controllers/globe-controller.js"],"names":["clamp","Controller","MapState","mod","LinearInterpolator","TRANSITION_EVENTS","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","GlobeState","_applyConstraints","props","maxZoom","minZoom","zoom","longitude","latitude","GlobeController","constructor","invertPan","setProps","dragRotate","touchRotate","_getTransitionProps"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,GAAR,QAAkB,qBAAlB;AACA,OAAOC,kBAAP,MAA+B,oCAA/B;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AAEA,MAAMC,uBAAuB,GAAG;AAC9BC,EAAAA,kBAAkB,EAAE,GADU;AAE9BC,EAAAA,gBAAgB,EAAEC,CAAC,IAAIA,CAFO;AAG9BC,EAAAA,sBAAsB,EAAE,IAAIN,kBAAJ,CAAuB,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,CAAvB,CAHM;AAI9BO,EAAAA,sBAAsB,EAAEN,iBAAiB,CAACO;AAJZ,CAAhC;;AAOA,MAAMC,UAAN,SAAyBX,QAAzB,CAAkC;AAEhCY,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AAEvB,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,QAA2BH,KAAjC;AACAA,IAAAA,KAAK,CAACG,IAAN,GAAalB,KAAK,CAACkB,IAAD,EAAOD,OAAP,EAAgBD,OAAhB,CAAlB;AAEA,UAAM;AAACG,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,QAAwBL,KAA9B;;AACA,QAAII,SAAS,GAAG,CAAC,GAAb,IAAoBA,SAAS,GAAG,GAApC,EAAyC;AACvCJ,MAAAA,KAAK,CAACI,SAAN,GAAkBhB,GAAG,CAACgB,SAAS,GAAG,GAAb,EAAkB,GAAlB,CAAH,GAA4B,GAA9C;AACD;;AACDJ,IAAAA,KAAK,CAACK,QAAN,GAAiBpB,KAAK,CAACoB,QAAD,EAAW,CAAC,EAAZ,EAAgB,EAAhB,CAAtB;AAEA,WAAOL,KAAP;AACD;;AAd+B;;AAiBlC,eAAe,MAAMM,eAAN,SAA8BpB,UAA9B,CAAyC;AACtDqB,EAAAA,WAAW,CAACP,KAAD,EAAQ;AACjB,UAAMF,UAAN,EAAkBE,KAAlB;AACA,SAAKQ,SAAL,GAAiB,IAAjB;AACD;;AAEDC,EAAAA,QAAQ,CAACT,KAAD,EAAQ;AACd,UAAMS,QAAN,CAAeT,KAAf;AAGA,SAAKU,UAAL,GAAkB,KAAlB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AAEpB,WAAOrB,uBAAP;AACD;;AAjBqD","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\n\nimport {MapState} from './map-controller';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['longitude', 'latitude', 'zoom']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    const {longitude, latitude} = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -89, 89);\n\n    return props;\n  }\n}\n\nexport default class GlobeController extends Controller {\n  constructor(props) {\n    super(GlobeState, props);\n    this.invertPan = true;\n  }\n\n  setProps(props) {\n    super.setProps(props);\n\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"globe-controller.js"}