{"version":3,"sources":["../../../src/views/view.js"],"names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","constructor","props","id","x","y","width","height","projectionMatrix","fovy","near","far","modelMatrix","viewportInstance","type","displayName","Object","assign","_parseDimensions","equals","bind","seal","view","viewChanged","makeViewport","viewState","filterViewState","viewportDimensions","getDimensions","_getViewport","getViewStateId","newViewState","key","_x","_y","_width","_height","_getControllerProps","defaultOpts","opts","controller","ViewportType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // Viewport Options\n      projectionMatrix = null, // Projection matrix\n      fovy = 50, // Perspective projection parameters, used if projectionMatrix not supplied\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance = null,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = Object.assign({}, props, {\n      id: this.id,\n      projectionMatrix,\n      fovy,\n      near,\n      far,\n      modelMatrix\n    });\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    const props = {...viewState, ...this.props, ...viewportDimensions};\n    return this._getViewport(props);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = Object.assign({}, viewState);\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return Object.assign({}, defaultOpts, opts);\n  }\n\n  // Overridable method\n  _getViewport(props) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType(props);\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"],"file":"view.js"}