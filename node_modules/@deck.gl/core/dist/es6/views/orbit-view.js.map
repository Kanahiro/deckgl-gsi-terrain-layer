{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["View","Viewport","Matrix4","OrbitController","DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","fovy","orbitAxis","rotationX","rotationOrbit","zoom","distance","tan","up","eye","viewMatrix","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","constructor","props","id","x","y","width","near","far","target","position","OrbitView","Object","assign","type","controller","_getControllerProps","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, fovy, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const distance = 0.5 / Math.tan((fovy * DEGREES_TO_RADIANS) / 2);\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -distance, 0] : [0, 0, distance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      id,\n      x,\n      y,\n      width,\n      height,\n\n      fovy = 50, // From eye position to lookAt\n      near,\n      far,\n      orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    super({\n      id,\n      viewMatrix: getViewMatrix({\n        height,\n        fovy,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      near,\n      far,\n      x,\n      y,\n      position: target,\n      width,\n      height,\n      zoom\n    });\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props) {\n    super(\n      Object.assign({}, props, {\n        type: OrbitViewport\n      })\n    );\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"],"file":"orbit-view.js"}