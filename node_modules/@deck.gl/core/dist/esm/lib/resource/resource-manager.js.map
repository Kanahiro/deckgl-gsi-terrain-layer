{"version":3,"sources":["../../../../src/lib/resource/resource-manager.js"],"names":["Resource","ResourceManager","gl","protocol","_context","resourceManager","_resources","_consumers","_pruneRequest","resourceId","startsWith","data","forceUpdate","persistent","res","setData","consumerId","consumer","requestId","request","resource","unsubscribe","prune","onChange","resources","replace","add","_track","getData","undefined","setTimeout","_prune","key","consumers","subscribe","Object","keys","inUse"],"mappings":"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","sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\n\nexport default class ResourceManager {\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({resourceId, data, forceUpdate = false, persistent = true}) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}) {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        if (request.resource) {\n          request.resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe({resourceId, onChange, consumerId, requestId = 'default'}) {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    if (request.resource) {\n      request.resource.unsubscribe(request);\n      request.resource = null;\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resource = resource;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"],"file":"resource-manager.js"}