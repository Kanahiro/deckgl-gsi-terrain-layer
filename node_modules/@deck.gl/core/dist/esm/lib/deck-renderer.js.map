{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["debug","DrawLayersPass","PickLayersPass","Framebuffer","TRACE_RENDER_LAYERS","DeckRenderer","gl","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","_onError","props","onError","opts","layerPass","effects","target","getDefaultFramebuffer","_preRender","outputBuffer","renderStats","render","_postRender","clearRedrawFlags","redraw","buffer","length","effect","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n    this._onError = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = this.layerFilter;\n    opts.onError = this._onError;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"],"file":"deck-renderer.js"}