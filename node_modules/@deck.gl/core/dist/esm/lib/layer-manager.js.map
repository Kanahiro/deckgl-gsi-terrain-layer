{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["Timeline","Layer","LIFECYCLE","log","debug","flatten","Stats","ResourceManager","Viewport","createProgramManager","TRACE_SET_LAYERS","TRACE_ACTIVATE_VIEWPORT","INITIAL_CONTEXT","Object","seal","layerManager","resourceManager","deck","gl","stats","shaderCache","pickingFBO","mousePosition","userData","layerName","layer","LayerManager","viewport","timeline","lastRenderedLayers","layers","protocol","context","assign","programManager","id","_needsRedraw","_needsUpdate","_debug","_onError","activateViewport","bind","finalize","_finalizeLayer","opts","clearRedrawFlags","redraw","layerNeedsRedraw","getNeedsRedraw","reason","layerIds","filter","find","layerId","indexOf","props","setLayers","onError","newLayers","forceUpdate","shouldUpdate","Boolean","_updateLayers","needsUpdate","setNeedsRedraw","stage","error","oldLayers","oldLayerMap","oldLayer","warn","generatedLayers","_updateSublayersRecursively","_finalizeOldLayers","hasUniformTransition","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","_updateLayer","push","isComposite","getSubLayers","err","_handleError","_initialize","lifecycle","INITIALIZED","_transferState","MATCHED","AWAITING_GC","_update","AWAITING_FINALIZATION","_finalize","FINALIZED"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Timeline} from '@luma.gl/core';\nimport Layer from './layer';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\nimport ResourceManager from './resource/resource-manager';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  resourceManager: null,\n  deck: null,\n  gl: null,\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  mousePosition: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {deck, stats, viewport, timeline} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n    this.resourceManager = new ResourceManager({gl, protocol: 'deck://'});\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n      gl,\n      deck,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager\n    });\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n    this._onError = null;\n\n    this.activateViewport = this.activateViewport.bind(this);\n\n    Object.seal(this);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  finalize() {\n    this.resourceManager.finalize();\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  // Set props needed for layer rendering and picking.\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers, forceUpdate = false) {\n    // TODO - something is generating state updates that cause rerender of the same\n    const shouldUpdate = forceUpdate || newLayers !== this.lastRenderedLayers;\n    debug(TRACE_SET_LAYERS, this, shouldUpdate, newLayers);\n\n    if (!shouldUpdate) {\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, Boolean);\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, newLayers);\n\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      const forceUpdate = true;\n      this.setLayers(this.lastRenderedLayers, forceUpdate);\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  activateViewport(viewport) {\n    debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n    if (viewport) {\n      this.context.viewport = viewport;\n    }\n    return this;\n  }\n\n  _handleError(stage, error, layer) {\n    if (this._onError) {\n      this._onError(error, layer);\n    } else {\n      log.error(`error during ${stage} of ${layerName(layer)}`, error)();\n    }\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers(oldLayers, newLayers) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    // Finalize unmatched layers\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = true;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        this._handleError('matching', err, newLayer); // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err, layer);\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err, layer);\n    }\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || `finalized ${layerName(layer)}`;\n\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err, layer);\n    }\n  }\n}\n"],"file":"layer-manager.js"}