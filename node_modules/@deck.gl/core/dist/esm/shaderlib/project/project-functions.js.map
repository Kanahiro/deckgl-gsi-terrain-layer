{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.js"],"names":["COORDINATE_SYSTEM","getOffsetOrigin","WebMercatorViewport","vec4","vec3","addMetersToLngLat","lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","p","projectPosition","longitude","latitude","z","distanceScales","getDistanceScales","unitsPerMeter","normalizeParameters","opts","normalizedParams","Object","assign","coordinateSystem","coordinateOrigin","fromCoordinateSystem","fromCoordinateOrigin","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","undefined","getWorldPosition","position","modelMatrix","x","y","transformMat4","LNGLAT_OFFSETS","METER_OFFSETS","params","geospatialOrigin","shaderCoordinateOrigin","worldPosition","positionCommonSpace","sub"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {\n  const p = viewport.projectPosition(lngLatZ);\n\n  // TODO - avoid using instanceof\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\n\nfunction normalizeParameters(opts) {\n  const normalizedParams = Object.assign({}, opts);\n\n  let {coordinateSystem} = opts;\n  const {viewport, coordinateOrigin, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  normalizedParams.coordinateSystem = coordinateSystem;\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(\n  position,\n  {viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode}\n) {\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]),\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial\n        ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n        : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the reference coordinate system used\n *   align world position\n * @param {array} params.coordinateOrigin - the reference coordinate origin used\n *   to align world position\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    // optional\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"],"file":"project-functions.js"}