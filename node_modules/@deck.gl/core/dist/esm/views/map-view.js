import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import View from './view';
import WebMercatorViewport from '../viewports/web-mercator-viewport';
import MapController from '../controllers/map-controller';

var MapView = function (_View) {
  _inherits(MapView, _View);

  var _super = _createSuper(MapView);

  function MapView(props) {
    _classCallCheck(this, MapView);

    return _super.call(this, Object.assign({}, props, {
      type: WebMercatorViewport
    }));
  }

  _createClass(MapView, [{
    key: "controller",
    get: function get() {
      return this._getControllerProps({
        type: MapController
      });
    }
  }]);

  return MapView;
}(View);

export { MapView as default };
MapView.displayName = 'MapView';
//# sourceMappingURL=map-view.js.map