{"version":3,"sources":["../../../src/views/view.js"],"names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","props","id","x","y","width","height","projectionMatrix","fovy","near","far","modelMatrix","viewportInstance","type","constructor","displayName","Object","assign","_parseDimensions","equals","bind","seal","view","viewChanged","viewState","filterViewState","viewportDimensions","getDimensions","_getViewport","newViewState","key","_x","_y","_width","_height","defaultOpts","opts","controller","ViewportType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // Viewport Options\n      projectionMatrix = null, // Projection matrix\n      fovy = 50, // Perspective projection parameters, used if projectionMatrix not supplied\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance = null,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = Object.assign({}, props, {\n      id: this.id,\n      projectionMatrix,\n      fovy,\n      near,\n      far,\n      modelMatrix\n    });\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    const props = {...viewState, ...this.props, ...viewportDimensions};\n    return this._getViewport(props);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = Object.assign({}, viewState);\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return Object.assign({}, defaultOpts, opts);\n  }\n\n  // Overridable method\n  _getViewport(props) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType(props);\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"],"file":"view.js"}