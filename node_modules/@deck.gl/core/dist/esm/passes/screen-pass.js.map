{"version":3,"sources":["../../../src/passes/screen-pass.js"],"names":["ClipSpace","withParameters","clear","Pass","ScreenPass","gl","props","module","fs","id","model","modules","params","framebuffer","outputBuffer","clearColor","_renderPass","inputBuffer","color","draw","moduleSettings","uniforms","texture","texSize","width","height","parameters","depthWrite","depthTest"],"mappings":";;;;;;;;;;AAMA,SAAQA,SAAR,EAAmBC,cAAnB,EAAmCC,KAAnC,QAA+C,eAA/C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAEqBC,U;;;;;AACnB,sBAAYC,EAAZ,EAA4B;AAAA;;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAAA;;AAC1B,8BAAMD,EAAN,EAAUC,KAAV;AAD0B,QAEnBC,MAFmB,GAEDD,KAFC,CAEnBC,MAFmB;AAAA,QAEXC,EAFW,GAEDF,KAFC,CAEXE,EAFW;AAAA,QAEPC,EAFO,GAEDH,KAFC,CAEPG,EAFO;AAG1B,UAAKC,KAAL,GAAa,IAAIV,SAAJ,CAAcK,EAAd,EAAkB;AAACI,MAAAA,EAAE,EAAFA,EAAD;AAAKD,MAAAA,EAAE,EAAFA,EAAL;AAASG,MAAAA,OAAO,EAAE,CAACJ,MAAD;AAAlB,KAAlB,CAAb;AAH0B;AAI3B;;;;2BAEMK,M,EAAQ;AAAA;;AACb,UAAMP,EAAE,GAAG,KAAKA,EAAhB;AAEAJ,MAAAA,cAAc,CAACI,EAAD,EAAK;AAACQ,QAAAA,WAAW,EAAED,MAAM,CAACE,YAArB;AAAmCC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAA/C,OAAL,EAAmE;AAAA,eAC/E,MAAI,CAACC,WAAL,CAAiBX,EAAjB,EAAqBO,MAArB,CAD+E;AAAA,OAAnE,CAAd;AAGD;;;8BAEQ;AACP,WAAKF,KAAL;AACA,WAAKA,KAAL,GAAa,IAAb;AACD;;;gCAUWL,E,QAAiC;AAAA,UAA5BY,WAA4B,QAA5BA,WAA4B;AAAA,UAAfH,YAAe,QAAfA,YAAe;AAC3CZ,MAAAA,KAAK,CAACG,EAAD,EAAK;AAACa,QAAAA,KAAK,EAAE;AAAR,OAAL,CAAL;AACA,WAAKR,KAAL,CAAWS,IAAX,CAAgB;AACdC,QAAAA,cAAc,EAAE,KAAKd,KAAL,CAAWc,cADb;AAEdC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,OAAO,EAAEL,WADD;AAERM,UAAAA,OAAO,EAAE,CAACN,WAAW,CAACO,KAAb,EAAoBP,WAAW,CAACQ,MAAhC;AAFD,SAFI;AAMdC,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAE,KADF;AAEVC,UAAAA,SAAS,EAAE;AAFD;AANE,OAAhB;AAWD;;;;EAzCqCzB,I;;SAAnBC,U","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport {ClipSpace, withParameters, clear} from '@luma.gl/core';\nimport Pass from './pass';\n\nexport default class ScreenPass extends Pass {\n  constructor(gl, props = {}) {\n    super(gl, props);\n    const {module, fs, id} = props;\n    this.model = new ClipSpace(gl, {id, fs, modules: [module]});\n  }\n\n  render(params) {\n    const gl = this.gl;\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private methods\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass(gl, {inputBuffer, outputBuffer}) {\n    clear(gl, {color: true});\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"],"file":"screen-pass.js"}