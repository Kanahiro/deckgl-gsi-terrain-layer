{"version":3,"sources":["../../../src/passes/shadow-pass.js"],"names":["default","LayersPass","Framebuffer","Texture2D","Renderbuffer","withParameters","cssToDeviceRatio","ShadowPass","gl","props","shadowMap","width","height","parameters","depthBuffer","format","fbo","id","attachments","params","target","depthRange","depthTest","blend","clearColor","viewport","viewports","pixelRatio","resize","pass","layer","shadowEnabled","drawToShadowMap"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAAQA,OAAO,IAAIC,UAAnB,QAAoC,eAApC;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,YAHF,EAIEC,cAJF,EAKEC,gBALF,QAMO,eANP;;IAQqBC,U;;;;;AACnB,sBAAYC,EAAZ,EAAgBC,KAAhB,EAAuB;AAAA;;AAAA;;AAAA;;AACrB,8BAAMD,EAAN,EAAUC,KAAV;AAGA,UAAKC,SAAL,GAAiB,IAAIP,SAAJ,CAAcK,EAAd,EAAkB;AACjCG,MAAAA,KAAK,EAAE,CAD0B;AAEjCC,MAAAA,MAAM,EAAE,CAFyB;AAGjCC,MAAAA,UAAU;AAHuB,KAAlB,CAAjB;AAWA,UAAKC,WAAL,GAAmB,IAAIV,YAAJ,CAAiBI,EAAjB,EAAqB;AACtCO,MAAAA,MAAM,OADgC;AAEtCJ,MAAAA,KAAK,EAAE,CAF+B;AAGtCC,MAAAA,MAAM,EAAE;AAH8B,KAArB,CAAnB;AAMA,UAAKI,GAAL,GAAW,IAAId,WAAJ,CAAgBM,EAAhB,EAAoB;AAC7BS,MAAAA,EAAE,EAAE,WADyB;AAE7BN,MAAAA,KAAK,EAAE,CAFsB;AAG7BC,MAAAA,MAAM,EAAE,CAHqB;AAI7BM,MAAAA,WAAW,2DACe,MAAKR,SADpB,wCAGc,MAAKI,WAHnB;AAJkB,KAApB,CAAX;AArBqB;AA+BtB;;;;2BAEMK,M,EAAQ;AAAA;;AACb,UAAMC,MAAM,GAAG,KAAKJ,GAApB;AAEAX,MAAAA,cAAc,CACZ,KAAKG,EADO,EAEZ;AACEa,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADd;AAEEC,QAAAA,SAAS,EAAE,IAFb;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAJd,OAFY,EAQZ,YAAM;AACJ,YAAMC,QAAQ,GAAGN,MAAM,CAACO,SAAP,CAAiB,CAAjB,CAAjB;AACA,YAAMC,UAAU,GAAGrB,gBAAgB,CAAC,MAAI,CAACE,EAAN,CAAnC;AACA,YAAMG,KAAK,GAAGc,QAAQ,CAACd,KAAT,GAAiBgB,UAA/B;AACA,YAAMf,MAAM,GAAGa,QAAQ,CAACb,MAAT,GAAkBe,UAAjC;;AACA,YAAIhB,KAAK,KAAKS,MAAM,CAACT,KAAjB,IAA0BC,MAAM,KAAKQ,MAAM,CAACR,MAAhD,EAAwD;AACtDQ,UAAAA,MAAM,CAACQ,MAAP,CAAc;AAACjB,YAAAA,KAAK,EAALA,KAAD;AAAQC,YAAAA,MAAM,EAANA;AAAR,WAAd;AACD;;AAED,mHAAiBO,MAAjB;AAAyBC,UAAAA,MAAM,EAANA,MAAzB;AAAiCS,UAAAA,IAAI,EAAE;AAAvC;AACD,OAlBW,CAAd;AAoBD;;;oCAEeC,K,EAAO;AACrB,aAAOA,KAAK,CAACrB,KAAN,CAAYsB,aAAZ,KAA8B,KAArC;AACD;;;0CAEqB;AACpB,aAAO;AACLC,QAAAA,eAAe,EAAE;AADZ,OAAP;AAGD;;;8BAEQ;AACP,UAAI,KAAKhB,GAAT,EAAc;AACZ,aAAKA,GAAL;AACA,aAAKA,GAAL,GAAW,IAAX;AACD;;AAED,UAAI,KAAKN,SAAT,EAAoB;AAClB,aAAKA,SAAL;AACA,aAAKA,SAAL,GAAiB,IAAjB;AACD;;AAED,UAAI,KAAKI,WAAT,EAAsB;AACpB,aAAKA,WAAL;AACA,aAAKA,WAAL,GAAmB,IAAnB;AACD;AACF;;;;EApFqCb,U;;SAAnBM,U","sourcesContent":["import {default as LayersPass} from './layers-pass';\nimport {\n  Framebuffer,\n  Texture2D,\n  Renderbuffer,\n  withParameters,\n  cssToDeviceRatio\n} from '@luma.gl/core';\n\nexport default class ShadowPass extends LayersPass {\n  constructor(gl, props) {\n    super(gl, props);\n\n    // The shadowMap texture\n    this.shadowMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.depthBuffer = new Renderbuffer(gl, {\n      format: gl.DEPTH_COMPONENT16,\n      width: 1,\n      height: 1\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'shadowmap',\n      width: 1,\n      height: 1,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.shadowMap,\n        // Depth attachment has to be specified for depth test to work\n        [gl.DEPTH_ATTACHMENT]: this.depthBuffer\n      }\n    });\n  }\n\n  render(params) {\n    const target = this.fbo;\n\n    withParameters(\n      this.gl,\n      {\n        depthRange: [0, 1],\n        depthTest: true,\n        blend: false,\n        clearColor: [1, 1, 1, 1]\n      },\n      () => {\n        const viewport = params.viewports[0];\n        const pixelRatio = cssToDeviceRatio(this.gl);\n        const width = viewport.width * pixelRatio;\n        const height = viewport.height * pixelRatio;\n        if (width !== target.width || height !== target.height) {\n          target.resize({width, height});\n        }\n\n        super.render({...params, target, pass: 'shadow'});\n      }\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.shadowEnabled !== false;\n  }\n\n  getModuleParameters() {\n    return {\n      drawToShadowMap: true\n    };\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.delete();\n      this.fbo = null;\n    }\n\n    if (this.shadowMap) {\n      this.shadowMap.delete();\n      this.shadowMap = null;\n    }\n\n    if (this.depthBuffer) {\n      this.depthBuffer.delete();\n      this.depthBuffer = null;\n    }\n  }\n}\n"],"file":"shadow-pass.js"}