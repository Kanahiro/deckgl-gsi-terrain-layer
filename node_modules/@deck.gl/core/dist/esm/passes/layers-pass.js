import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import Pass from './pass';
import { clear, setParameters, withParameters, cssToDeviceRatio } from '@luma.gl/core';
import log from '../utils/log';

var LayersPass = function (_Pass) {
  _inherits(LayersPass, _Pass);

  var _super = _createSuper(LayersPass);

  function LayersPass() {
    _classCallCheck(this, LayersPass);

    return _super.apply(this, arguments);
  }

  _createClass(LayersPass, [{
    key: "render",
    value: function render(props) {
      var gl = this.gl;
      setParameters(gl, {
        framebuffer: props.target
      });
      return this._drawLayers(props);
    }
  }, {
    key: "_drawLayers",
    value: function _drawLayers(props) {
      var viewports = props.viewports,
          views = props.views,
          onViewportActive = props.onViewportActive,
          _props$clearCanvas = props.clearCanvas,
          clearCanvas = _props$clearCanvas === void 0 ? true : _props$clearCanvas;
      var gl = this.gl;

      if (clearCanvas) {
        clearGLCanvas(gl);
      }

      var renderStats = [];

      var _iterator = _createForOfIteratorHelper(viewports),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var viewportOrDescriptor = _step.value;
          var viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;
          var view = views && views[viewport.id];
          onViewportActive(viewport);

          var drawLayerParams = this._getDrawLayerParams(viewport, props);

          props.view = view;
          var subViewports = viewport.subViewports || [viewport];

          var _iterator2 = _createForOfIteratorHelper(subViewports),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var subViewport = _step2.value;
              props.viewport = subViewport;

              var stats = this._drawLayersInViewport(gl, props, drawLayerParams);

              renderStats.push(stats);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return renderStats;
    }
  }, {
    key: "_getDrawLayerParams",
    value: function _getDrawLayerParams(viewport, _ref) {
      var layers = _ref.layers,
          _ref$pass = _ref.pass,
          pass = _ref$pass === void 0 ? 'unknown' : _ref$pass,
          layerFilter = _ref.layerFilter,
          effects = _ref.effects,
          moduleParameters = _ref.moduleParameters;
      var drawLayerParams = [];
      var indexResolver = layerIndexResolver();

      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {
        var layer = layers[layerIndex];

        var shouldDrawLayer = this._shouldDrawLayer(layer, viewport, pass, layerFilter);

        var layerRenderIndex = indexResolver(layer, shouldDrawLayer);
        var layerParam = {
          shouldDrawLayer: shouldDrawLayer,
          layerRenderIndex: layerRenderIndex
        };

        if (shouldDrawLayer) {
          layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);
          layerParam.layerParameters = this.getLayerParameters(layer, layerIndex);
        }

        drawLayerParams[layerIndex] = layerParam;
      }

      return drawLayerParams;
    }
  }, {
    key: "_drawLayersInViewport",
    value: function _drawLayersInViewport(gl, _ref2, drawLayerParams) {
      var layers = _ref2.layers,
          onError = _ref2.onError,
          viewport = _ref2.viewport,
          view = _ref2.view;
      var glViewport = getGLViewport(gl, {
        viewport: viewport
      });

      if (view && view.props.clear) {
        var clearOpts = view.props.clear === true ? {
          color: true,
          depth: true
        } : view.props.clear;
        withParameters(gl, {
          scissorTest: true,
          scissor: glViewport
        }, function () {
          return clear(gl, clearOpts);
        });
      }

      var renderStatus = {
        totalCount: layers.length,
        visibleCount: 0,
        compositeCount: 0,
        pickableCount: 0
      };
      setParameters(gl, {
        viewport: glViewport
      });

      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {
        var layer = layers[layerIndex];
        var _drawLayerParams$laye = drawLayerParams[layerIndex],
            shouldDrawLayer = _drawLayerParams$laye.shouldDrawLayer,
            layerRenderIndex = _drawLayerParams$laye.layerRenderIndex,
            moduleParameters = _drawLayerParams$laye.moduleParameters,
            layerParameters = _drawLayerParams$laye.layerParameters;

        if (shouldDrawLayer && layer.props.pickable) {
          renderStatus.pickableCount++;
        }

        if (layer.isComposite) {
          renderStatus.compositeCount++;
        } else if (shouldDrawLayer) {
          renderStatus.visibleCount++;
          moduleParameters.viewport = viewport;

          try {
            layer.drawLayer({
              moduleParameters: moduleParameters,
              uniforms: {
                layerIndex: layerRenderIndex
              },
              parameters: layerParameters
            });
          } catch (err) {
            if (onError) {
              onError(err, layer);
            } else {
              log.error("error during drawing of ".concat(layer), err)();
            }
          }
        }
      }

      return renderStatus;
    }
  }, {
    key: "shouldDrawLayer",
    value: function shouldDrawLayer(layer) {
      return true;
    }
  }, {
    key: "getModuleParameters",
    value: function getModuleParameters(layer, effects) {
      return null;
    }
  }, {
    key: "getLayerParameters",
    value: function getLayerParameters(layer, layerIndex) {
      return layer.props.parameters;
    }
  }, {
    key: "_shouldDrawLayer",
    value: function _shouldDrawLayer(layer, viewport, pass, layerFilter) {
      var shouldDrawLayer = this.shouldDrawLayer(layer) && layer.props.visible;

      if (shouldDrawLayer && layerFilter) {
        shouldDrawLayer = layerFilter({
          layer: layer,
          viewport: viewport,
          isPicking: pass.startsWith('picking'),
          renderPass: pass
        });
      }

      if (shouldDrawLayer) {
        layer.activateViewport(viewport);
      }

      return shouldDrawLayer;
    }
  }, {
    key: "_getModuleParameters",
    value: function _getModuleParameters(layer, effects, pass, overrides) {
      var moduleParameters = Object.assign(Object.create(layer.props), {
        autoWrapLongitude: layer.wrapLongitude,
        viewport: layer.context.viewport,
        mousePosition: layer.context.mousePosition,
        pickingActive: 0,
        devicePixelRatio: cssToDeviceRatio(this.gl)
      });

      if (effects) {
        var _iterator3 = _createForOfIteratorHelper(effects),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var effect = _step3.value;
            Object.assign(moduleParameters, effect.getModuleParameters(layer));
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);
    }
  }]);

  return LayersPass;
}(Pass);

export { LayersPass as default };
export function layerIndexResolver() {
  var startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var layerIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var resolvers = {};

  var resolveLayerIndex = function resolveLayerIndex(layer, isDrawn) {
    var indexOverride = layer.props._offset;
    var layerId = layer.id;
    var parentId = layer.parent && layer.parent.id;
    var index;

    if (parentId && !(parentId in layerIndices)) {
      resolveLayerIndex(layer.parent, false);
    }

    if (parentId in resolvers) {
      var resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);
      index = resolver(layer, isDrawn);
      resolvers[layerId] = resolver;
    } else if (Number.isFinite(indexOverride)) {
      index = indexOverride + (layerIndices[parentId] || 0);
      resolvers[layerId] = null;
    } else {
      index = startIndex;
    }

    if (isDrawn && index >= startIndex) {
      startIndex = index + 1;
    }

    layerIndices[layerId] = index;
    return index;
  };

  return resolveLayerIndex;
}

function getGLViewport(gl, _ref3) {
  var viewport = _ref3.viewport;
  var height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;
  var dimensions = viewport;
  var pixelRatio = cssToDeviceRatio(gl);
  return [dimensions.x * pixelRatio, (height - dimensions.y - dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];
}

function clearGLCanvas(gl) {
  var width = gl.drawingBufferWidth;
  var height = gl.drawingBufferHeight;
  setParameters(gl, {
    viewport: [0, 0, width, height]
  });
  gl.clear(16384 | 256);
}
//# sourceMappingURL=layers-pass.js.map