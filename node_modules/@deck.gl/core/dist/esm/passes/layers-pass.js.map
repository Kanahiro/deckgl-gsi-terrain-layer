{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","log","LayersPass","props","gl","framebuffer","target","_drawLayers","viewports","views","onViewportActive","clearCanvas","clearGLCanvas","renderStats","viewportOrDescriptor","viewport","view","id","drawLayerParams","_getDrawLayerParams","subViewports","subViewport","stats","_drawLayersInViewport","push","layers","pass","layerFilter","effects","moduleParameters","indexResolver","layerIndexResolver","layerIndex","length","layer","shouldDrawLayer","_shouldDrawLayer","layerRenderIndex","layerParam","_getModuleParameters","layerParameters","getLayerParameters","onError","glViewport","getGLViewport","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","visibleCount","compositeCount","pickableCount","pickable","isComposite","drawLayer","uniforms","parameters","err","error","visible","isPicking","startsWith","renderPass","activateViewport","overrides","Object","assign","create","autoWrapLongitude","wrapLongitude","context","mousePosition","pickingActive","devicePixelRatio","effect","getModuleParameters","startIndex","layerIndices","resolvers","resolveLayerIndex","isDrawn","indexOverride","_offset","layerId","parentId","parent","index","resolver","Number","isFinite","height","canvas","clientHeight","dimensions","pixelRatio","x","y","width","drawingBufferWidth","drawingBufferHeight"],"mappings":";;;;;;;;;;;;;;;;AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAAQC,KAAR,EAAeC,aAAf,EAA8BC,cAA9B,EAA8CC,gBAA9C,QAAqE,eAArE;AACA,OAAOC,GAAP,MAAgB,cAAhB;;IAEqBC,U;;;;;;;;;;;;;2BACZC,K,EAAO;AACZ,UAAMC,EAAE,GAAG,KAAKA,EAAhB;AAEAN,MAAAA,aAAa,CAACM,EAAD,EAAK;AAACC,QAAAA,WAAW,EAAEF,KAAK,CAACG;AAApB,OAAL,CAAb;AACA,aAAO,KAAKC,WAAL,CAAiBJ,KAAjB,CAAP;AACD;;;gCAIWA,K,EAAO;AAAA,UACVK,SADU,GACgDL,KADhD,CACVK,SADU;AAAA,UACCC,KADD,GACgDN,KADhD,CACCM,KADD;AAAA,UACQC,gBADR,GACgDP,KADhD,CACQO,gBADR;AAAA,+BACgDP,KADhD,CAC0BQ,WAD1B;AAAA,UAC0BA,WAD1B,mCACwC,IADxC;AAGjB,UAAMP,EAAE,GAAG,KAAKA,EAAhB;;AACA,UAAIO,WAAJ,EAAiB;AACfC,QAAAA,aAAa,CAACR,EAAD,CAAb;AACD;;AAED,UAAMS,WAAW,GAAG,EAApB;;AARiB,iDAUkBL,SAVlB;AAAA;;AAAA;AAUjB,4DAA8C;AAAA,cAAnCM,oBAAmC;AAE5C,cAAMC,QAAQ,GAAGD,oBAAoB,CAACC,QAArB,IAAiCD,oBAAlD;AACA,cAAME,IAAI,GAAGP,KAAK,IAAIA,KAAK,CAACM,QAAQ,CAACE,EAAV,CAA3B;AAGAP,UAAAA,gBAAgB,CAACK,QAAD,CAAhB;;AAEA,cAAMG,eAAe,GAAG,KAAKC,mBAAL,CAAyBJ,QAAzB,EAAmCZ,KAAnC,CAAxB;;AAEAA,UAAAA,KAAK,CAACa,IAAN,GAAaA,IAAb;AAGA,cAAMI,YAAY,GAAGL,QAAQ,CAACK,YAAT,IAAyB,CAACL,QAAD,CAA9C;;AAb4C,sDAclBK,YAdkB;AAAA;;AAAA;AAc5C,mEAAwC;AAAA,kBAA7BC,WAA6B;AACtClB,cAAAA,KAAK,CAACY,QAAN,GAAiBM,WAAjB;;AAEA,kBAAMC,KAAK,GAAG,KAAKC,qBAAL,CAA2BnB,EAA3B,EAA+BD,KAA/B,EAAsCe,eAAtC,CAAd;;AACAL,cAAAA,WAAW,CAACW,IAAZ,CAAiBF,KAAjB;AACD;AAnB2C;AAAA;AAAA;AAAA;AAAA;AAoB7C;AA9BgB;AAAA;AAAA;AAAA;AAAA;;AA+BjB,aAAOT,WAAP;AACD;;;wCAMCE,Q,QAEA;AAAA,UADCU,MACD,QADCA,MACD;AAAA,2BADSC,IACT;AAAA,UADSA,IACT,0BADgB,SAChB;AAAA,UAD2BC,WAC3B,QAD2BA,WAC3B;AAAA,UADwCC,OACxC,QADwCA,OACxC;AAAA,UADiDC,gBACjD,QADiDA,gBACjD;AACA,UAAMX,eAAe,GAAG,EAAxB;AACA,UAAMY,aAAa,GAAGC,kBAAkB,EAAxC;;AACA,WAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGP,MAAM,CAACQ,MAA7C,EAAqDD,UAAU,EAA/D,EAAmE;AACjE,YAAME,KAAK,GAAGT,MAAM,CAACO,UAAD,CAApB;;AAEA,YAAMG,eAAe,GAAG,KAAKC,gBAAL,CAAsBF,KAAtB,EAA6BnB,QAA7B,EAAuCW,IAAvC,EAA6CC,WAA7C,CAAxB;;AAKA,YAAMU,gBAAgB,GAAGP,aAAa,CAACI,KAAD,EAAQC,eAAR,CAAtC;AAEA,YAAMG,UAAU,GAAG;AACjBH,UAAAA,eAAe,EAAfA,eADiB;AAEjBE,UAAAA,gBAAgB,EAAhBA;AAFiB,SAAnB;;AAKA,YAAIF,eAAJ,EAAqB;AACnBG,UAAAA,UAAU,CAACT,gBAAX,GAA8B,KAAKU,oBAAL,CAC5BL,KAD4B,EAE5BN,OAF4B,EAG5BF,IAH4B,EAI5BG,gBAJ4B,CAA9B;AAMAS,UAAAA,UAAU,CAACE,eAAX,GAA6B,KAAKC,kBAAL,CAAwBP,KAAxB,EAA+BF,UAA/B,CAA7B;AACD;;AACDd,QAAAA,eAAe,CAACc,UAAD,CAAf,GAA8BM,UAA9B;AACD;;AACD,aAAOpB,eAAP;AACD;;;0CAMqBd,E,SAAuCc,e,EAAiB;AAAA,UAAnDO,MAAmD,SAAnDA,MAAmD;AAAA,UAA3CiB,OAA2C,SAA3CA,OAA2C;AAAA,UAAlC3B,QAAkC,SAAlCA,QAAkC;AAAA,UAAxBC,IAAwB,SAAxBA,IAAwB;AAC5E,UAAM2B,UAAU,GAAGC,aAAa,CAACxC,EAAD,EAAK;AAACW,QAAAA,QAAQ,EAARA;AAAD,OAAL,CAAhC;;AAEA,UAAIC,IAAI,IAAIA,IAAI,CAACb,KAAL,CAAWN,KAAvB,EAA8B;AAC5B,YAAMgD,SAAS,GAAG7B,IAAI,CAACb,KAAL,CAAWN,KAAX,KAAqB,IAArB,GAA4B;AAACiD,UAAAA,KAAK,EAAE,IAAR;AAAcC,UAAAA,KAAK,EAAE;AAArB,SAA5B,GAAyD/B,IAAI,CAACb,KAAL,CAAWN,KAAtF;AACAE,QAAAA,cAAc,CACZK,EADY,EAEZ;AACE4C,UAAAA,WAAW,EAAE,IADf;AAEEC,UAAAA,OAAO,EAAEN;AAFX,SAFY,EAMZ;AAAA,iBAAM9C,KAAK,CAACO,EAAD,EAAKyC,SAAL,CAAX;AAAA,SANY,CAAd;AAQD;;AAGD,UAAMK,YAAY,GAAG;AACnBC,QAAAA,UAAU,EAAE1B,MAAM,CAACQ,MADA;AAEnBmB,QAAAA,YAAY,EAAE,CAFK;AAGnBC,QAAAA,cAAc,EAAE,CAHG;AAInBC,QAAAA,aAAa,EAAE;AAJI,OAArB;AAOAxD,MAAAA,aAAa,CAACM,EAAD,EAAK;AAACW,QAAAA,QAAQ,EAAE4B;AAAX,OAAL,CAAb;;AAGA,WAAK,IAAIX,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGP,MAAM,CAACQ,MAA7C,EAAqDD,UAAU,EAA/D,EAAmE;AACjE,YAAME,KAAK,GAAGT,MAAM,CAACO,UAAD,CAApB;AADiE,oCAO7Dd,eAAe,CAACc,UAAD,CAP8C;AAAA,YAG/DG,eAH+D,yBAG/DA,eAH+D;AAAA,YAI/DE,gBAJ+D,yBAI/DA,gBAJ+D;AAAA,YAK/DR,gBAL+D,yBAK/DA,gBAL+D;AAAA,YAM/DW,eAN+D,yBAM/DA,eAN+D;;AAUjE,YAAIL,eAAe,IAAID,KAAK,CAAC/B,KAAN,CAAYoD,QAAnC,EAA6C;AAC3CL,UAAAA,YAAY,CAACI,aAAb;AACD;;AACD,YAAIpB,KAAK,CAACsB,WAAV,EAAuB;AACrBN,UAAAA,YAAY,CAACG,cAAb;AACD,SAFD,MAEO,IAAIlB,eAAJ,EAAqB;AAE1Be,UAAAA,YAAY,CAACE,YAAb;AAGAvB,UAAAA,gBAAgB,CAACd,QAAjB,GAA4BA,QAA5B;;AAEA,cAAI;AACFmB,YAAAA,KAAK,CAACuB,SAAN,CAAgB;AACd5B,cAAAA,gBAAgB,EAAhBA,gBADc;AAEd6B,cAAAA,QAAQ,EAAE;AAAC1B,gBAAAA,UAAU,EAAEK;AAAb,eAFI;AAGdsB,cAAAA,UAAU,EAAEnB;AAHE,aAAhB;AAKD,WAND,CAME,OAAOoB,GAAP,EAAY;AACZ,gBAAIlB,OAAJ,EAAa;AACXA,cAAAA,OAAO,CAACkB,GAAD,EAAM1B,KAAN,CAAP;AACD,aAFD,MAEO;AACLjC,cAAAA,GAAG,CAAC4D,KAAJ,mCAAqC3B,KAArC,GAA8C0B,GAA9C;AACD;AACF;AACF;AACF;;AAED,aAAOV,YAAP;AACD;;;oCAIehB,K,EAAO;AACrB,aAAO,IAAP;AACD;;;wCAEmBA,K,EAAON,O,EAAS;AAClC,aAAO,IAAP;AACD;;;uCAEkBM,K,EAAOF,U,EAAY;AACpC,aAAOE,KAAK,CAAC/B,KAAN,CAAYwD,UAAnB;AACD;;;qCAGgBzB,K,EAAOnB,Q,EAAUW,I,EAAMC,W,EAAa;AACnD,UAAIQ,eAAe,GAAG,KAAKA,eAAL,CAAqBD,KAArB,KAA+BA,KAAK,CAAC/B,KAAN,CAAY2D,OAAjE;;AAEA,UAAI3B,eAAe,IAAIR,WAAvB,EAAoC;AAClCQ,QAAAA,eAAe,GAAGR,WAAW,CAAC;AAC5BO,UAAAA,KAAK,EAALA,KAD4B;AAE5BnB,UAAAA,QAAQ,EAARA,QAF4B;AAG5BgD,UAAAA,SAAS,EAAErC,IAAI,CAACsC,UAAL,CAAgB,SAAhB,CAHiB;AAI5BC,UAAAA,UAAU,EAAEvC;AAJgB,SAAD,CAA7B;AAMD;;AACD,UAAIS,eAAJ,EAAqB;AAEnBD,QAAAA,KAAK,CAACgC,gBAAN,CAAuBnD,QAAvB;AACD;;AAED,aAAOoB,eAAP;AACD;;;yCAEoBD,K,EAAON,O,EAASF,I,EAAMyC,S,EAAW;AACpD,UAAMtC,gBAAgB,GAAGuC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcpC,KAAK,CAAC/B,KAApB,CAAd,EAA0C;AACjEoE,QAAAA,iBAAiB,EAAErC,KAAK,CAACsC,aADwC;AAEjEzD,QAAAA,QAAQ,EAAEmB,KAAK,CAACuC,OAAN,CAAc1D,QAFyC;AAGjE2D,QAAAA,aAAa,EAAExC,KAAK,CAACuC,OAAN,CAAcC,aAHoC;AAIjEC,QAAAA,aAAa,EAAE,CAJkD;AAKjEC,QAAAA,gBAAgB,EAAE5E,gBAAgB,CAAC,KAAKI,EAAN;AAL+B,OAA1C,CAAzB;;AAQA,UAAIwB,OAAJ,EAAa;AAAA,oDACUA,OADV;AAAA;;AAAA;AACX,iEAA8B;AAAA,gBAAnBiD,MAAmB;AAC5BT,YAAAA,MAAM,CAACC,MAAP,CAAcxC,gBAAd,EAAgCgD,MAAM,CAACC,mBAAP,CAA2B5C,KAA3B,CAAhC;AACD;AAHU;AAAA;AAAA;AAAA;AAAA;AAIZ;;AAED,aAAOkC,MAAM,CAACC,MAAP,CAAcxC,gBAAd,EAAgC,KAAKiD,mBAAL,CAAyB5C,KAAzB,EAAgCN,OAAhC,CAAhC,EAA0EuC,SAA1E,CAAP;AACD;;;;EA3MqCvE,I;;SAAnBM,U;AAoNrB,OAAO,SAAS6B,kBAAT,GAA+D;AAAA,MAAnCgD,UAAmC,uEAAtB,CAAsB;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AACpE,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAChD,KAAD,EAAQiD,OAAR,EAAoB;AAC5C,QAAMC,aAAa,GAAGlD,KAAK,CAAC/B,KAAN,CAAYkF,OAAlC;AACA,QAAMC,OAAO,GAAGpD,KAAK,CAACjB,EAAtB;AACA,QAAMsE,QAAQ,GAAGrD,KAAK,CAACsD,MAAN,IAAgBtD,KAAK,CAACsD,MAAN,CAAavE,EAA9C;AAEA,QAAIwE,KAAJ;;AAEA,QAAIF,QAAQ,IAAI,EAAEA,QAAQ,IAAIP,YAAd,CAAhB,EAA6C;AAE3CE,MAAAA,iBAAiB,CAAChD,KAAK,CAACsD,MAAP,EAAe,KAAf,CAAjB;AACD;;AAED,QAAID,QAAQ,IAAIN,SAAhB,EAA2B;AACzB,UAAMS,QAAQ,GAAIT,SAAS,CAACM,QAAD,CAAT,GAChBN,SAAS,CAACM,QAAD,CAAT,IAAuBxD,kBAAkB,CAACiD,YAAY,CAACO,QAAD,CAAb,EAAyBP,YAAzB,CAD3C;AAEAS,MAAAA,KAAK,GAAGC,QAAQ,CAACxD,KAAD,EAAQiD,OAAR,CAAhB;AACAF,MAAAA,SAAS,CAACK,OAAD,CAAT,GAAqBI,QAArB;AACD,KALD,MAKO,IAAIC,MAAM,CAACC,QAAP,CAAgBR,aAAhB,CAAJ,EAAoC;AACzCK,MAAAA,KAAK,GAAGL,aAAa,IAAIJ,YAAY,CAACO,QAAD,CAAZ,IAA0B,CAA9B,CAArB;AAGAN,MAAAA,SAAS,CAACK,OAAD,CAAT,GAAqB,IAArB;AACD,KALM,MAKA;AACLG,MAAAA,KAAK,GAAGV,UAAR;AACD;;AAED,QAAII,OAAO,IAAIM,KAAK,IAAIV,UAAxB,EAAoC;AAClCA,MAAAA,UAAU,GAAGU,KAAK,GAAG,CAArB;AACD;;AAEDT,IAAAA,YAAY,CAACM,OAAD,CAAZ,GAAwBG,KAAxB;AACA,WAAOA,KAAP;AACD,GAhCD;;AAiCA,SAAOP,iBAAP;AACD;;AAGD,SAAStC,aAAT,CAAuBxC,EAAvB,SAAuC;AAAA,MAAXW,QAAW,SAAXA,QAAW;AAGrC,MAAM8E,MAAM,GAAGzF,EAAE,CAAC0F,MAAH,GAAY1F,EAAE,CAAC0F,MAAH,CAAUC,YAAV,IAA0B3F,EAAE,CAAC0F,MAAH,CAAUD,MAAhD,GAAyD,GAAxE;AAEA,MAAMG,UAAU,GAAGjF,QAAnB;AACA,MAAMkF,UAAU,GAAGjG,gBAAgB,CAACI,EAAD,CAAnC;AACA,SAAO,CACL4F,UAAU,CAACE,CAAX,GAAeD,UADV,EAEL,CAACJ,MAAM,GAAGG,UAAU,CAACG,CAApB,GAAwBH,UAAU,CAACH,MAApC,IAA8CI,UAFzC,EAGLD,UAAU,CAACI,KAAX,GAAmBH,UAHd,EAILD,UAAU,CAACH,MAAX,GAAoBI,UAJf,CAAP;AAMD;;AAED,SAASrF,aAAT,CAAuBR,EAAvB,EAA2B;AACzB,MAAMgG,KAAK,GAAGhG,EAAE,CAACiG,kBAAjB;AACA,MAAMR,MAAM,GAAGzF,EAAE,CAACkG,mBAAlB;AAEAxG,EAAAA,aAAa,CAACM,EAAD,EAAK;AAACW,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOqF,KAAP,EAAcP,MAAd;AAAX,GAAL,CAAb;AACAzF,EAAAA,EAAE,CAACP,KAAH,CAAS,WAAT;AACD","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\nimport log from '../utils/log';\n\nexport default class LayersPass extends Pass {\n  render(props) {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: props.target});\n    return this._drawLayers(props);\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  _drawLayers(props) {\n    const {viewports, views, onViewportActive, clearCanvas = true} = props;\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    for (const viewportOrDescriptor of viewports) {\n      // Get a viewport from a viewport descriptor (which can be a plain viewport)\n      const viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, props);\n\n      props.view = view;\n\n      // render this viewport\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        props.viewport = subViewport;\n\n        const stats = this._drawLayersInViewport(gl, props, drawLayerParams);\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // Resolve the parameters needed to draw each layer\n  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n  // this is only done once for the parent viewport\n  _getDrawLayerParams(\n    viewport,\n    {layers, pass = 'unknown', layerFilter, effects, moduleParameters}\n  ) {\n    const drawLayerParams = [];\n    const indexResolver = layerIndexResolver();\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(layer, viewport, pass, layerFilter);\n\n      // This is the \"logical\" index for ordering this layer in the stack\n      // used to calculate polygon offsets\n      // It can be the same as another layer\n      const layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n      const layerParam = {\n        shouldDrawLayer,\n        layerRenderIndex\n      };\n\n      if (shouldDrawLayer) {\n        layerParam.moduleParameters = this._getModuleParameters(\n          layer,\n          effects,\n          pass,\n          moduleParameters\n        );\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex);\n      }\n      drawLayerParams[layerIndex] = layerParam;\n    }\n    return drawLayerParams;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  _drawLayersInViewport(gl, {layers, onError, viewport, view}, drawLayerParams) {\n    const glViewport = getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {\n        shouldDrawLayer,\n        layerRenderIndex,\n        moduleParameters,\n        layerParameters\n      } = drawLayerParams[layerIndex];\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        // Draw the layer\n        renderStatus.visibleCount++;\n\n        // overwrite layer.context.viewport with the sub viewport\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer.drawLayer({\n            moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          if (onError) {\n            onError(err, layer);\n          } else {\n            log.error(`error during drawing of ${layer}`, err)();\n          }\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  shouldDrawLayer(layer) {\n    return true;\n  }\n\n  getModuleParameters(layer, effects) {\n    return null;\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  _shouldDrawLayer(layer, viewport, pass, layerFilter) {\n    let shouldDrawLayer = this.shouldDrawLayer(layer) && layer.props.visible;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({\n        layer,\n        viewport,\n        isPicking: pass.startsWith('picking'),\n        renderPass: pass\n      });\n    }\n    if (shouldDrawLayer) {\n      // If a layer is drawn, update its viewportChanged flag\n      layer.activateViewport(viewport);\n    }\n\n    return shouldDrawLayer;\n  }\n\n  _getModuleParameters(layer, effects, pass, overrides) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      autoWrapLongitude: layer.wrapLongitude,\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(startIndex = 0, layerIndices = {}) {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      // Populate layerIndices with the parent layer's index\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(gl, {viewport}) {\n  // TODO - dummy default for node\n  // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n  const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  const pixelRatio = cssToDeviceRatio(gl);\n  return [\n    dimensions.x * pixelRatio,\n    (height - dimensions.y - dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"],"file":"layers-pass.js"}