{"version":3,"sources":["../../../src/debug/loggers.js"],"names":["logState","attributeUpdateMessages","LOG_LEVEL_MAJOR_UPDATE","LOG_LEVEL_MINOR_UPDATE","LOG_LEVEL_UPDATE_DETAIL","LOG_LEVEL_INFO","LOG_LEVEL_DRAW","getLoggers","log","layer","key","flags","id","needsUpdate","getChangeFlags","Object","keys","filter","join","changed","updated","subLayers","layerManager","layers","length","viewport","attributeManager","trigger","attributeNames","attributeManagerUpdateStart","Date","now","numInstances","timeMs","Math","round","groupCollapsed","updateMessage","groupEnd","attribute","attributeUpdateStart","message","push","deckRenderer","renderStats","opts","pass","redrawReason","stats","status","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","renderCount","get","add"],"mappings":"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","sourcesContent":["const logState = {\n  attributeUpdateMessages: []\n};\n\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\n\nexport const getLoggers = log => ({\n  /* Layer events */\n\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Updating ${layer} because: ${Object.keys(flags)\n          .filter(key => flags[key])\n          .join(', ')}`\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n\n  /* CompositeLayer events */\n\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Composite layer rendered new subLayers ${layer}`,\n        subLayers\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n\n  /* LayerManager events */\n\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n\n  /* AttributeManager events */\n\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(\n      LOG_LEVEL_MAJOR_UPDATE,\n      attributeNames\n        ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n        : `invalidated all attributes for ${attributeManager.id}`\n    )();\n  },\n\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(\n      LOG_LEVEL_MINOR_UPDATE,\n      `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`\n    )();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n\n  /* Attribute events */\n\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n\n  /* Render events */\n\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {pass, redrawReason, stats} = opts;\n    for (const status of renderStats) {\n      const {totalCount, visibleCount, compositeCount, pickableCount} = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n\n      log.log(\n        LOG_LEVEL_DRAW,\n        `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`\n      )();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});\n"],"file":"loggers.js"}