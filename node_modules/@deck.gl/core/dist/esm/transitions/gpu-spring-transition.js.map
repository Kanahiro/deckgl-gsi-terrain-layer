{"version":3,"sources":["../../../src/transitions/gpu-spring-transition.js"],"names":["Buffer","Transform","Framebuffer","Texture2D","readPixelsToArray","padBuffer","getAttributeTypeFromSize","getSourceBufferAttribute","getAttributeBufferLength","cycleBuffers","Attribute","Transition","GPUSpringTransition","gl","attribute","timeline","type","transition","attributeInTransition","Object","assign","settings","normalized","currentStartIndices","startIndices","currentLength","texture","getTexture","framebuffer","getFramebuffer","transform","getTransform","bufferOpts","byteLength","usage","buffers","transitionSettings","numInstances","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","update","value","start","elementCount","Math","floor","size","sourceBuffers","aTo","updated","aPrev","aCur","feedbackBuffers","vNext","run","discard","clearRenderTarget","uniforms","stiffness","damping","parameters","depthTest","blend","viewport","blendFunc","blendEquation","isTransitioning","end","cancel","length","pop","inProgress","attributeType","vs","fs","defines","ATTRIBUTE_TYPE","varyings","data","Uint8Array","format","border","mipmaps","dataFormat","width","height","id","attachments"],"mappings":"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","sourcesContent":["/* eslint-disable complexity, max-statements, max-params */\nimport GL from '@luma.gl/constants';\nimport {Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray} from '@luma.gl/core';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers\n} from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\n\nexport default class GPUSpringTransition {\n  constructor({gl, attribute, timeline}) {\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(\n      gl,\n      Object.assign({}, attribute.settings, {normalized: false})\n    );\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // previous\n      new Buffer(gl, bufferOpts), // current\n      new Buffer(gl, bufferOpts) // next\n    ];\n  }\n\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings, numInstances) {\n    const {gl, buffers, attribute} = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value\n    });\n\n    // when an attribute changes values, a new transition is started. These\n    // are properties that we have to store on this.transition but can change\n    // when new transitions are started, so we have to keep them up-to-date.\n    // this.transition.start() takes the latest settings and updates them.\n    this.transition.start(transitionSettings);\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {buffers, transform, framebuffer, transition} = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: transition.settings.stiffness,\n        damping: transition.settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: [GL.MAX, GL.MAX]\n      }\n    });\n\n    cycleBuffers(buffers);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: this.attribute.value\n    });\n\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    while (this.buffers.length) {\n      this.buffers.pop().delete();\n    }\n    this.texture.delete();\n    this.texture = null;\n    this.framebuffer.delete();\n    this.framebuffer = null;\n  }\n}\n\nfunction getTransform(gl, attribute, framebuffer) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: `\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`,\n    fs: `\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}`,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: GL.RGBA,\n    type: GL.UNSIGNED_BYTE,\n    border: 0,\n    mipmaps: false,\n    dataFormat: GL.RGBA,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n}\n"],"file":"gpu-spring-transition.js"}