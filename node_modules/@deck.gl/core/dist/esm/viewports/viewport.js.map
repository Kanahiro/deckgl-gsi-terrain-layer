{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["log","createMat4","extractCameraVectors","getFrustumPlanes","Matrix4","Vector3","equals","mat4","getDistanceScales","getMeterZoom","lngLatToWorld","worldToLngLat","worldToPixels","pixelsToWorld","PROJECTION_MODE","DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_ZOOM","DEFAULT_DISTANCE_SCALES","unitsPerMeter","metersPerUnit","Viewport","opts","id","x","y","width","height","constructor","displayName","_frustumPlanes","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","viewport","scale","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","length","targetZ","z","targetZWorld","distanceScales","pixelUnprojectionMatrix","X","Y","Z","Number","isFinite","isGeospatial","options","unprojectOption","topRight","bottomLeft","bottomRight","min","max","coordinateOrigin","longitude","latitude","highPrecision","near","projectionProps","far","fovyRadians","aspect","Object","assign","position","cameraPosition","direction","cameraDirection","up","cameraUp","right","cameraRight","orthographic","focalDistance","fovy","perspective","zoom","modelMatrix","log2","pow","meterOffset","transformVector","center","_getCenterInWorld","viewMatrixUncentered","multiplyRight","translate","negate","commonPosition","add","_createProjectionMatrix","vpm","multiply","viewProjectionMatrix","viewMatrixInverse","invert","eye","viewportMatrix","warn","WEB_MERCATOR","WEB_MERCATOR_AUTO_OFFSET"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors, getFrustumPlanes} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from '@math.gl/web-mercator';\n\nimport {PROJECTION_MODE} from '../lib/constants';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12\n        ? PROJECTION_MODE.WEB_MERCATOR\n        : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n    if (this === viewport) {\n      return true;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz);\n    }\n    return xyz;\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz;\n  }\n\n  getBounds(options = {}) {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n\n    return [\n      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n    ];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    const {near, far, fovyRadians, aspect} = this.projectionProps;\n\n    Object.assign(\n      this._frustumPlanes,\n      getFrustumPlanes({\n        aspect,\n        near,\n        far,\n        fovyRadians,\n        position: this.cameraPosition,\n        direction: this.cameraDirection,\n        up: this.cameraUp,\n        right: this.cameraRight\n      })\n    );\n\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n    this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n    }\n    this.viewMatrixUncentered = viewMatrix;\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center = new Vector3(this.projectPosition([longitude, latitude, 0]));\n\n    if (meterOffset) {\n      const commonPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.unitsPerMeter);\n      center.add(commonPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1\n    } = opts;\n\n    this.projectionProps = {\n      orthographic,\n      fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n      aspect: this.width / this.height,\n      focalDistance,\n      near,\n      far\n    };\n\n    this.projectionMatrix = projectionMatrix || this._createProjectionMatrix(this.projectionProps);\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up, right} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n    this.cameraRight = right;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}