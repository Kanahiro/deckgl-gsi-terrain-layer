{"version":3,"sources":["../../../src/transitions/gpu-interpolation-transition.js"],"names":["GPUInterpolationTransition","gl","attribute","timeline","type","transition","Transition","attributeInTransition","Attribute","settings","currentStartIndices","startIndices","currentLength","transform","getTransform","bufferOpts","byteLength","usage","buffers","Buffer","transitionSettings","numInstances","duration","cancel","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","update","value","start","elementCount","Math","floor","size","sourceBuffers","aFrom","aTo","feedbackBuffers","vCurrent","updated","time","easing","t","run","uniforms","length","pop","inProgress","vs","attributeType","Transform","defines","ATTRIBUTE_TYPE","varyings"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAOA;;;;;;;;;;;;IAEqBA,0B;AACnB,4CAAuC;AAAA,QAA1BC,EAA0B,QAA1BA,EAA0B;AAAA,QAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,QAAXC,QAAW,QAAXA,QAAW;AAAA;AACrC,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKG,IAAL,GAAY,eAAZ;AACA,SAAKC,UAAL,GAAkB,IAAIC,sBAAJ,CAAeH,QAAf,CAAlB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AAKA,SAAKK,qBAAL,GAA6B,IAAIC,qBAAJ,CAAcP,EAAd,EAAkBC,SAAS,CAACO,QAA5B,CAA7B;AACA,SAAKC,mBAAL,GAA2BR,SAAS,CAACS,YAArC;AAIA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,SAAL,GAAiBC,YAAY,CAACb,EAAD,EAAKC,SAAL,CAA7B;AACA,QAAMa,UAAU,GAAG;AACjBC,MAAAA,UAAU,EAAE,CADK;AAEjBC,MAAAA,KAAK;AAFY,KAAnB;AAIA,SAAKC,OAAL,GAAe,CACb,IAAIC,YAAJ,CAAWlB,EAAX,EAAec,UAAf,CADa,EAEb,IAAII,YAAJ,CAAWlB,EAAX,EAAec,UAAf,CAFa,CAAf;AAID;;;;0BAWKK,kB,EAAoBC,Y,EAAc;AACtC,UAAID,kBAAkB,CAACE,QAAnB,IAA+B,CAAnC,EAAsC;AACpC,aAAKjB,UAAL,CAAgBkB,MAAhB;AACA;AACD;;AAJqC,UAM/BtB,EAN+B,GAML,IANK,CAM/BA,EAN+B;AAAA,UAM3BiB,OAN2B,GAML,IANK,CAM3BA,OAN2B;AAAA,UAMlBhB,SANkB,GAML,IANK,CAMlBA,SANkB;AAUtC,kDAAagB,OAAb;AAEA,UAAMM,aAAa,GAAG;AACpBH,QAAAA,YAAY,EAAZA,YADoB;AAEpBnB,QAAAA,SAAS,EAATA,SAFoB;AAGpBuB,QAAAA,UAAU,EAAE,KAAKb,aAHG;AAIpBc,QAAAA,gBAAgB,EAAE,KAAKhB,mBAJH;AAKpBiB,QAAAA,OAAO,EAAEP,kBAAkB,CAACQ;AALR,OAAtB;;AAZsC,iDAoBjBV,OApBiB;AAAA;;AAAA;AAoBtC,4DAA8B;AAAA,cAAnBW,MAAmB;AAC5B;AAAWA,YAAAA,MAAM,EAANA;AAAX,aAAsBL,aAAtB;AACD;AAtBqC;AAAA;AAAA;AAAA;AAAA;;AAwBtC,WAAKd,mBAAL,GAA2BR,SAAS,CAACS,YAArC;AACA,WAAKC,aAAL,GAAqB,wDAAyBV,SAAzB,EAAoCmB,YAApC,CAArB;AACA,WAAKd,qBAAL,CAA2BuB,MAA3B,CAAkC;AAChCD,QAAAA,MAAM,EAAEX,OAAO,CAAC,CAAD,CADiB;AAIhCa,QAAAA,KAAK,EAAE7B,SAAS,CAAC6B;AAJe,OAAlC;AAOA,WAAK1B,UAAL,CAAgB2B,KAAhB,CAAsBZ,kBAAtB;AAEA,WAAKP,SAAL,CAAeiB,MAAf,CAAsB;AACpBG,QAAAA,YAAY,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKvB,aAAL,GAAqBV,SAAS,CAACkC,IAA1C,CADM;AAEpBC,QAAAA,aAAa,EAAE;AACbC,UAAAA,KAAK,EAAEpB,OAAO,CAAC,CAAD,CADD;AAEbqB,UAAAA,GAAG,EAAE,wDAAyBtC,EAAzB,EAA6BC,SAA7B;AAFQ,SAFK;AAMpBsC,QAAAA,eAAe,EAAE;AACfC,UAAAA,QAAQ,EAAEvB,OAAO,CAAC,CAAD;AADF;AANG,OAAtB;AAUD;;;6BAEQ;AACP,UAAMwB,OAAO,GAAG,KAAKrC,UAAL,CAAgByB,MAAhB,EAAhB;;AACA,UAAIY,OAAJ,EAAa;AAAA,+BAIP,KAAKrC,UAJE;AAAA,YAETsC,IAFS,oBAETA,IAFS;AAAA,qDAGTlC,QAHS;AAAA,YAGEa,QAHF,yBAGEA,QAHF;AAAA,YAGYsB,MAHZ,yBAGYA,MAHZ;AAKX,YAAMC,CAAC,GAAGD,MAAM,CAACD,IAAI,GAAGrB,QAAR,CAAhB;AACA,aAAKT,SAAL,CAAeiC,GAAf,CAAmB;AACjBC,UAAAA,QAAQ,EAAE;AAACJ,YAAAA,IAAI,EAAEE;AAAP;AADO,SAAnB;AAGD;;AACD,aAAOH,OAAP;AACD;;;6BAEQ;AACP,WAAKrC,UAAL,CAAgBkB,MAAhB;AACA,WAAKV,SAAL;;AACA,aAAO,KAAKK,OAAL,CAAa8B,MAApB,EAA4B;AAC1B,aAAK9B,OAAL,CAAa+B,GAAb;AACD;AACF;;;wBA7EgB;AACf,aAAO,KAAK5C,UAAL,CAAgB6C,UAAvB;AACD;;;;;;AA8EH,IAAMC,EAAE,qRAAR;;AAcA,SAASrC,YAAT,CAAsBb,EAAtB,EAA0BC,SAA1B,EAAqC;AACnC,MAAMkD,aAAa,GAAG,wDAAyBlD,SAAS,CAACkC,IAAnC,CAAtB;AACA,SAAO,IAAIiB,eAAJ,CAAcpD,EAAd,EAAkB;AACvBkD,IAAAA,EAAE,EAAFA,EADuB;AAEvBG,IAAAA,OAAO,EAAE;AACPC,MAAAA,cAAc,EAAEH;AADT,KAFc;AAKvBI,IAAAA,QAAQ,EAAE,CAAC,UAAD;AALa,GAAlB,CAAP;AAOD","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer, Transform} from '@luma.gl/core';\nimport Attribute from '../lib/attribute/attribute';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers\n} from '../lib/attribute/attribute-transition-utils';\nimport Transition from './transition';\n\nexport default class GPUInterpolationTransition {\n  constructor({gl, attribute, timeline}) {\n    this.gl = gl;\n    this.type = 'interpolation';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(gl, attribute.settings);\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.transform = getTransform(gl, attribute);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // from\n      new Buffer(gl, bufferOpts) // current\n    ];\n  }\n\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings, numInstances) {\n    if (transitionSettings.duration <= 0) {\n      this.transition.cancel();\n      return;\n    }\n\n    const {gl, buffers, attribute} = this;\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the current buffer.\n    cycleBuffers(buffers);\n\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value\n    });\n\n    this.transition.start(transitionSettings);\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aFrom: buffers[0],\n        aTo: getSourceBufferAttribute(gl, attribute)\n      },\n      feedbackBuffers: {\n        vCurrent: buffers[1]\n      }\n    });\n  }\n\n  update() {\n    const updated = this.transition.update();\n    if (updated) {\n      const {\n        time,\n        settings: {duration, easing}\n      } = this.transition;\n      const t = easing(time / duration);\n      this.transform.run({\n        uniforms: {time: t}\n      });\n    }\n    return updated;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    while (this.buffers.length) {\n      this.buffers.pop().delete();\n    }\n  }\n}\n\nconst vs = `\n#define SHADER_NAME interpolation-transition-vertex-shader\n\nuniform float time;\nattribute ATTRIBUTE_TYPE aFrom;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vCurrent;\n\nvoid main(void) {\n  vCurrent = mix(aFrom, aTo, time);\n  gl_Position = vec4(0.0);\n}\n`;\n\nfunction getTransform(gl, attribute) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    vs,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vCurrent']\n  });\n}\n"],"file":"gpu-interpolation-transition.js"}