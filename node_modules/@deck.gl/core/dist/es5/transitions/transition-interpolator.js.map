{"version":3,"sources":["../../../src/transitions/transition-interpolator.js"],"names":["TransitionInterpolator","opts","Array","isArray","compare","extract","required","_propsToCompare","_propsToExtract","_requiredProps","currentProps","nextProps","Object","keys","key","startProps","endProps","result","startViewStateProps","endViewStateProps","start","end","_checkRequiredProps","t","transitionDuration","props","forEach","propName","value","Number","isFinite"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;;;;;;;IAEqBA,sB;AAQnB,oCAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;;AACrB,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvBA,MAAAA,IAAI,GAAG;AACLG,QAAAA,OAAO,EAAEH,IADJ;AAELI,QAAAA,OAAO,EAAEJ,IAFJ;AAGLK,QAAAA,QAAQ,EAAEL;AAHL,OAAP;AAKD;;AAPoB,gBAQgBA,IARhB;AAAA,QAQdG,OARc,SAQdA,OARc;AAAA,QAQLC,OARK,SAQLA,OARK;AAAA,QAQIC,QARJ,SAQIA,QARJ;AAUrB,SAAKC,eAAL,GAAuBH,OAAvB;AACA,SAAKI,eAAL,GAAuBH,OAAvB;AACA,SAAKI,cAAL,GAAsBH,QAAtB;AACD;;;;kCAQaI,Y,EAAcC,S,EAAW;AAAA,iDACnB,KAAKJ,eAAL,IAAwBK,MAAM,CAACC,IAAP,CAAYF,SAAZ,CADL;AAAA;;AAAA;AACrC,4DAAkE;AAAA,cAAvDG,GAAuD;;AAChE,cACE,EAAEA,GAAG,IAAIJ,YAAT,KACA,EAAEI,GAAG,IAAIH,SAAT,CADA,IAEA,CAAC,kBAAOD,YAAY,CAACI,GAAD,CAAnB,EAA0BH,SAAS,CAACG,GAAD,CAAnC,CAHH,EAIE;AACA,mBAAO,KAAP;AACD;AACF;AAToC;AAAA;AAAA;AAAA;AAAA;;AAUrC,aAAO,IAAP;AACD;;;oCASeC,U,EAAYC,Q,EAAU;AACpC,UAAIC,MAAJ;;AAEA,UAAI,KAAKT,eAAT,EAA0B;AACxB,YAAMU,mBAAmB,GAAG,EAA5B;AACA,YAAMC,iBAAiB,GAAG,EAA1B;;AAFwB,oDAIN,KAAKX,eAJC;AAAA;;AAAA;AAIxB,iEAAwC;AAAA,gBAA7BM,GAA6B;AACtCI,YAAAA,mBAAmB,CAACJ,GAAD,CAAnB,GAA2BC,UAAU,CAACD,GAAD,CAArC;AACAK,YAAAA,iBAAiB,CAACL,GAAD,CAAjB,GAAyBE,QAAQ,CAACF,GAAD,CAAjC;AACD;AAPuB;AAAA;AAAA;AAAA;AAAA;;AAQxBG,QAAAA,MAAM,GAAG;AAACG,UAAAA,KAAK,EAAEF,mBAAR;AAA6BG,UAAAA,GAAG,EAAEF;AAAlC,SAAT;AACD,OATD,MASO;AACLF,QAAAA,MAAM,GAAG;AAACG,UAAAA,KAAK,EAAEL,UAAR;AAAoBM,UAAAA,GAAG,EAAEL;AAAzB,SAAT;AACD;;AAED,WAAKM,mBAAL,CAAyBL,MAAM,CAACG,KAAhC;;AACA,WAAKE,mBAAL,CAAyBL,MAAM,CAACI,GAAhC;;AAEA,aAAOJ,MAAP;AACD;;;qCASgBF,U,EAAYC,Q,EAAUO,C,EAAG;AACxC,aAAOP,QAAP;AACD;;;gCAQWD,U,EAAYC,Q,EAAU;AAChC,aAAOA,QAAQ,CAACQ,kBAAhB;AACD;;;wCAEmBC,K,EAAO;AACzB,UAAI,CAAC,KAAKhB,cAAV,EAA0B;AACxB;AACD;;AAED,WAAKA,cAAL,CAAoBiB,OAApB,CAA4B,UAAAC,QAAQ,EAAI;AACtC,YAAMC,KAAK,GAAGH,KAAK,CAACE,QAAD,CAAnB;AACA,gCACEE,MAAM,CAACC,QAAP,CAAgBF,KAAhB,KAA0B1B,KAAK,CAACC,OAAN,CAAcyB,KAAd,CAD5B,YAEKD,QAFL;AAID,OAND;AAOD","sourcesContent":["import {equals} from 'math.gl';\nimport assert from '../utils/assert';\n\nexport default class TransitionInterpolator {\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts = {}) {\n    if (Array.isArray(opts)) {\n      opts = {\n        compare: opts,\n        extract: opts,\n        required: opts\n      };\n    }\n    const {compare, extract, required} = opts;\n\n    this._propsToCompare = compare;\n    this._propsToExtract = extract;\n    this._requiredProps = required;\n  }\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps, nextProps) {\n    for (const key of this._propsToCompare || Object.keys(nextProps)) {\n      if (\n        !(key in currentProps) ||\n        !(key in nextProps) ||\n        !equals(currentProps[key], nextProps[key])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(startProps, endProps) {\n    let result;\n\n    if (this._propsToExtract) {\n      const startViewStateProps = {};\n      const endViewStateProps = {};\n\n      for (const key of this._propsToExtract) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n      result = {start: startViewStateProps, end: endViewStateProps};\n    } else {\n      result = {start: startProps, end: endProps};\n    }\n\n    this._checkRequiredProps(result.start);\n    this._checkRequiredProps(result.end);\n\n    return result;\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  interpolateProps(startProps, endProps, t) {\n    return endProps;\n  }\n\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps, endProps) {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(\n        Number.isFinite(value) || Array.isArray(value),\n        `${propName} is required for transition`\n      );\n    });\n  }\n}\n"],"file":"transition-interpolator.js"}