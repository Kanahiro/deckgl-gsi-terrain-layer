{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","NO_TRANSITION_PROPS","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_interactiveState","_viewportProps","pos","_getUpdatedState","_unproject","startPos","_calculateNewLngLat","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","scale","_calculateNewZoom","zoomedViewport","getMapCenterByLngLatPosition","lngLat","_zoomFromCenter","_panFromCenter","viewState","fromProps","getViewportProps","props","Object","assign","Math","abs","offset","pan","newProps","constructor","viewport","unproject","log2","ViewState","MapController","invertPan","event","dragRotate","deltaX","deltaY","getCenter","centerY","startY","controllerState","min","max","newControllerState","rotate","updateViewport","isDragging","isRotating","Controller"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    return this._panFromCenter([100, 0]);\n  }\n\n  moveRight() {\n    return this._panFromCenter([-100, 0]);\n  }\n\n  moveUp() {\n    return this._panFromCenter([0, 100]);\n  }\n\n  moveDown() {\n    return this._panFromCenter([0, -100]);\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._interactiveState,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    super(MapState, props);\n    this.invertPan = true;\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n  }\n}\n"],"file":"map-controller.js"}