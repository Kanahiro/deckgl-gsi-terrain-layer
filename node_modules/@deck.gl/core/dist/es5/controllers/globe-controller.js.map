{"version":3,"sources":["../../../src/controllers/globe-controller.js"],"names":["LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","GlobeState","props","maxZoom","minZoom","zoom","longitude","latitude","MapState","GlobeController","invertPan","dragRotate","touchRotate","Controller"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,uBAAuB,GAAG;AAC9BC,EAAAA,kBAAkB,EAAE,GADU;AAE9BC,EAAAA,gBAAgB,EAAE,0BAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAFW;AAG9BC,EAAAA,sBAAsB,EAAE,IAAIC,8BAAJ,CAAuB,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,CAAvB,CAHM;AAI9BC,EAAAA,sBAAsB,EAAEC,qCAAkBC;AAJZ,CAAhC;;IAOMC,U;;;;;;;;;;;;sCAEcC,K,EAAO;AAAA,UAEhBC,OAFgB,GAEUD,KAFV,CAEhBC,OAFgB;AAAA,UAEPC,OAFO,GAEUF,KAFV,CAEPE,OAFO;AAAA,UAEEC,IAFF,GAEUH,KAFV,CAEEG,IAFF;AAGvBH,MAAAA,KAAK,CAACG,IAAN,GAAa,iBAAMA,IAAN,EAAYD,OAAZ,EAAqBD,OAArB,CAAb;AAHuB,UAKhBG,SALgB,GAKOJ,KALP,CAKhBI,SALgB;AAAA,UAKLC,QALK,GAKOL,KALP,CAKLK,QALK;;AAMvB,UAAID,SAAS,GAAG,CAAC,GAAb,IAAoBA,SAAS,GAAG,GAApC,EAAyC;AACvCJ,QAAAA,KAAK,CAACI,SAAN,GAAkB,oBAAIA,SAAS,GAAG,GAAhB,EAAqB,GAArB,IAA4B,GAA9C;AACD;;AACDJ,MAAAA,KAAK,CAACK,QAAN,GAAiB,iBAAMA,QAAN,EAAgB,CAAC,EAAjB,EAAqB,EAArB,CAAjB;AAEA,aAAOL,KAAP;AACD;;;EAdsBM,uB;;IAiBJC,e;;;;;AACnB,2BAAYP,KAAZ,EAAmB;AAAA;;AAAA;AACjB,+BAAMD,UAAN,EAAkBC,KAAlB;AACA,UAAKQ,SAAL,GAAiB,IAAjB;AAFiB;AAGlB;;;;6BAEQR,K,EAAO;AACd,sHAAeA,KAAf;AAGA,WAAKS,UAAL,GAAkB,KAAlB;AACA,WAAKC,WAAL,GAAmB,KAAnB;AACD;;;0CAEqB;AAEpB,aAAOpB,uBAAP;AACD;;;EAjB0CqB,sB","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\n\nimport {MapState} from './map-controller';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['longitude', 'latitude', 'zoom']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    const {longitude, latitude} = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -89, 89);\n\n    return props;\n  }\n}\n\nexport default class GlobeController extends Controller {\n  constructor(props) {\n    super(GlobeState, props);\n    this.invertPan = true;\n  }\n\n  setProps(props) {\n    super.setProps(props);\n\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"globe-controller.js"}