{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","TransitionManager","_events","_state","isDragging","_customEvents","onViewStateChange","onStateChange","invertPan","handleEvent","bind","setProps","eventName","off","finalize","event","makeViewport","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","x","y","offsetCenter","pos","width","height","handled","inside","stopPropagation","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","toggleEvents","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","newControllerState","extraProps","interactionState","viewState","Object","assign","getViewportProps","changed","oldViewState","getInteractiveState","getCenter","isPointInBounds","panStart","rotateStart","updateViewport","alternateMode","isFunctionKeyPressed","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","isPanning","isRotating","pan","deltaX","deltaY","deltaScaleX","deltaScaleY","rotate","preventDefault","delta","scale","Math","exp","abs","zoom","isZooming","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","_getTransitionProps","funcKey","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","customEvents"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(this._state, newControllerState.getInteractiveState(), interactionState);\n\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps(), {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown();\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}