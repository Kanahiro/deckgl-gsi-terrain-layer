{"version":3,"sources":["../../../src/viewports/globe-viewport.js"],"names":["DEGREES_TO_RADIANS","Math","PI","RADIANS_TO_DEGREES","EARTH_RADIUS","GLOBE_RADIUS","getDistanceScales","unitsPerMeter","unitsPerDegree","unitsPerMeter2","metersPerUnit","unitsPerDegree2","degreesPerUnit","GlobeViewport","opts","latitude","longitude","zoom","nearZMultiplier","farZMultiplier","resolution","width","height","altitude","max","viewMatrix","Matrix4","lookAt","eye","up","scale","pow","rotateX","rotateZ","halfFov","atan","relativeScale","viewportOpts","Object","assign","fovyRadians","aspect","focalDistance","near","far","min","distanceScales","options","unprojectOption","targetZ","z","left","unproject","top","right","bottom","xyz","topLeft","x","y","y2","pixelUnprojectionMatrix","coord","Number","isFinite","transformVector","coord0","coord1","lt","lSqr","vec3","sqrLen","sub","l0Sqr","l1Sqr","sSqr","dSqr","r0","sqrt","dr","t","lerp","unprojectPosition","X","Y","Z","lng","lat","lambda","phi","cosPhi","cos","D","sin","len","asin","atan2","lngLat","pos","fromPosition","PROJECTION_MODE","GLOBE","Viewport","matrix","vector","result","vec4","transformMat4"],"mappings":"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","sourcesContent":["import {Matrix4} from 'math.gl';\nimport Viewport from './viewport';\nimport {PROJECTION_MODE} from '../lib/constants';\n\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\nconst EARTH_RADIUS = 6370972;\nconst GLOBE_RADIUS = 256;\n\nfunction getDistanceScales() {\n  const unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;\n  const unitsPerDegree = (Math.PI / 180) * GLOBE_RADIUS;\n\n  return {\n    unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],\n    unitsPerMeter2: [0, 0, 0],\n    metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],\n    unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],\n    unitsPerDegree2: [0, 0, 0],\n    degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]\n  };\n}\n\nexport default class GlobeViewport extends Viewport {\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 2,\n      resolution = 10\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n\n    width = width || 1;\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n\n    // Calculate view matrix\n    const viewMatrix = new Matrix4().lookAt({eye: [0, -altitude, 0], up: [0, 0, 1]});\n    const scale = Math.pow(2, zoom);\n    viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);\n    viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);\n    viewMatrix.scale(scale / height);\n\n    const halfFov = Math.atan(0.5 / altitude);\n    const relativeScale = (GLOBE_RADIUS * 2 * scale) / height;\n\n    const viewportOpts = Object.assign({}, opts, {\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      fovyRadians: halfFov * 2,\n      aspect: width / height,\n      focalDistance: altitude,\n      near: nearZMultiplier,\n      far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier\n    });\n\n    super(viewportOpts);\n\n    this.resolution = resolution;\n    this.distanceScales = getDistanceScales();\n  }\n\n  get projectionMode() {\n    return PROJECTION_MODE.GLOBE;\n  }\n\n  getDistanceScales() {\n    return this.distanceScales;\n  }\n\n  getBounds(options = {}) {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const left = this.unproject([0, this.height / 2], unprojectOption);\n    const top = this.unproject([this.width / 2, 0], unprojectOption);\n    const right = this.unproject([this.width, this.height / 2], unprojectOption);\n    const bottom = this.unproject([this.width / 2, this.height], unprojectOption);\n\n    if (right[0] < this.longitude) right[0] += 360;\n    if (left[0] > this.longitude) left[0] -= 360;\n\n    return [\n      Math.min(left[0], right[0], top[0], bottom[0]),\n      Math.min(left[1], right[1], top[1], bottom[1]),\n      Math.max(left[0], right[0], top[0], bottom[0]),\n      Math.max(left[1], right[1], top[1], bottom[1])\n    ];\n  }\n\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const {pixelUnprojectionMatrix} = this;\n\n    let coord;\n    if (Number.isFinite(z)) {\n      // Has depth component\n      coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);\n    } else {\n      // since we don't know the correct projected z value for the point,\n      // unproject two points to get a line and then find the point on that line that intersects with the sphere\n      const coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);\n      const coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);\n\n      const lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n      const lSqr = vec3.sqrLen(vec3.sub([], coord0, coord1));\n      const l0Sqr = vec3.sqrLen(coord0);\n      const l1Sqr = vec3.sqrLen(coord1);\n      const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;\n      const dSqr = (4 * sSqr) / lSqr;\n      const r0 = Math.sqrt(l0Sqr - dSqr);\n      const dr = Math.sqrt(Math.max(0, lt * lt - dSqr));\n      const t = (r0 - dr) / Math.sqrt(lSqr);\n\n      coord = vec3.lerp([], coord0, coord1, t);\n    }\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  projectPosition(xyz) {\n    const [lng, lat, Z = 0] = xyz;\n    const lambda = lng * DEGREES_TO_RADIANS;\n    const phi = lat * DEGREES_TO_RADIANS;\n    const cosPhi = Math.cos(phi);\n    const D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n\n    return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];\n  }\n\n  unprojectPosition(xyz) {\n    const [x, y, z] = xyz;\n    const D = vec3.len(xyz);\n    const phi = Math.asin(z / D);\n    const lambda = Math.atan2(x, -y);\n\n    const lng = lambda * RADIANS_TO_DEGREES;\n    const lat = phi * RADIANS_TO_DEGREES;\n    const Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;\n    return [lng, lat, Z];\n  }\n\n  projectFlat(xyz) {\n    return xyz;\n  }\n\n  unprojectFlat(xyz) {\n    return xyz;\n  }\n\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromPosition = this.unproject(pos);\n    return [\n      lngLat[0] - fromPosition[0] + this.longitude,\n      lngLat[1] - fromPosition[1] + this.latitude\n    ];\n  }\n}\n\nfunction transformVector(matrix, vector) {\n  const result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}\n"],"file":"globe-viewport.js"}