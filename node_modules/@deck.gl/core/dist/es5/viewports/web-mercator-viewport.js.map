{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["WebMercatorViewport","opts","latitude","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","repeat","worldOffset","width","height","altitude","scale","Math","pow","max","fov","aspect","focalDistance","near","far","viewMatrixUncentered","viewOffset","Matrix4","translate","multiplyLeft","viewportOpts","Object","assign","viewMatrix","fovyRadians","_subViewports","freeze","lngLatZ","xyz","lngLat","pos","fromLocation","pixelUnprojectionMatrix","toLocation","projectFlat","vec2","add","negate","newCenter","center","unprojectFlat","options","corners","z","min","bounds","length","getBounds","minOffset","floor","maxOffset","ceil","x","offsetViewport","push","Viewport","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;;AAUA;;AACA;;;;;;;;;;IAEqBA,mB;;;;;AAQnB,iCAAuB;AAAA;;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;AAAA,yBAajBA,IAbiB,CAEnBC,QAFmB;AAAA,QAEnBA,QAFmB,+BAER,CAFQ;AAAA,0BAajBD,IAbiB,CAGnBE,SAHmB;AAAA,QAGnBA,SAHmB,gCAGP,CAHO;AAAA,qBAajBF,IAbiB,CAInBG,IAJmB;AAAA,QAInBA,IAJmB,2BAIZ,EAJY;AAAA,sBAajBH,IAbiB,CAKnBI,KALmB;AAAA,QAKnBA,KALmB,4BAKX,CALW;AAAA,wBAajBJ,IAbiB,CAMnBK,OANmB;AAAA,QAMnBA,OANmB,8BAMT,CANS;AAAA,gCAajBL,IAbiB,CAOnBM,eAPmB;AAAA,QAOnBA,eAPmB,sCAOD,GAPC;AAAA,+BAajBN,IAbiB,CAQnBO,cARmB;AAAA,QAQnBA,cARmB,qCAQF,IARE;AAAA,6BAajBP,IAbiB,CASnBQ,YATmB;AAAA,QASnBA,YATmB,mCASJ,KATI;AAAA,uBAajBR,IAbiB,CAWnBS,MAXmB;AAAA,QAWnBA,MAXmB,6BAWV,KAXU;AAAA,4BAajBT,IAbiB,CAYnBU,WAZmB;AAAA,QAYnBA,WAZmB,kCAYL,CAZK;AAAA,QAehBC,KAfgB,GAeiBX,IAfjB,CAehBW,KAfgB;AAAA,QAeTC,MAfS,GAeiBZ,IAfjB,CAeTY,MAfS;AAAA,yBAeiBZ,IAfjB,CAeDa,QAfC;AAAA,QAeDA,QAfC,+BAeU,GAfV;AAgBrB,QAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYb,IAAZ,CAAd;AAGAQ,IAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AAIAC,IAAAA,QAAQ,GAAGE,IAAI,CAACE,GAAL,CAAS,IAAT,EAAeJ,QAAf,CAAX;;AAxBqB,gCA0B2B,0CAAwB;AACtEF,MAAAA,KAAK,EAALA,KADsE;AAEtEC,MAAAA,MAAM,EAANA,MAFsE;AAGtER,MAAAA,KAAK,EAALA,KAHsE;AAItES,MAAAA,QAAQ,EAARA,QAJsE;AAKtEP,MAAAA,eAAe,EAAfA,eALsE;AAMtEC,MAAAA,cAAc,EAAdA;AANsE,KAAxB,CA1B3B;AAAA,QA0BdW,GA1Bc,yBA0BdA,GA1Bc;AAAA,QA0BTC,MA1BS,yBA0BTA,MA1BS;AAAA,QA0BDC,aA1BC,yBA0BDA,aA1BC;AAAA,QA0BcC,IA1Bd,yBA0BcA,IA1Bd;AAAA,QA0BoBC,GA1BpB,yBA0BoBA,GA1BpB;;AAuCrB,QAAIC,oBAAoB,GAAG,gCAAc;AACvCX,MAAAA,MAAM,EAANA,MADuC;AAEvCR,MAAAA,KAAK,EAALA,KAFuC;AAGvCC,MAAAA,OAAO,EAAPA,OAHuC;AAIvCS,MAAAA,KAAK,EAALA,KAJuC;AAKvCD,MAAAA,QAAQ,EAARA;AALuC,KAAd,CAA3B;;AAQA,QAAIH,WAAJ,EAAiB;AACf,UAAMc,UAAU,GAAG,IAAIC,aAAJ,GAAcC,SAAd,CAAwB,CAAC,MAAMhB,WAAP,EAAoB,CAApB,EAAuB,CAAvB,CAAxB,CAAnB;AACAa,MAAAA,oBAAoB,GAAGC,UAAU,CAACG,YAAX,CAAwBJ,oBAAxB,CAAvB;AACD;;AAED,QAAMK,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB9B,IAAlB,EAAwB;AAE3CW,MAAAA,KAAK,EAALA,KAF2C;AAG3CC,MAAAA,MAAM,EAANA,MAH2C;AAM3CmB,MAAAA,UAAU,EAAER,oBAN+B;AAO3CrB,MAAAA,SAAS,EAATA,SAP2C;AAQ3CD,MAAAA,QAAQ,EAARA,QAR2C;AAS3CE,MAAAA,IAAI,EAAJA,IAT2C;AAY3CK,MAAAA,YAAY,EAAZA,YAZ2C;AAa3CwB,MAAAA,WAAW,EAAEd,GAb8B;AAc3CC,MAAAA,MAAM,EAANA,MAd2C;AAgB3CC,MAAAA,aAAa,EAAEZ,YAAY,GAAGY,aAAH,GAAmB,CAhBH;AAiB3CC,MAAAA,IAAI,EAAJA,IAjB2C;AAkB3CC,MAAAA,GAAG,EAAHA;AAlB2C,KAAxB,CAArB;AAqBA,8BAAMM,YAAN;AAGA,UAAK3B,QAAL,GAAgBA,QAAhB;AACA,UAAKC,SAAL,GAAiBA,SAAjB;AACA,UAAKC,IAAL,GAAYA,IAAZ;AACA,UAAKC,KAAL,GAAaA,KAAb;AACA,UAAKC,OAAL,GAAeA,OAAf;AACA,UAAKQ,QAAL,GAAgBA,QAAhB;AAEA,UAAKL,YAAL,GAAoBA,YAApB;AAEA,UAAKyB,aAAL,GAAqBxB,MAAM,GAAG,EAAH,GAAQ,IAAnC;AAEAoB,IAAAA,MAAM,CAACK,MAAP;AAvFqB;AAwFtB;;;;sCAkCiBC,O,EAASC,G,EAAK;AAC9B,aAAO,oCAAkBD,OAAlB,EAA2BC,GAA3B,CAAP;AACD;;;uDAY2C;AAAA,UAAdC,MAAc,QAAdA,MAAc;AAAA,UAANC,GAAM,QAANA,GAAM;AAC1C,UAAMC,YAAY,GAAG,gCAAcD,GAAd,EAAmB,KAAKE,uBAAxB,CAArB;AACA,UAAMC,UAAU,GAAG,KAAKC,WAAL,CAAiBL,MAAjB,CAAnB;AAEA,UAAMX,SAAS,GAAGiB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaH,UAAb,EAAyBE,IAAI,CAACE,MAAL,CAAY,EAAZ,EAAgBN,YAAhB,CAAzB,CAAlB;AACA,UAAMO,SAAS,GAAGH,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,KAAKG,MAAlB,EAA0BrB,SAA1B,CAAlB;AAEA,aAAO,KAAKsB,aAAL,CAAmBF,SAAnB,CAAP;AACD;;;gCAEuB;AAAA,UAAdG,OAAc,uEAAJ,EAAI;AACtB,UAAMC,OAAO,GAAG,4BAAU,IAAV,EAAgBD,OAAO,CAACE,CAAR,IAAa,CAA7B,CAAhB;AAEA,aAAO,CACLpC,IAAI,CAACqC,GAAL,CAASF,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CADK,EAELnC,IAAI,CAACqC,GAAL,CAASF,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CAFK,EAGLnC,IAAI,CAACE,GAAL,CAASiC,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CAHK,EAILnC,IAAI,CAACE,GAAL,CAASiC,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CAJK,CAAP;AAMD;;;8BAWSG,M,EAAsB;AAAA,UAAdJ,OAAc,uEAAJ,EAAI;AAAA,UACvBtC,KADuB,GACN,IADM,CACvBA,KADuB;AAAA,UAChBC,MADgB,GACN,IADM,CAChBA,MADgB;;AAAA,wBAEM,4BAAUiB,MAAM,CAACC,MAAP,CAAc;AAACnB,QAAAA,KAAK,EAALA,KAAD;AAAQC,QAAAA,MAAM,EAANA,MAAR;AAAgByC,QAAAA,MAAM,EAANA;AAAhB,OAAd,EAAuCJ,OAAvC,CAAV,CAFN;AAAA,UAEvB/C,SAFuB,eAEvBA,SAFuB;AAAA,UAEZD,QAFY,eAEZA,QAFY;AAAA,UAEFE,IAFE,eAEFA,IAFE;;AAG9B,aAAO,IAAIJ,mBAAJ,CAAwB;AAACY,QAAAA,KAAK,EAALA,KAAD;AAAQC,QAAAA,MAAM,EAANA,MAAR;AAAgBV,QAAAA,SAAS,EAATA,SAAhB;AAA2BD,QAAAA,QAAQ,EAARA,QAA3B;AAAqCE,QAAAA,IAAI,EAAJA;AAArC,OAAxB,CAAP;AACD;;;wBA/EkB;AACjB,UAAI,KAAK8B,aAAL,IAAsB,CAAC,KAAKA,aAAL,CAAmBqB,MAA9C,EAAsD;AAEpD,YAAMD,MAAM,GAAG,KAAKE,SAAL,EAAf;AAEA,YAAMC,SAAS,GAAGzC,IAAI,CAAC0C,KAAL,CAAW,CAACJ,MAAM,CAAC,CAAD,CAAN,GAAY,GAAb,IAAoB,GAA/B,CAAlB;AACA,YAAMK,SAAS,GAAG3C,IAAI,CAAC4C,IAAL,CAAU,CAACN,MAAM,CAAC,CAAD,CAAN,GAAY,GAAb,IAAoB,GAA9B,CAAlB;;AAEA,aAAK,IAAIO,CAAC,GAAGJ,SAAb,EAAwBI,CAAC,IAAIF,SAA7B,EAAwCE,CAAC,EAAzC,EAA6C;AAC3C,cAAMC,cAAc,GAAGD,CAAC,GACpB,IAAI7D,mBAAJ,iCACK,IADL;AAEEW,YAAAA,WAAW,EAAEkD;AAFf,aADoB,GAKpB,IALJ;;AAMA,eAAK3B,aAAL,CAAmB6B,IAAnB,CAAwBD,cAAxB;AACD;AACF;;AACD,aAAO,KAAK5B,aAAZ;AACD;;;EAtH8C8B,oB;;;AAqLjDhE,mBAAmB,CAACiE,WAApB,GAAkC,qBAAlC","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from 'math.gl';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n\n      repeat = false,\n      worldOffset = 0\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const {fov, aspect, focalDistance, near, far} = getProjectionParameters({\n      width,\n      height,\n      pitch,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    const viewportOpts = Object.assign({}, opts, {\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      orthographic,\n      fovyRadians: fov,\n      aspect,\n      // TODO Viewport is already carefully set up to \"focus\" on ground, so can't use focal distance\n      focalDistance: orthographic ? focalDistance : 1,\n      near,\n      far\n    });\n\n    super(viewportOpts);\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return this.unprojectFlat(newCenter);\n  }\n\n  getBounds(options = {}) {\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"],"file":"web-mercator-viewport.js"}