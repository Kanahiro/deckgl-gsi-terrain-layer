{"version":3,"sources":["../../../src/effects/post-process-effect.js"],"names":["PostProcessEffect","module","props","id","name","gl","params","passes","createPasses","target","inputBuffer","outputBuffer","swapBuffer","index","length","render","switchBuffer","pass","Effect","moduleSettings","filter","sampler","fs","getFragmentShaderForRenderPass","ScreenPass","map","idn","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE"],"mappings":"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","sourcesContent":["import Effect from '../lib/effect';\nimport ScreenPass from '../passes/screen-pass';\nimport {normalizeShaderModule} from '@luma.gl/core';\n\nexport default class PostProcessEffect extends Effect {\n  constructor(module, props = {}) {\n    super(props);\n    this.id = `${module.name}-pass`;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  postRender(gl, params) {\n    if (!this.passes) {\n      this.passes = createPasses(gl, this.module, this.id, this.props);\n    }\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer});\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = null;\n    }\n  }\n}\n\nfunction createPasses(gl, module, id, moduleSettings) {\n  if (module.filter || module.sampler) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs,\n      moduleSettings\n    });\n    return [pass];\n  }\n\n  const passes = module.passes || [];\n  return passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs,\n      moduleSettings\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"],"file":"post-process-effect.js"}