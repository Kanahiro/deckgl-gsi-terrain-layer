{"version":3,"sources":["../../../../src/effects/lighting/suncalc.js"],"names":["DEGREES_TO_RADIANS","Math","PI","DAY_IN_MS","JD1970","JD2000","e","M0","M1","THETA0","THETA1","getSolarPosition","timestamp","latitude","longitude","longitudeWestInRadians","phi","d","toDays","c","getSunCoords","H","getSiderealTime","rightAscension","azimuth","getAzimuth","declination","altitude","getAltitude","getSunlightDirection","azimuthN","sin","cos","toJulianDay","getRightAscension","eclipticLongitude","b","lambda","atan2","tan","getDeclination","asin","hourAngle","latitudeInRadians","delta","dates","getSolarMeanAnomaly","days","getEclipticLongitude","meanAnomaly","M","C","P","L"],"mappings":"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","sourcesContent":["// sun position calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// and inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n\n// This angle ε [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397°\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\n\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0° at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n\nexport function getSolarPosition(timestamp, latitude, longitude) {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n\n  const c = getSunCoords(d);\n  // hour angle\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n\n  // https://www.aa.quae.nl/en/reken/zonpositie.html\n  // The altitude is 0° at the horizon, +90° in the zenith (straight over your head), and −90° in the nadir (straight down).\n  // The azimuth is the direction along the horizon, which we measure from south to west.\n  // South has azimuth 0°, west +90°, north +180°, and east +270° (or −90°, that's the same thing).\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\n\nexport function getSunlightDirection(timestamp, latitude, longitude) {\n  const {azimuth, altitude} = getSolarPosition(timestamp, latitude, longitude);\n  // convert azimuth from 0 at south to be 0 at north\n  const azimuthN = azimuth + Math.PI;\n\n  // solar position to light direction\n  return [-Math.sin(azimuthN), -Math.cos(azimuthN), -Math.sin(altitude)];\n}\n\nfunction toJulianDay(timestamp) {\n  return timestamp / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  const M = meanAnomaly;\n  // equation of center\n  const C =\n    DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  // perihelion of the Earth\n  const P = DEGREES_TO_RADIANS * 102.9372;\n\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}\n"],"file":"suncalc.js"}