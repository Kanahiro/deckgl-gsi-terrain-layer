{"version":3,"sources":["../../../src/passes/pick-layers-pass.js"],"names":["PICKING_PARAMETERS","blendFunc","blendEquation","PickLayersPass","props","pickingFBO","_drawPickingBuffer","layers","layerFilter","views","viewports","onViewportActive","deviceRect","x","y","width","height","pass","redrawReason","pickZ","gl","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","layer","pickable","pickingActive","pickingAttribute","lightSources","layerIndex","pickParameters","blendColor","Object","assign","parameters","LayersPass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;AAGA,IAAMA,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE,gBADc;AAEzBC,EAAAA,aAAa;AAFY,CAA3B;;IAKqBC,c;;;;;;;;;;;;2BACZC,K,EAAO;AACZ,UAAIA,KAAK,CAACC,UAAV,EAAsB;AACpB,aAAKC,kBAAL,CAAwBF,KAAxB;AACD,OAFD,MAEO;AACL,qHAAaA,KAAb;AACD;AACF;;;6CAgBE;AAAA;;AAAA,UAVDG,MAUC,QAVDA,MAUC;AAAA,UATDC,WASC,QATDA,WASC;AAAA,UARDC,KAQC,QARDA,KAQC;AAAA,UAPDC,SAOC,QAPDA,SAOC;AAAA,UANDC,gBAMC,QANDA,gBAMC;AAAA,UALDN,UAKC,QALDA,UAKC;AAAA,iCAJDO,UAIC;AAAA,UAJYC,CAIZ,mBAJYA,CAIZ;AAAA,UAJeC,CAIf,mBAJeA,CAIf;AAAA,UAJkBC,KAIlB,mBAJkBA,KAIlB;AAAA,UAJyBC,MAIzB,mBAJyBA,MAIzB;AAAA,2BAHDC,IAGC;AAAA,UAHDA,IAGC,0BAHM,SAGN;AAAA,UAFDC,YAEC,QAFDA,YAEC;AAAA,UADDC,KACC,QADDA,KACC;AACD,UAAMC,EAAE,GAAG,KAAKA,EAAhB;AACA,WAAKD,KAAL,GAAaA,KAAb;AAOA,aAAO,0BACLC,EADK;AAGHC,QAAAA,WAAW,EAAE,IAHV;AAIHC,QAAAA,OAAO,EAAE,CAACT,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,CAJN;AAKHO,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CALT;AASHC,QAAAA,SAAS,EAAE,IATR;AAUHC,QAAAA,SAAS,EAAE,IAVR;AAWHC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAXT;AAYHC,QAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB;AAZR,SAcA3B,kBAdA;AAeH4B,QAAAA,KAAK,EAAE,CAACT;AAfL,UAiBL,YAAM;AACJ,uHAAa;AACXU,UAAAA,MAAM,EAAExB,UADG;AAEXE,UAAAA,MAAM,EAANA,MAFW;AAGXC,UAAAA,WAAW,EAAXA,WAHW;AAIXC,UAAAA,KAAK,EAALA,KAJW;AAKXC,UAAAA,SAAS,EAATA,SALW;AAMXC,UAAAA,gBAAgB,EAAhBA,gBANW;AAOXM,UAAAA,IAAI,EAAJA,IAPW;AAQXC,UAAAA,YAAY,EAAZA;AARW,SAAb;AAUD,OA5BI,CAAP;AA8BD;;;oCAGeY,K,EAAO;AACrB,aAAOA,KAAK,CAAC1B,KAAN,CAAY2B,QAAnB;AACD;;;0CAEqB;AACpB,aAAO;AACLC,QAAAA,aAAa,EAAE,CADV;AAELC,QAAAA,gBAAgB,EAAE,KAAKd,KAFlB;AAKLe,QAAAA,YAAY,EAAE;AALT,OAAP;AAOD;;;uCAEkBJ,K,EAAOK,U,EAAY;AAEpC,UAAMC,cAAc,GAAG,KAAKjB,KAAL,GACnB;AAACS,QAAAA,KAAK,EAAE;AAAR,OADmB,mCAEf5B,kBAFe;AAEK4B,QAAAA,KAAK,EAAE,IAFZ;AAEkBS,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAACF,UAAU,GAAG,CAAd,IAAmB,GAA7B;AAF9B,QAAvB;AAKA,aAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAK,CAAC1B,KAAN,CAAYoC,UAA9B,EAA0CJ,cAA1C,CAAP;AACD;;;EAvFyCK,sB","sourcesContent":["import LayersPass from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\nexport default class PickLayersPass extends LayersPass {\n  render(props) {\n    if (props.pickingFBO) {\n      this._drawPickingBuffer(props);\n    } else {\n      super.render(props);\n    }\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    pass = 'picking',\n    redrawReason,\n    pickZ\n  }) {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    return withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () => {\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          pass,\n          redrawReason\n        });\n      }\n    );\n  }\n\n  // PRIVATE\n  shouldDrawLayer(layer) {\n    return layer.props.pickable;\n  }\n\n  getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    // These will override any layer parameters\n    const pickParameters = this.pickZ\n      ? {blend: false}\n      : {...PICKING_PARAMETERS, blend: true, blendColor: [0, 0, 0, (layerIndex + 1) / 255]};\n\n    // Override layer parameters with pick parameters\n    return Object.assign({}, layer.props.parameters, pickParameters);\n  }\n}\n"],"file":"pick-layers-pass.js"}