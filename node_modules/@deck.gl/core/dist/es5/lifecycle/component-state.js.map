{"version":3,"sources":["../../../src/lifecycle/component-state.js"],"names":["ASYNC_ORIGINAL","PROP_SYMBOLS","ASYNC_RESOLVED","ASYNC_DEFAULTS","EMPTY_PROPS","Object","freeze","ComponentState","component","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","props","create","propName","defineProperty","enumerable","value","asyncProp","resolvedValue","Boolean","pendingLoadCount","resolvedLoadCount","key","isAsyncPropLoading","_watchPromise","Promise","resolve","resolvedValues","originalValues","defaultValues","_createAsyncPropData","_updateAsyncProp","_didAsyncInputValueChange","fetch","layer","url","_resolveAsyncIterable","_setPropValue","lastValue","loadCount","undefined","freezeAsyncOldProps","promise","then","data","_postProcessValue","_setAsyncPropValue","onDataLoad","error","log","iterable","count","chunk","startRow","endRow","length","previousValue","dataTransform","concat","defaultValue"],"mappings":";;;;;;;;;;;;;;;;;;;AAoBA;;AACA;;AACA;;IACOA,c,GAAkDC,uB,CAAlDD,c;IAAgBE,c,GAAkCD,uB,CAAlCC,c;IAAgBC,c,GAAkBF,uB,CAAlBE,c;AAEvC,IAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAApB;;IAEqBC,c;AACnB,4BAA8B;AAAA,QAAlBC,SAAkB,uEAAN,IAAM;AAAA;AAC5B,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkB,EAAlB;;AACA,SAAKC,kBAAL,GAA0B,YAAM,CAAE,CAAlC;;AACA,SAAKC,QAAL,GAAgBP,WAAhB;AACA,SAAKQ,aAAL,GAAqB,IAArB;AACD;;;;kCAEa;AACZ,aAAO,KAAKA,aAAL,IAAsB,KAAKD,QAAlC;AACD;;;oCAEe;AACd,WAAKC,aAAL,GAAqB,IAArB;AACA,WAAKD,QAAL,GAAgB,KAAKH,SAAL,CAAeK,KAA/B;AACD;;;0CAKqB;AACpB,UAAI,CAAC,KAAKD,aAAV,EAAyB;AAEvB,aAAKD,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKH,SAAL,CAAeK,KAAhD;AAIA,aAAKD,aAAL,GAAqBP,MAAM,CAACS,MAAP,CAAc,KAAKH,QAAnB,CAArB;;AACA,aAAK,IAAMI,QAAX,IAAuB,KAAKN,UAA5B,EAAwC;AACtCJ,UAAAA,MAAM,CAACW,cAAP,CAAsB,KAAKJ,aAA3B,EAA0CG,QAA1C,EAAoD;AAClDE,YAAAA,UAAU,EAAE,IADsC;AAElDC,YAAAA,KAAK,EAAE,KAAKP,QAAL,CAAcI,QAAd;AAF2C,WAApD;AAID;AACF;AACF;;;iCAMYA,Q,EAAU;AACrB,aAAOA,QAAQ,IAAI,KAAKN,UAAxB;AACD;;;iCAGYM,Q,EAAU;AACrB,UAAMI,SAAS,GAAG,KAAKV,UAAL,CAAgBM,QAAhB,CAAlB;AACA,aAAOI,SAAS,IAAIA,SAAS,CAACC,aAA9B;AACD;;;uCAEkBL,Q,EAAU;AAC3B,UAAIA,QAAJ,EAAc;AACZ,YAAMI,SAAS,GAAG,KAAKV,UAAL,CAAgBM,QAAhB,CAAlB;AACA,eAAOM,OAAO,CACZF,SAAS,IACPA,SAAS,CAACG,gBAAV,GAA6B,CAD/B,IAEEH,SAAS,CAACG,gBAAV,KAA+BH,SAAS,CAACI,iBAH/B,CAAd;AAKD;;AACD,WAAK,IAAMC,GAAX,IAAkB,KAAKf,UAAvB,EAAmC;AACjC,YAAI,KAAKgB,kBAAL,CAAwBD,GAAxB,CAAJ,EAAkC;AAChC,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;;;oCAGeT,Q,EAAUG,K,EAAO;AAC/B,WAAKQ,aAAL,CAAmBX,QAAnB,EAA6BY,OAAO,CAACC,OAAR,CAAgBV,KAAhB,CAA7B;AACD;;;kCAIaL,K,EAAO;AAEnB,UAAMgB,cAAc,GAAGhB,KAAK,CAACX,cAAD,CAAL,IAAyB,EAAhD;AACA,UAAM4B,cAAc,GAAGjB,KAAK,CAACb,cAAD,CAAL,IAAyBa,KAAhD;AACA,UAAMkB,aAAa,GAAGlB,KAAK,CAACV,cAAD,CAAL,IAAyB,EAA/C;;AAGA,WAAK,IAAMY,QAAX,IAAuBc,cAAvB,EAAuC;AACrC,YAAMX,KAAK,GAAGW,cAAc,CAACd,QAAD,CAA5B;;AACA,aAAKiB,oBAAL,CAA0BjB,QAA1B,EAAoCG,KAApC,EAA2Ca,aAAa,CAAChB,QAAD,CAAxD;;AACA,aAAKkB,gBAAL,CAAsBlB,QAAtB,EAAgCG,KAAhC;AACD;;AAED,WAAK,IAAMH,SAAX,IAAuBe,cAAvB,EAAuC;AACrC,YAAMZ,OAAK,GAAGY,cAAc,CAACf,SAAD,CAA5B;;AAEA,aAAKiB,oBAAL,CAA0BjB,SAA1B,EAAoCG,OAApC,EAA2Ca,aAAa,CAAChB,SAAD,CAAxD;;AACA,aAAKkB,gBAAL,CAAsBlB,SAAtB,EAAgCG,OAAhC;AACD;AACF;;;qCAGgBH,Q,EAAUG,K,EAAO;AAChC,UAAI,CAAC,KAAKgB,yBAAL,CAA+BnB,QAA/B,EAAyCG,KAAzC,CAAL,EAAsD;AACpD;AACD;;AAGD,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAMiB,KAAK,GAAG,KAAKC,KAAL,IAAc,KAAKA,KAAL,CAAWvB,KAAX,CAAiBsB,KAA7C;AACA,YAAME,GAAG,GAAGnB,KAAZ;;AACA,YAAIiB,KAAJ,EAAW;AACTjB,UAAAA,KAAK,GAAGiB,KAAK,CAACE,GAAD,EAAM;AAACtB,YAAAA,QAAQ,EAARA,QAAD;AAAWqB,YAAAA,KAAK,EAAE,KAAKA;AAAvB,WAAN,CAAb;AACD;AACF;;AAGD,UAAIlB,KAAK,YAAYS,OAArB,EAA8B;AAC5B,aAAKD,aAAL,CAAmBX,QAAnB,EAA6BG,KAA7B;;AACA;AACD;;AAED,UAAI,oCAAgBA,KAAhB,CAAJ,EAA4B;AAC1B,aAAKoB,qBAAL,CAA2BvB,QAA3B,EAAqCG,KAArC;;AACA;AACD;;AAGD,WAAKqB,aAAL,CAAmBxB,QAAnB,EAA6BG,KAA7B;AACD;;;8CAGyBH,Q,EAAUG,K,EAAO;AACzC,UAAMC,SAAS,GAAG,KAAKV,UAAL,CAAgBM,QAAhB,CAAlB;;AACA,UAAIG,KAAK,KAAKC,SAAS,CAACqB,SAAxB,EAAmC;AACjC,eAAO,KAAP;AACD;;AACDrB,MAAAA,SAAS,CAACqB,SAAV,GAAsBtB,KAAtB;AACA,aAAO,IAAP;AACD;;;kCAGaH,Q,EAAUG,K,EAAO;AAC7B,UAAMC,SAAS,GAAG,KAAKV,UAAL,CAAgBM,QAAhB,CAAlB;AACAI,MAAAA,SAAS,CAACD,KAAV,GAAkBA,KAAlB;AACAC,MAAAA,SAAS,CAACC,aAAV,GAA0BF,KAA1B;AACAC,MAAAA,SAAS,CAACG,gBAAV;AACAH,MAAAA,SAAS,CAACI,iBAAV,GAA8BJ,SAAS,CAACG,gBAAxC;AACD;;;uCAGkBP,Q,EAAUG,K,EAAOuB,S,EAAW;AAG7C,UAAMtB,SAAS,GAAG,KAAKV,UAAL,CAAgBM,QAAhB,CAAlB;;AACA,UAAII,SAAS,IAAIsB,SAAS,IAAItB,SAAS,CAACI,iBAApC,IAAyDL,KAAK,KAAKwB,SAAvE,EAAkF;AAEhF,aAAKC,mBAAL;AAEAxB,QAAAA,SAAS,CAACC,aAAV,GAA0BF,KAA1B;AACAC,QAAAA,SAAS,CAACI,iBAAV,GAA8BkB,SAA9B;AAGA,aAAK/B,kBAAL,CAAwBK,QAAxB,EAAkCG,KAAlC;AACD;AACF;;;kCAGaH,Q,EAAU6B,O,EAAS;AAAA;;AAC/B,UAAMzB,SAAS,GAAG,KAAKV,UAAL,CAAgBM,QAAhB,CAAlB;AACAI,MAAAA,SAAS,CAACG,gBAAV;AACA,UAAMmB,SAAS,GAAGtB,SAAS,CAACG,gBAA5B;AACAsB,MAAAA,OAAO,CACJC,IADH,CACQ,UAAAC,IAAI,EAAI;AACZA,QAAAA,IAAI,GAAG,KAAI,CAACC,iBAAL,CAAuBhC,QAAvB,EAAiC+B,IAAjC,CAAP;;AACA,QAAA,KAAI,CAACE,kBAAL,CAAwBjC,QAAxB,EAAkC+B,IAAlC,EAAwCL,SAAxC;;AAEA,YAAMQ,UAAU,GAAG,KAAI,CAACb,KAAL,IAAc,KAAI,CAACA,KAAL,CAAWvB,KAAX,CAAiBoC,UAAlD;;AACA,YAAIlC,QAAQ,KAAK,MAAb,IAAuBkC,UAA3B,EAAuC;AACrCA,UAAAA,UAAU,CAACH,IAAD,EAAO;AAAC/B,YAAAA,QAAQ,EAARA,QAAD;AAAWqB,YAAAA,KAAK,EAAE,KAAI,CAACA;AAAvB,WAAP,CAAV;AACD;AACF,OATH,WAUS,UAAAc,KAAK;AAAA,eAAIC,gBAAID,KAAJ,CAAUA,KAAV,GAAJ;AAAA,OAVd;AAWD;;;;oHAE2BnC,Q,EAAUqC,Q;;;;;;;AACpC,oBAAIrC,QAAQ,KAAK,MAAjB,EAAyB;AAEvB,uBAAKwB,aAAL,CAAmBxB,QAAnB,EAA6BqC,QAA7B;AACD;;AAEKjC,gBAAAA,S,GAAY,KAAKV,UAAL,CAAgBM,QAAhB,C;AAClBI,gBAAAA,SAAS,CAACG,gBAAV;AACMmB,gBAAAA,S,GAAYtB,SAAS,CAACG,gB;AACxBwB,gBAAAA,I,GAAO,E;AACPO,gBAAAA,K,GAAQ,C;;;;4DAEcD,Q;;;;;;;;;;;;;;;;;;;;AAATE,gBAAAA,K;AACfR,gBAAAA,IAAI,GAAG,KAAKC,iBAAL,CAAuBhC,QAAvB,EAAiCuC,KAAjC,EAAwCR,IAAxC,CAAP;AAGAzC,gBAAAA,MAAM,CAACW,cAAP,CAAsB8B,IAAtB,EAA4B,QAA5B,EAAsC;AACpC7B,kBAAAA,UAAU,EAAE,KADwB;AAEpCC,kBAAAA,KAAK,EAAE,CAAC;AAACqC,oBAAAA,QAAQ,EAAEF,KAAX;AAAkBG,oBAAAA,MAAM,EAAEV,IAAI,CAACW;AAA/B,mBAAD;AAF6B,iBAAtC;AAKAJ,gBAAAA,KAAK,GAAGP,IAAI,CAACW,MAAb;;AACA,qBAAKT,kBAAL,CAAwBjC,QAAxB,EAAkC+B,IAAlC,EAAwCL,SAAxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGIQ,gBAAAA,U,GAAa,KAAKb,KAAL,IAAc,KAAKA,KAAL,CAAWvB,KAAX,CAAiBoC,U;;AAClD,oBAAIA,UAAJ,EAAgB;AACdA,kBAAAA,UAAU,CAACH,IAAD,EAAO;AAAC/B,oBAAAA,QAAQ,EAARA,QAAD;AAAWqB,oBAAAA,KAAK,EAAE,KAAKA;AAAvB,mBAAP,CAAV;AACD;;;;;;;;;;;;;;;;;;sCAIerB,Q,EAAUG,K,EAAOwC,a,EAAe;AAAA,iBACxB,KAAKlD,SAAL,GAAiB,KAAKA,SAAL,CAAeK,KAAhC,GAAwC,EADhB;AAAA,UACzC8C,aADyC,QACzCA,aADyC;;AAEhD,UAAI5C,QAAQ,KAAK,MAAjB,EAAyB;AACvB,eAAOG,KAAP;AACD;;AACD,UAAIyC,aAAJ,EAAmB;AACjB,eAAOA,aAAa,CAACzC,KAAD,EAAQwC,aAAR,CAApB;AACD;;AAED,aAAOA,aAAa,GAAGA,aAAa,CAACE,MAAd,CAAqB1C,KAArB,CAAH,GAAiCA,KAArD;AACD;;;yCAGoBH,Q,EAAUG,K,EAAO2C,Y,EAAc;AAClD,UAAM1C,SAAS,GAAG,KAAKV,UAAL,CAAgBM,QAAhB,CAAlB;;AACA,UAAI,CAACI,SAAL,EAAgB;AAEd,aAAKV,UAAL,CAAgBM,QAAhB,IAA4B;AAC1ByB,UAAAA,SAAS,EAAE,IADe;AAE1BpB,UAAAA,aAAa,EAAEyC,YAFW;AAG1BvC,UAAAA,gBAAgB,EAAE,CAHQ;AAI1BC,UAAAA,iBAAiB,EAAE;AAJO,SAA5B;AAMD;AACF","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {PROP_SYMBOLS} from './constants';\nconst {ASYNC_ORIGINAL, ASYNC_RESOLVED, ASYNC_DEFAULTS} = PROP_SYMBOLS;\n\nconst EMPTY_PROPS = Object.freeze({});\n\nexport default class ComponentState {\n  constructor(component = null) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = EMPTY_PROPS; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  freezeAsyncOldProps() {\n    if (!this.oldAsyncProps) {\n      // Make sure oldProps is set\n      this.oldProps = this.oldProps || this.component.props;\n\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // ASYNC PROP HANDLING\n  //\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName) {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName, value) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED] || {};\n    const originalValues = props[ASYNC_ORIGINAL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, value, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, value, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      const fetch = this.layer && this.layer.props.fetch;\n      const url = value;\n      if (fetch) {\n        value = fetch(url, {propName, layer: this.layer});\n      }\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value);\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    if (value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  _setPropValue(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.value = value;\n    asyncProp.resolvedValue = value;\n    asyncProp.pendingLoadCount++;\n    asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  _setAsyncPropValue(propName, value, loadCount) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // A chance to copy old props before updating\n      this.freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    promise\n      .then(data => {\n        data = this._postProcessValue(propName, data);\n        this._setAsyncPropValue(propName, data, loadCount);\n\n        const onDataLoad = this.layer && this.layer.props.onDataLoad;\n        if (propName === 'data' && onDataLoad) {\n          onDataLoad(data, {propName, layer: this.layer});\n        }\n      })\n      .catch(error => log.error(error)());\n  }\n\n  async _resolveAsyncIterable(propName, iterable) {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      data = this._postProcessValue(propName, chunk, data);\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    const onDataLoad = this.layer && this.layer.props.onDataLoad;\n    if (onDataLoad) {\n      onDataLoad(data, {propName, layer: this.layer});\n    }\n  }\n\n  // Give the app a chance to post process the loaded data\n  _postProcessValue(propName, value, previousValue) {\n    const {dataTransform} = this.component ? this.component.props : {};\n    if (propName !== 'data') {\n      return value;\n    }\n    if (dataTransform) {\n      return dataTransform(value, previousValue);\n    }\n    // previousValue is assigned if loaded with async iterator\n    return previousValue ? previousValue.concat(value) : value;\n  }\n\n  // Creating an asyncProp record if needed\n  _createAsyncPropData(propName, value, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"],"file":"component-state.js"}