{"version":3,"sources":["../../../src/utils/typed-array-manager.js"],"names":["TypedArrayManager","props","_pool","overAlloc","poolSize","setProps","Object","assign","typedArray","count","size","type","padding","copy","initialize","Type","constructor","Float32Array","newSize","ArrayBuffer","isView","length","BYTES_PER_ELEMENT","buffer","byteLength","newArray","_allocate","set","fill","_release","Math","max","ceil","pool","i","findIndex","b","array","splice","push","shift"],"mappings":"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","sourcesContent":["export class TypedArrayManager {\n  constructor(props) {\n    this._pool = [];\n    this.props = {overAlloc: 2, poolSize: 100};\n    this.setProps(props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  allocate(typedArray, count, {size = 1, type, padding = 0, copy = false, initialize = false}) {\n    const Type = type || (typedArray && typedArray.constructor) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      // Hack - always initialize the first 4 elements. NaNs crashe the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  release(typedArray) {\n    this._release(typedArray);\n  }\n\n  _allocate(Type, size, initialize) {\n    // Allocate at least one element to ensure a valid buffer\n    size = Math.max(Math.ceil(size * this.props.overAlloc), 1);\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * size;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      const array = new Type(pool.splice(i, 1)[0], 0, size);\n      if (initialize) {\n        // Viewing a buffer with a different type may create NaNs\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(size);\n  }\n\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.props.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.props.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"],"file":"typed-array-manager.js"}