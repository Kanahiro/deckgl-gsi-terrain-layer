{"version":3,"sources":["../../../src/lib/view-manager.js"],"names":["ViewManager","props","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractiveStateChange","Object","seal","setProps","key","finalize","opts","clearRedrawFlags","redraw","reason","viewId","controller","updateTransition","rect","filter","viewport","containsPixel","viewMap","forEach","view","id","viewOrViewId","find","getView","getViewStateId","filterViewState","xyz","viewports","getViewports","pixel","x","y","i","length","p","slice","unproject","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Number","isFinite","setNeedsUpdate","Boolean","viewsChanged","_diffViews","viewStateChanged","log","warn","event","Controller","type","_onViewStateChange","bind","onStateChange","makeViewport","_getViewport","controllerProps","_createController","oldControllers","getViewState","_updateController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(view, props) {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractiveStateChange,\n      makeViewport: view._getViewport.bind(view),\n      ...props\n    });\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    let controllerProps = view.controller;\n    if (controllerProps) {\n      controllerProps = {\n        ...viewState,\n        ...view.props,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(view, controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(\n        view,\n        viewState,\n        viewport,\n        oldControllers[view.id]\n      );\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}