{"version":3,"sources":["../../../../src/lib/attribute/attribute-manager.js"],"names":["TRACE_INVALIDATE","TRACE_UPDATE_START","TRACE_UPDATE_END","TRACE_ATTRIBUTE_UPDATE_START","TRACE_ATTRIBUTE_ALLOCATE","TRACE_ATTRIBUTE_UPDATE_END","AttributeManager","gl","id","stats","timeline","attributes","updateTriggers","accessors","needsRedraw","userData","attributeTransitionManager","AttributeTransitionManager","Object","seal","attributeName","finalize","opts","clearRedrawFlags","redraw","updaters","_add","instanced","attributeNameArray","i","length","name","undefined","triggerName","dataRange","invalidatedAttributes","_invalidateTrigger","setNeedsUpdate","data","numInstances","startIndices","transitions","props","buffers","context","updated","get","timeStart","attribute","accessorName","settings","accessor","log","removed","setExternalBuffer","setBinaryValue","setConstantValue","needsUpdate","_updateAttribute","timeEnd","update","transitionUpdated","run","clearChangedFlags","changedAttributes","assign","getAttributes","hasAttribute","excludeAttributes","shaderAttributes","getShaderAttributes","extraProps","warn","newAttributes","newAttribute","_createAttribute","_mapUpdateTriggersToAttributes","constant","isIndexed","elements","size","value","divisor","Attribute","triggers","getUpdateTriggers","forEach","push","allocate","updateBuffer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute from './attribute';\nimport log from '../../utils/log';\nimport debug from '../../debug';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\n\nexport default class AttributeManager {\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  constructor(gl, {id = 'attribute-manager', stats, timeline} = {}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`,\n      timeline\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n    this.attributeTransitionManager.finalize();\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  // @return {AttributeManager} - for chaining\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = true;\n    return this;\n  }\n\n  // Adds attributes\n  add(attributes, updaters) {\n    this._add(attributes, updaters);\n  }\n\n  // Adds attributes\n  addInstanced(attributes, updaters) {\n    this._add(attributes, updaters, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName, dataRange) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n  }\n\n  invalidateAll(dataRange) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, 'all');\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({\n    data,\n    numInstances,\n    startIndices = null,\n    transitions,\n    props = {},\n    buffers = {},\n    context = {}\n  } = {}) {\n    // keep track of whether some attributes are updated\n    let updated = false;\n\n    debug(TRACE_UPDATE_START, this);\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      const accessorName = attribute.settings.accessor;\n      attribute.startIndices = startIndices;\n\n      if (props[attributeName]) {\n        log.removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();\n      }\n\n      if (attribute.setExternalBuffer(buffers[attributeName])) {\n        // Step 1: try update attribute directly from external buffers\n      } else if (attribute.setBinaryValue(buffers[accessorName], data.startIndices)) {\n        // Step 2: try set packed value from external typed array\n      } else if (!buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {\n        // Step 3: try set constant value from props\n        // Note: if buffers[accessorName] is supplied, ignore props[accessorName]\n        // This may happen when setBinaryValue falls through to use the auto updater\n      } else if (attribute.needsUpdate()) {\n        // Step 4: update via updater callback\n        updated = true;\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n\n    if (updated) {\n      // Only initiate alloc/update (and logging) if actually needed\n      debug(TRACE_UPDATE_END, this, numInstances);\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition() {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.run();\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes() {\n    return this.attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuffers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes(opts = {clearChangedFlags: false}) {\n    const {attributes, attributeTransitionManager} = this;\n\n    const changedAttributes = Object.assign({}, attributeTransitionManager.getAttributes());\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  // Returns shader attributes\n  getShaderAttributes(attributes, excludeAttributes = {}) {\n    if (!attributes) {\n      attributes = this.getAttributes();\n    }\n    const shaderAttributes = {};\n    for (const attributeName in attributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());\n      }\n    }\n    return shaderAttributes;\n  }\n\n  // PROTECTED METHODS - Only to be used by collaborating classes, not by apps\n\n  // Returns object containing all accessors as keys, with non-null values\n  // @return {Object} - accessors object\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  _add(attributes, updaters, extraProps = {}) {\n    if (updaters) {\n      log.warn('AttributeManager.add({updaters}) - updater map no longer supported')();\n    }\n\n    const newAttributes = {};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      const newAttribute = this._createAttribute(attributeName, attribute, extraProps);\n\n      newAttributes[attributeName] = newAttribute;\n    }\n\n    Object.assign(this.attributes, newAttributes);\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  _createAttribute(name, attribute, extraProps) {\n    const props = {\n      id: name,\n      // Luma fields\n      constant: attribute.constant || false,\n      isIndexed: attribute.isIndexed || attribute.elements,\n      size: (attribute.elements && 1) || attribute.size,\n      value: attribute.value || null,\n      divisor: attribute.instanced || extraProps.instanced ? 1 : attribute.divisor\n    };\n\n    return new Attribute(this.gl, Object.assign({}, attribute, props));\n  }\n\n  // build updateTrigger name to attribute name mapping\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName, dataRange) {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    }\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute(opts) {\n    const {attribute, numInstances} = opts;\n    debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n\n    if (attribute.allocate(numInstances)) {\n      debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n    }\n\n    // Calls update on any buffers that need update\n    const updated = attribute.updateBuffer(opts);\n    if (updated) {\n      this.needsRedraw = true;\n      debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n    }\n  }\n}\n"],"file":"attribute-manager.js"}