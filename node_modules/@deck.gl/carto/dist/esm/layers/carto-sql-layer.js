import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import CartoLayer from './carto-layer';
import { getMapTileJSON } from '../api/maps-api-client';
var defaultProps = {
  version: '1.3.1',
  bufferSize: 1,
  tileExtent: 4096,
  uniqueIdProperty: 'cartodb_id'
};

var CartoSQLLayer = function (_CartoLayer) {
  _inherits(CartoSQLLayer, _CartoLayer);

  var _super = _createSuper(CartoSQLLayer);

  function CartoSQLLayer() {
    _classCallCheck(this, CartoSQLLayer);

    return _super.apply(this, arguments);
  }

  _createClass(CartoSQLLayer, [{
    key: "_updateTileJSON",
    value: function () {
      var _updateTileJSON2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        var tilejson;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getMapTileJSON(this.props);

              case 2:
                tilejson = _context.sent;
                this.setState({
                  tilejson: tilejson
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _updateTileJSON() {
        return _updateTileJSON2.apply(this, arguments);
      }

      return _updateTileJSON;
    }()
  }]);

  return CartoSQLLayer;
}(CartoLayer);

export { CartoSQLLayer as default };
CartoSQLLayer.layerName = 'CartoSQLLayer';
CartoSQLLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-sql-layer.js.map