import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { CompositeLayer } from '@deck.gl/core';
import { MVTLayer } from '@deck.gl/geo-layers';
var defaultProps = {
  data: null,
  credentials: null
};

var CartoLayer = function (_CompositeLayer) {
  _inherits(CartoLayer, _CompositeLayer);

  var _super = _createSuper(CartoLayer);

  function CartoLayer() {
    _classCallCheck(this, CartoLayer);

    return _super.apply(this, arguments);
  }

  _createClass(CartoLayer, [{
    key: "initializeState",
    value: function initializeState() {
      this.state = {
        tilejson: null
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var changeFlags = _ref.changeFlags;
      var data = this.props.data;

      if (changeFlags.dataChanged && data) {
        this._updateTileJSON();
      }
    }
  }, {
    key: "_updateTileJSON",
    value: function () {
      var _updateTileJSON2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error("You must use one of the specific carto layers: BQ or SQL type");

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function _updateTileJSON() {
        return _updateTileJSON2.apply(this, arguments);
      }

      return _updateTileJSON;
    }()
  }, {
    key: "onHover",
    value: function onHover(info, pickingEvent) {
      var _this$getSubLayers = this.getSubLayers(),
          _this$getSubLayers2 = _slicedToArray(_this$getSubLayers, 1),
          mvtLayer = _this$getSubLayers2[0];

      return mvtLayer ? mvtLayer.onHover(info, pickingEvent) : _get(_getPrototypeOf(CartoLayer.prototype), "onHover", this).call(this, info, pickingEvent);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      if (!this.state.tilejson) return null;
      var updateTriggers = this.props.updateTriggers;
      return new MVTLayer(this.props, this.getSubLayerProps({
        id: 'mvt',
        data: this.state.tilejson.tiles,
        updateTriggers: updateTriggers
      }));
    }
  }]);

  return CartoLayer;
}(CompositeLayer);

export { CartoLayer as default };
CartoLayer.layerName = 'CartoLayer';
CartoLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-layer.js.map