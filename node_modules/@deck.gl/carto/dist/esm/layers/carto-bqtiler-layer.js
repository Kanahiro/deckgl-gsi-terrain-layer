import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import CartoLayer from './carto-layer';
var BQ_TILEJSON_ENDPOINT = 'https://us-central1-cartobq.cloudfunctions.net/tilejson';

var CartoBQTilerLayer = function (_CartoLayer) {
  _inherits(CartoBQTilerLayer, _CartoLayer);

  var _super = _createSuper(CartoBQTilerLayer);

  function CartoBQTilerLayer() {
    _classCallCheck(this, CartoBQTilerLayer);

    return _super.apply(this, arguments);
  }

  _createClass(CartoBQTilerLayer, [{
    key: "_updateTileJSON",
    value: function () {
      var _updateTileJSON2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        var response, tilejson;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetch("".concat(BQ_TILEJSON_ENDPOINT, "?t=").concat(this.props.data), {
                  headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json'
                  }
                });

              case 2:
                response = _context.sent;
                _context.next = 5;
                return response.json();

              case 5:
                tilejson = _context.sent;
                this.setState({
                  tilejson: tilejson
                });

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _updateTileJSON() {
        return _updateTileJSON2.apply(this, arguments);
      }

      return _updateTileJSON;
    }()
  }]);

  return CartoBQTilerLayer;
}(CartoLayer);

export { CartoBQTilerLayer as default };
CartoBQTilerLayer.layerName = 'CartoBQTilerLayer';
//# sourceMappingURL=carto-bqtiler-layer.js.map