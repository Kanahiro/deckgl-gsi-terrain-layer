{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["CompositeLayer","MVTLayer","defaultProps","data","credentials","CartoLayer","state","tilejson","changeFlags","props","dataChanged","_updateTileJSON","Error","info","pickingEvent","getSubLayers","mvtLayer","onHover","updateTriggers","getSubLayerProps","id","tiles","layerName"],"mappings":";;;;;;;;;;;;;;AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;;IAKqBC,U;;;;;;;;;;;;;sCACD;AAChB,WAAKC,KAAL,GAAa;AACXC,QAAAA,QAAQ,EAAE;AADC,OAAb;AAGD;;;sCAE0B;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAAA,UAClBL,IADkB,GACV,KAAKM,KADK,CAClBN,IADkB;;AAEzB,UAAIK,WAAW,CAACE,WAAZ,IAA2BP,IAA/B,EAAqC;AACnC,aAAKQ,eAAL;AACD;AACF;;;;;;;;;sBAGO,IAAIC,KAAJ,iE;;;;;;;;;;;;;;;;;;4BAGAC,I,EAAMC,Y,EAAc;AAAA,+BACP,KAAKC,YAAL,EADO;AAAA;AAAA,UACnBC,QADmB;;AAE1B,aAAOA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiBJ,IAAjB,EAAuBC,YAAvB,CAAH,2EAAwDD,IAAxD,EAA8DC,YAA9D,CAAf;AACD;;;mCAEc;AACb,UAAI,CAAC,KAAKR,KAAL,CAAWC,QAAhB,EAA0B,OAAO,IAAP;AADb,UAGNW,cAHM,GAGY,KAAKT,KAHjB,CAGNS,cAHM;AAKb,aAAO,IAAIjB,QAAJ,CACL,KAAKQ,KADA,EAEL,KAAKU,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,KADgB;AAEpBjB,QAAAA,IAAI,EAAE,KAAKG,KAAL,CAAWC,QAAX,CAAoBc,KAFN;AAGpBH,QAAAA,cAAc,EAAdA;AAHoB,OAAtB,CAFK,CAAP;AAQD;;;;EApCqClB,c;;SAAnBK,U;AAuCrBA,UAAU,CAACiB,SAAX,GAAuB,YAAvB;AACAjB,UAAU,CAACH,YAAX,GAA0BA,YAA1B","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nconst defaultProps = {\n  data: null,\n  credentials: null\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tilejson: null\n    };\n  }\n\n  updateState({changeFlags}) {\n    const {data} = this.props;\n    if (changeFlags.dataChanged && data) {\n      this._updateTileJSON();\n    }\n  }\n\n  async _updateTileJSON() {\n    throw new Error(`You must use one of the specific carto layers: BQ or SQL type`);\n  }\n\n  onHover(info, pickingEvent) {\n    const [mvtLayer] = this.getSubLayers();\n    return mvtLayer ? mvtLayer.onHover(info, pickingEvent) : super.onHover(info, pickingEvent);\n  }\n\n  renderLayers() {\n    if (!this.state.tilejson) return null;\n\n    const {updateTriggers} = this.props;\n\n    return new MVTLayer(\n      this.props,\n      this.getSubLayerProps({\n        id: 'mvt',\n        data: this.state.tilejson.tiles,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}