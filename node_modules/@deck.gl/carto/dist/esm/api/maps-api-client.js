import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { getDefaultCredentials } from '../auth';
var DEFAULT_USER_COMPONENT_IN_URL = '{user}';
var REQUEST_GET_MAX_URL_LENGTH = 2048;
export function getMapTileJSON(_x) {
  return _getMapTileJSON.apply(this, arguments);
}

function _getMapTileJSON() {
  _getMapTileJSON = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(props) {
    var data, bufferSize, version, tileExtent, credentials, creds, mapConfig, layergroup, tiles;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = props.data, bufferSize = props.bufferSize, version = props.version, tileExtent = props.tileExtent, credentials = props.credentials;
            creds = _objectSpread(_objectSpread({}, getDefaultCredentials()), credentials);
            mapConfig = createMapConfig({
              data: data,
              bufferSize: bufferSize,
              version: version,
              tileExtent: tileExtent
            });
            _context.next = 5;
            return instantiateMap({
              mapConfig: mapConfig,
              credentials: creds
            });

          case 5:
            layergroup = _context.sent;
            tiles = layergroup.metadata.tilejson.vector;
            return _context.abrupt("return", tiles);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getMapTileJSON.apply(this, arguments);
}

function createMapConfig(_ref) {
  var data = _ref.data,
      bufferSize = _ref.bufferSize,
      version = _ref.version,
      tileExtent = _ref.tileExtent;
  var isSQL = data.search(' ') > -1;
  var sql = isSQL ? data : "SELECT * FROM ".concat(data);
  var mapConfig = {
    version: version,
    buffersize: {
      mvt: bufferSize
    },
    layers: [{
      type: 'mapnik',
      options: {
        sql: sql.trim(),
        vector_extent: tileExtent
      }
    }]
  };
  return mapConfig;
}

function instantiateMap(_x2) {
  return _instantiateMap.apply(this, arguments);
}

function _instantiateMap() {
  _instantiateMap = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(_ref2) {
    var mapConfig, credentials, response, config, request, layergroup;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mapConfig = _ref2.mapConfig, credentials = _ref2.credentials;
            _context2.prev = 1;
            config = JSON.stringify(mapConfig);
            request = createMapsApiRequest({
              config: config,
              credentials: credentials
            });
            _context2.next = 6;
            return fetch(request);

          case 6:
            response = _context2.sent;
            _context2.next = 12;
            break;

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](1);
            throw new Error("Failed to connect to Maps API: ".concat(_context2.t0));

          case 12:
            _context2.next = 14;
            return response.json();

          case 14:
            layergroup = _context2.sent;

            if (!response.ok) {
              dealWithWindshaftError({
                response: response,
                layergroup: layergroup,
                credentials: credentials
              });
            }

            return _context2.abrupt("return", layergroup);

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 9]]);
  }));
  return _instantiateMap.apply(this, arguments);
}

function dealWithWindshaftError(_ref3) {
  var response = _ref3.response,
      layergroup = _ref3.layergroup,
      credentials = _ref3.credentials;

  switch (response.status) {
    case 401:
      throw new Error("Unauthorized access to Maps API: invalid combination of user ('".concat(credentials.username, "') and apiKey ('").concat(credentials.apiKey, "')"));

    case 403:
      throw new Error("Unauthorized access to dataset: the provided apiKey('".concat(credentials.apiKey, "') doesn't provide access to the requested data"));

    default:
      throw new Error("".concat(JSON.stringify(layergroup.errors)));
  }
}

function createMapsApiRequest(_ref4) {
  var config = _ref4.config,
      credentials = _ref4.credentials;
  var encodedApiKey = encodeParameter('api_key', credentials.apiKey);
  var encodedClient = encodeParameter('client', "deck-gl-carto");
  var parameters = [encodedApiKey, encodedClient];
  var url = generateMapsApiUrl(parameters, credentials);
  var getUrl = "".concat(url, "&").concat(encodeParameter('config', config));

  if (getUrl.length < REQUEST_GET_MAX_URL_LENGTH) {
    return getRequest(getUrl);
  }

  return postRequest(url, config);
}

function generateMapsApiUrl(parameters, credentials) {
  var base = "".concat(serverURL(credentials), "api/v1/map");
  return "".concat(base, "?").concat(parameters.join('&'));
}

function serverURL(credentials) {
  var url = credentials.serverUrlTemplate.replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username);

  if (!url.endsWith('/')) {
    url += '/';
  }

  return url;
}

function getRequest(url) {
  return new Request(url, {
    method: 'GET',
    headers: {
      Accept: 'application/json'
    }
  });
}

function postRequest(url, payload) {
  return new Request(url, {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    },
    body: payload
  });
}

function encodeParameter(name, value) {
  return "".concat(name, "=").concat(encodeURIComponent(value));
}
//# sourceMappingURL=maps-api-client.js.map