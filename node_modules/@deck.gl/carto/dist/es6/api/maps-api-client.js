import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { getDefaultCredentials } from '../auth';
const DEFAULT_USER_COMPONENT_IN_URL = '{user}';
const REQUEST_GET_MAX_URL_LENGTH = 2048;
export async function getMapTileJSON(props) {
  const {
    data,
    bufferSize,
    version,
    tileExtent,
    credentials
  } = props;

  const creds = _objectSpread(_objectSpread({}, getDefaultCredentials()), credentials);

  const mapConfig = createMapConfig({
    data,
    bufferSize,
    version,
    tileExtent
  });
  const layergroup = await instantiateMap({
    mapConfig,
    credentials: creds
  });
  const tiles = layergroup.metadata.tilejson.vector;
  return tiles;
}

function createMapConfig({
  data,
  bufferSize,
  version,
  tileExtent
}) {
  const isSQL = data.search(' ') > -1;
  const sql = isSQL ? data : "SELECT * FROM ".concat(data);
  const mapConfig = {
    version,
    buffersize: {
      mvt: bufferSize
    },
    layers: [{
      type: 'mapnik',
      options: {
        sql: sql.trim(),
        vector_extent: tileExtent
      }
    }]
  };
  return mapConfig;
}

async function instantiateMap({
  mapConfig,
  credentials
}) {
  let response;

  try {
    const config = JSON.stringify(mapConfig);
    const request = createMapsApiRequest({
      config,
      credentials
    });
    response = await fetch(request);
  } catch (error) {
    throw new Error("Failed to connect to Maps API: ".concat(error));
  }

  const layergroup = await response.json();

  if (!response.ok) {
    dealWithWindshaftError({
      response,
      layergroup,
      credentials
    });
  }

  return layergroup;
}

function dealWithWindshaftError({
  response,
  layergroup,
  credentials
}) {
  switch (response.status) {
    case 401:
      throw new Error("Unauthorized access to Maps API: invalid combination of user ('".concat(credentials.username, "') and apiKey ('").concat(credentials.apiKey, "')"));

    case 403:
      throw new Error("Unauthorized access to dataset: the provided apiKey('".concat(credentials.apiKey, "') doesn't provide access to the requested data"));

    default:
      throw new Error("".concat(JSON.stringify(layergroup.errors)));
  }
}

function createMapsApiRequest({
  config,
  credentials
}) {
  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);
  const encodedClient = encodeParameter('client', "deck-gl-carto");
  const parameters = [encodedApiKey, encodedClient];
  const url = generateMapsApiUrl(parameters, credentials);
  const getUrl = "".concat(url, "&").concat(encodeParameter('config', config));

  if (getUrl.length < REQUEST_GET_MAX_URL_LENGTH) {
    return getRequest(getUrl);
  }

  return postRequest(url, config);
}

function generateMapsApiUrl(parameters, credentials) {
  const base = "".concat(serverURL(credentials), "api/v1/map");
  return "".concat(base, "?").concat(parameters.join('&'));
}

function serverURL(credentials) {
  let url = credentials.serverUrlTemplate.replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username);

  if (!url.endsWith('/')) {
    url += '/';
  }

  return url;
}

function getRequest(url) {
  return new Request(url, {
    method: 'GET',
    headers: {
      Accept: 'application/json'
    }
  });
}

function postRequest(url, payload) {
  return new Request(url, {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    },
    body: payload
  });
}

function encodeParameter(name, value) {
  return "".concat(name, "=").concat(encodeURIComponent(value));
}
//# sourceMappingURL=maps-api-client.js.map