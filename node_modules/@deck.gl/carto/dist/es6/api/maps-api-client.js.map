{"version":3,"sources":["../../../src/api/maps-api-client.js"],"names":["getDefaultCredentials","DEFAULT_USER_COMPONENT_IN_URL","REQUEST_GET_MAX_URL_LENGTH","getMapTileJSON","props","data","bufferSize","version","tileExtent","credentials","creds","mapConfig","createMapConfig","layergroup","instantiateMap","tiles","metadata","tilejson","vector","isSQL","search","sql","buffersize","mvt","layers","type","options","trim","vector_extent","response","config","JSON","stringify","request","createMapsApiRequest","fetch","error","Error","json","ok","dealWithWindshaftError","status","username","apiKey","errors","encodedApiKey","encodeParameter","encodedClient","parameters","url","generateMapsApiUrl","getUrl","length","getRequest","postRequest","base","serverURL","join","serverUrlTemplate","replace","endsWith","Request","method","headers","Accept","payload","body","name","value","encodeURIComponent"],"mappings":"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","sourcesContent":["import {getDefaultCredentials} from '../auth';\n\nconst DEFAULT_USER_COMPONENT_IN_URL = '{user}';\nconst REQUEST_GET_MAX_URL_LENGTH = 2048;\n\n/**\n * Obtain a TileJson from Maps API v1\n */\nexport async function getMapTileJSON(props) {\n  const {data, bufferSize, version, tileExtent, credentials} = props;\n  const creds = {...getDefaultCredentials(), ...credentials};\n\n  const mapConfig = createMapConfig({data, bufferSize, version, tileExtent});\n  const layergroup = await instantiateMap({mapConfig, credentials: creds});\n\n  const tiles = layergroup.metadata.tilejson.vector;\n  return tiles;\n}\n\n/**\n * Create a mapConfig for Maps API\n */\nfunction createMapConfig({data, bufferSize, version, tileExtent}) {\n  const isSQL = data.search(' ') > -1;\n  const sql = isSQL ? data : `SELECT * FROM ${data}`;\n\n  const mapConfig = {\n    version,\n    buffersize: {\n      mvt: bufferSize\n    },\n    layers: [\n      {\n        type: 'mapnik',\n        options: {\n          sql: sql.trim(),\n          vector_extent: tileExtent\n        }\n      }\n    ]\n  };\n  return mapConfig;\n}\n\n/**\n * Instantiate a map, either by GET or POST, using Maps API\n */\nasync function instantiateMap({mapConfig, credentials}) {\n  let response;\n\n  try {\n    const config = JSON.stringify(mapConfig);\n    const request = createMapsApiRequest({config, credentials});\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(request);\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const layergroup = await response.json();\n\n  if (!response.ok) {\n    dealWithWindshaftError({response, layergroup, credentials});\n  }\n\n  return layergroup;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithWindshaftError({response, layergroup, credentials}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${\n          credentials.username\n        }') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${\n          credentials.apiKey\n        }') doesn't provide access to the requested data`\n      );\n    default:\n      throw new Error(`${JSON.stringify(layergroup.errors)}`);\n  }\n}\n\n/**\n * Create a GET or POST request, with all required parameters\n */\nfunction createMapsApiRequest({config, credentials}) {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', `deck-gl-carto`);\n  const parameters = [encodedApiKey, encodedClient];\n  const url = generateMapsApiUrl(parameters, credentials);\n\n  const getUrl = `${url}&${encodeParameter('config', config)}`;\n  if (getUrl.length < REQUEST_GET_MAX_URL_LENGTH) {\n    return getRequest(getUrl);\n  }\n\n  return postRequest(url, config);\n}\n\n/**\n * Generate a Maps API url for the request\n */\nfunction generateMapsApiUrl(parameters, credentials) {\n  const base = `${serverURL(credentials)}api/v1/map`;\n  return `${base}?${parameters.join('&')}`;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction serverURL(credentials) {\n  let url = credentials.serverUrlTemplate.replace(\n    DEFAULT_USER_COMPONENT_IN_URL,\n    credentials.username\n  );\n\n  if (!url.endsWith('/')) {\n    url += '/';\n  }\n\n  return url;\n}\n\n/**\n * Simple GET request\n */\nfunction getRequest(url) {\n  /* global Request */\n  /* eslint no-undef: \"error\" */\n  return new Request(url, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json'\n    }\n  });\n}\n\n/**\n * Simple POST request\n */\nfunction postRequest(url, payload) {\n  return new Request(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: payload\n  });\n}\n\n/**\n * Simple encode parameter\n */\nfunction encodeParameter(name, value) {\n  return `${name}=${encodeURIComponent(value)}`;\n}\n"],"file":"maps-api-client.js"}