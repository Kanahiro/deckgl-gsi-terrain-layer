{"version":3,"sources":["../../../src/fill-style/shaders.glsl.js"],"names":["patternVs","patternFs","inject","getPatternUniforms","opts","uniforms","fillPatternTexture","fill_patternTexture","fill_patternTextureSize","width","height","viewport","fillPatternMask","fillPatternEnabled","project_uCoordinateOrigin","project_uCoordinateSystem","coordinateOriginCommon","COORDINATE_SYSTEM","CARTESIAN","projectPosition","fill_uvCoordinateOrigin","slice","fill_patternMask","fill_patternEnabled","patternShaders","name","vs","fs","dependencies","project","getUniforms"],"mappings":";;;;;;;AAAA;;AAKA,IAAMA,SAAS,ysBAAf;AAuBA,IAAMC,SAAS,4SAAf;AAaA,IAAMC,MAAM,GAAG;AACb,6EADa;AAKb,iVALa;AAab;AAba,CAAf;;AAgCA,SAASC,kBAAT,GAAiD;AAAA,MAArBC,IAAqB,uEAAd,EAAc;AAAA,MAAVC,QAAU;;AAC/C,MAAI,wBAAwBD,IAA5B,EAAkC;AAAA,QACzBE,kBADyB,GACHF,IADG,CACzBE,kBADyB;AAEhC,WAAO;AACLC,MAAAA,mBAAmB,EAAED,kBADhB;AAELE,MAAAA,uBAAuB,EAAE,CAACF,kBAAkB,CAACG,KAApB,EAA2BH,kBAAkB,CAACI,MAA9C;AAFpB,KAAP;AAID;;AACD,MAAIN,IAAI,CAACO,QAAT,EAAmB;AAAA,QACVA,QADU,GACqDP,IADrD,CACVO,QADU;AAAA,gCACqDP,IADrD,CACAQ,eADA;AAAA,QACAA,eADA,sCACkB,IADlB;AAAA,gCACqDR,IADrD,CACwBS,kBADxB;AAAA,QACwBA,kBADxB,sCAC6C,IAD7C;AAAA,QAEVC,yBAFU,GAE8CT,QAF9C,CAEVS,yBAFU;AAAA,QAEiBC,yBAFjB,GAE8CV,QAF9C,CAEiBU,yBAFjB;AAIjB,QAAMC,sBAAsB,GAC1BD,yBAAyB,KAAKE,wBAAkBC,SAAhD,GACIJ,yBADJ,GAEIH,QAAQ,CAACQ,eAAT,CAAyBL,yBAAzB,CAHN;AAKA,WAAO;AACLM,MAAAA,uBAAuB,EAAEJ,sBAAsB,CAACK,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CADpB;AAELC,MAAAA,gBAAgB,EAAEV,eAFb;AAGLW,MAAAA,mBAAmB,EAAEV;AAHhB,KAAP;AAKD;;AACD,SAAO,EAAP;AACD;;AAEM,IAAMW,cAAc,GAAG;AAC5BC,EAAAA,IAAI,EAAE,cADsB;AAE5BC,EAAAA,EAAE,EAAE1B,SAFwB;AAG5B2B,EAAAA,EAAE,EAAE1B,SAHwB;AAI5BC,EAAAA,MAAM,EAANA,MAJ4B;AAK5B0B,EAAAA,YAAY,EAAE,CAACC,aAAD,CALc;AAM5BC,EAAAA,WAAW,EAAE3B;AANe,CAAvB","sourcesContent":["import {project, COORDINATE_SYSTEM} from '@deck.gl/core';\n\n/*\n * fill pattern shader module\n */\nconst patternVs = `\n#ifdef NON_INSTANCED_MODEL\n  #define FILL_PATTERN_FRAME_ATTRIB fillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB fillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB fillPatternOffsets\n#else\n  #define FILL_PATTERN_FRAME_ATTRIB instanceFillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB instanceFillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB instanceFillPatternOffsets\n#endif\n\nattribute vec4 FILL_PATTERN_FRAME_ATTRIB;\nattribute float FILL_PATTERN_SCALE_ATTRIB;\nattribute vec2 FILL_PATTERN_OFFSET_ATTRIB;\n\nuniform bool fill_patternEnabled;\nuniform vec2 fill_patternTextureSize;\n\nvarying vec2 fill_uv;\nvarying vec4 fill_patternBounds;\nvarying vec3 fill_patternPlacement;\n`;\n\nconst patternFs = `\nuniform bool fill_patternEnabled;\nuniform bool fill_patternMask;\nuniform sampler2D fill_patternTexture;\nuniform vec2 fill_uvCoordinateOrigin;\n\nvarying vec4 fill_patternBounds;\nvarying vec3 fill_patternPlacement;\nvarying vec2 fill_uv;\n\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\n`;\n\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': `\n    fill_uv = geometry.position.xy;\n  `,\n\n  'vs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      fill_patternBounds = FILL_PATTERN_FRAME_ATTRIB / vec4(fill_patternTextureSize, fill_patternTextureSize);\n      fill_patternPlacement.xy = FILL_PATTERN_OFFSET_ATTRIB;\n      fill_patternPlacement.z = FILL_PATTERN_SCALE_ATTRIB * FILL_PATTERN_FRAME_ATTRIB.w;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      float scale = FILL_UV_SCALE * fill_patternPlacement.z;\n      vec2 patternUV = mod(mod(fill_uvCoordinateOrigin, scale) + fill_uv, scale) / scale;\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\n\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\n      texCoords.y = 1.0 - texCoords.y;\n\n      vec4 patternColor = texture2D(fill_patternTexture, texCoords);\n      if (fill_patternMask) {\n        color.a *= patternColor.a;\n      } else {\n        color.rgb = patternColor.rgb;\n      }\n    }\n  `\n};\n\nfunction getPatternUniforms(opts = {}, uniforms) {\n  if ('fillPatternTexture' in opts) {\n    const {fillPatternTexture} = opts;\n    return {\n      fill_patternTexture: fillPatternTexture,\n      fill_patternTextureSize: [fillPatternTexture.width, fillPatternTexture.height]\n    };\n  }\n  if (opts.viewport) {\n    const {viewport, fillPatternMask = true, fillPatternEnabled = true} = opts;\n    const {project_uCoordinateOrigin, project_uCoordinateSystem} = uniforms;\n\n    const coordinateOriginCommon =\n      project_uCoordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n        ? project_uCoordinateOrigin\n        : viewport.projectPosition(project_uCoordinateOrigin);\n\n    return {\n      fill_uvCoordinateOrigin: coordinateOriginCommon.slice(0, 2),\n      fill_patternMask: fillPatternMask,\n      fill_patternEnabled: fillPatternEnabled\n    };\n  }\n  return {};\n}\n\nexport const patternShaders = {\n  name: 'fill-pattern',\n  vs: patternVs,\n  fs: patternFs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms\n};\n"],"file":"shaders.glsl.js"}