{"version":3,"sources":["../../../src/data-filter/aggregator.js"],"names":["AGGREGATE_VS","AGGREGATE_FS","supportsFloatTarget","gl","getExtension","getFramebuffer","useFloatTarget","Framebuffer","width","height","attachments","Texture2D","format","type","mipmaps","depth","getModel","shaderOptions","defines","NON_INSTANCED_MODEL","FLOAT_TARGET","Model","id","vertexCount","isInstanced","drawMode","vs","fs","parameters","blend","blendFunc","blendEquation","depthTest"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAGA,IAAMA,YAAY,89BAAlB;AAiCA,IAAMC,YAAY,wMAAlB;;AAcO,SAASC,mBAAT,CAA6BC,EAA7B,EAAiC;AAEtC,SACEA,EAAE,CAACC,YAAH,CAAgB,iBAAhB,MAECD,EAAE,CAACC,YAAH,CAAgB,wBAAhB,KAECD,EAAE,CAACC,YAAH,CAAgB,0BAAhB,CAJF,CADF;AAOD;;AAGM,SAASC,cAAT,CAAwBF,EAAxB,EAA4BG,cAA5B,EAA4C;AACjD,MAAIA,cAAJ,EAAoB;AAClB,WAAO,IAAIC,iBAAJ,CAAgBJ,EAAhB,EAAoB;AACzBK,MAAAA,KAAK,EAAE,CADkB;AAEzBC,MAAAA,MAAM,EAAE,CAFiB;AAGzBC,MAAAA,WAAW,8CACe,IAAIC,eAAJ,CAAcR,EAAd,EAAkB;AACxCS,QAAAA,MAAM,EAAE,oBAAST,EAAT,gBADgC;AAExCU,QAAAA,IAAI,MAFoC;AAGxCC,QAAAA,OAAO,EAAE;AAH+B,OAAlB,CADf;AAHc,KAApB,CAAP;AAWD;;AACD,SAAO,IAAIP,iBAAJ,CAAgBJ,EAAhB,EAAoB;AACzBK,IAAAA,KAAK,EAAE,GADkB;AAEzBC,IAAAA,MAAM,EAAE,EAFiB;AAGzBM,IAAAA,KAAK,EAAE;AAHkB,GAApB,CAAP;AAKD;;AAGM,SAASC,QAAT,CAAkBb,EAAlB,EAAsBc,aAAtB,EAAqCX,cAArC,EAAqD;AAC1DW,EAAAA,aAAa,CAACC,OAAd,CAAsBC,mBAAtB,GAA4C,CAA5C;;AACA,MAAIb,cAAJ,EAAoB;AAClBW,IAAAA,aAAa,CAACC,OAAd,CAAsBE,YAAtB,GAAqC,CAArC;AACD;;AAED,SAAO,IAAIC,WAAJ,CAAUlB,EAAV;AACLmB,IAAAA,EAAE,EAAE,+BADC;AAELC,IAAAA,WAAW,EAAE,CAFR;AAGLC,IAAAA,WAAW,EAAE,KAHR;AAILC,IAAAA,QAAQ,GAJH;AAKLC,IAAAA,EAAE,EAAE1B,YALC;AAML2B,IAAAA,EAAE,EAAE1B;AANC,KAOFgB,aAPE,EAAP;AASD;;AAEM,IAAMW,UAAU,GAAG;AACxBC,EAAAA,KAAK,EAAE,IADiB;AAExBC,EAAAA,SAAS,EAAE,YAFa;AAGxBC,EAAAA,aAAa,EAAE,cAHS;AAIxBC,EAAAA,SAAS,EAAE;AAJa,CAAnB","sourcesContent":["import {Model, Texture2D, Framebuffer, isWebGL2} from '@luma.gl/core';\r\nimport GL from '@luma.gl/constants';\r\n\r\nconst AGGREGATE_VS = `\\\r\n#define SHADER_NAME data-filter-vertex-shader\r\n\r\n#ifdef FLOAT_TARGET\r\n  attribute float filterIndices;\r\n  attribute float filterPrevIndices;\r\n#else\r\n  attribute vec2 filterIndices;\r\n  attribute vec2 filterPrevIndices;\r\n#endif\r\n\r\nvarying vec4 vColor;\r\nconst float component = 1.0 / 255.0;\r\n\r\nvoid main() {\r\n  #ifdef FLOAT_TARGET\r\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\r\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\r\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n  #else\r\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\r\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\r\n    float col = filterIndices.x;\r\n    float row = filterIndices.y * 4.0;\r\n    float channel = floor(row);\r\n    row = fract(row);\r\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\r\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\r\n  #endif\r\n  gl_PointSize = 1.0;\r\n}\r\n`;\r\n\r\nconst AGGREGATE_FS = `\\\r\n#define SHADER_NAME data-filter-fragment-shader\r\nprecision highp float;\r\n\r\nvarying vec4 vColor;\r\n\r\nvoid main() {\r\n  if (dataFilter_value < 0.5) {\r\n    discard;\r\n  }\r\n  gl_FragColor = vColor;\r\n}\r\n`;\r\n\r\nexport function supportsFloatTarget(gl) {\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#Support_for_float_textures_doesnt_mean_you_can_render_into_them!\r\n  return (\r\n    gl.getExtension('EXT_float_blend') &&\r\n    // WebGL 2\r\n    (gl.getExtension('EXT_color_buffer_float') ||\r\n      // WebGL 1\r\n      gl.getExtension('WEBGL_color_buffer_float'))\r\n  );\r\n}\r\n\r\n// A 1x1 framebuffer object that encodes the total count of filtered items\r\nexport function getFramebuffer(gl, useFloatTarget) {\r\n  if (useFloatTarget) {\r\n    return new Framebuffer(gl, {\r\n      width: 1,\r\n      height: 1,\r\n      attachments: {\r\n        [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\r\n          format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\r\n          type: GL.FLOAT,\r\n          mipmaps: false\r\n        })\r\n      }\r\n    });\r\n  }\r\n  return new Framebuffer(gl, {\r\n    width: 256,\r\n    height: 64,\r\n    depth: false\r\n  });\r\n}\r\n\r\n// Increments the counter based on dataFilter_value\r\nexport function getModel(gl, shaderOptions, useFloatTarget) {\r\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\r\n  if (useFloatTarget) {\r\n    shaderOptions.defines.FLOAT_TARGET = 1;\r\n  }\r\n\r\n  return new Model(gl, {\r\n    id: 'data-filter-aggregation-model',\r\n    vertexCount: 1,\r\n    isInstanced: false,\r\n    drawMode: GL.POINTS,\r\n    vs: AGGREGATE_VS,\r\n    fs: AGGREGATE_FS,\r\n    ...shaderOptions\r\n  });\r\n}\r\n\r\nexport const parameters = {\r\n  blend: true,\r\n  blendFunc: [GL.ONE, GL.ONE, GL.ONE, GL.ONE],\r\n  blendEquation: [GL.FUNC_ADD, GL.FUNC_ADD],\r\n  depthTest: false\r\n};\r\n"],"file":"aggregator.js"}