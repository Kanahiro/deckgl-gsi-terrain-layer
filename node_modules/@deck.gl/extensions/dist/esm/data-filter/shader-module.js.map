{"version":3,"sources":["../../../src/data-filter/shader-module.js"],"names":["vs","fs","getUniforms","opts","extensions","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","uniforms","Number","isFinite","filter_min","filter_softMin","filter_softMax","filter_max","map","r","filter_enabled","filter_useSoftMargin","Boolean","filter_transformSize","filter_transformColor","getUniforms64","min64High","Math","fround","filter_min64High","max64High","filter_max64High","x","i","inject","shaderModule","name","shaderModule64"],"mappings":"AAGA,IAAMA,EAAE,uoDAAR;AAyDA,IAAMC,EAAE,6EAAR;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI,EAAI;AAC1B,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,UAAnB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAHyB,0BAStBD,IATsB,CAKxBE,WALwB;AAAA,MAKxBA,WALwB,kCAKV,CAAC,CAAC,CAAF,EAAK,CAAL,CALU;AAAA,4BAStBF,IATsB,CAMxBG,aANwB;AAAA,MAMxBA,aANwB,oCAMR,IANQ;AAAA,8BAStBH,IATsB,CAOxBI,mBAPwB;AAAA,MAOxBA,mBAPwB,sCAOF,IAPE;AAAA,+BAStBJ,IATsB,CAQxBK,oBARwB;AAAA,MAQxBA,oBARwB,uCAQD,IARC;AAU1B,MAAMC,eAAe,GAAGN,IAAI,CAACM,eAAL,IAAwBJ,WAAhD;AAEA,MAAMK,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBP,WAAW,CAAC,CAAD,CAA3B,IACb;AACEQ,IAAAA,UAAU,EAAER,WAAW,CAAC,CAAD,CADzB;AAEES,IAAAA,cAAc,EAAEL,eAAe,CAAC,CAAD,CAFjC;AAGEM,IAAAA,cAAc,EAAEN,eAAe,CAAC,CAAD,CAHjC;AAIEO,IAAAA,UAAU,EAAEX,WAAW,CAAC,CAAD;AAJzB,GADa,GAOb;AACEQ,IAAAA,UAAU,EAAER,WAAW,CAACY,GAAZ,CAAgB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAAjB,CADd;AAEEJ,IAAAA,cAAc,EAAEL,eAAe,CAACQ,GAAhB,CAAoB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAArB,CAFlB;AAGEH,IAAAA,cAAc,EAAEN,eAAe,CAACQ,GAAhB,CAAoB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAArB,CAHlB;AAIEF,IAAAA,UAAU,EAAEX,WAAW,CAACY,GAAZ,CAAgB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAAjB;AAJd,GAPJ;AAaAR,EAAAA,QAAQ,CAACS,cAAT,GAA0Bb,aAA1B;AACAI,EAAAA,QAAQ,CAACU,oBAAT,GAAgCC,OAAO,CAAClB,IAAI,CAACM,eAAN,CAAvC;AACAC,EAAAA,QAAQ,CAACY,oBAAT,GAAgChB,aAAa,IAAIC,mBAAjD;AACAG,EAAAA,QAAQ,CAACa,qBAAT,GAAiCjB,aAAa,IAAIE,oBAAlD;AAEA,SAAOE,QAAP;AACD,CA/BD;;AAiCA,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,CAAArB,IAAI,EAAI;AAC5B,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,UAAnB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AACD,MAAMM,QAAQ,GAAGR,WAAW,CAACC,IAAD,CAA5B;;AACA,MAAIQ,MAAM,CAACC,QAAP,CAAgBF,QAAQ,CAACG,UAAzB,CAAJ,EAA0C;AACxC,QAAMY,SAAS,GAAGC,IAAI,CAACC,MAAL,CAAYjB,QAAQ,CAACG,UAArB,CAAlB;AACAH,IAAAA,QAAQ,CAACG,UAAT,IAAuBY,SAAvB;AACAf,IAAAA,QAAQ,CAACI,cAAT,IAA2BW,SAA3B;AACAf,IAAAA,QAAQ,CAACkB,gBAAT,GAA4BH,SAA5B;AAEA,QAAMI,SAAS,GAAGH,IAAI,CAACC,MAAL,CAAYjB,QAAQ,CAACM,UAArB,CAAlB;AACAN,IAAAA,QAAQ,CAACM,UAAT,IAAuBa,SAAvB;AACAnB,IAAAA,QAAQ,CAACK,cAAT,IAA2Bc,SAA3B;AACAnB,IAAAA,QAAQ,CAACoB,gBAAT,GAA4BD,SAA5B;AACD,GAVD,MAUO;AACL,QAAMJ,UAAS,GAAGf,QAAQ,CAACG,UAAT,CAAoBI,GAApB,CAAwBS,IAAI,CAACC,MAA7B,CAAlB;;AACAjB,IAAAA,QAAQ,CAACG,UAAT,GAAsBH,QAAQ,CAACG,UAAT,CAAoBI,GAApB,CAAwB,UAACc,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGN,UAAS,CAACO,CAAD,CAAvB;AAAA,KAAxB,CAAtB;AACAtB,IAAAA,QAAQ,CAACI,cAAT,GAA0BJ,QAAQ,CAACI,cAAT,CAAwBG,GAAxB,CAA4B,UAACc,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGN,UAAS,CAACO,CAAD,CAAvB;AAAA,KAA5B,CAA1B;AACAtB,IAAAA,QAAQ,CAACkB,gBAAT,GAA4BH,UAA5B;;AAEA,QAAMI,UAAS,GAAGnB,QAAQ,CAACM,UAAT,CAAoBC,GAApB,CAAwBS,IAAI,CAACC,MAA7B,CAAlB;;AACAjB,IAAAA,QAAQ,CAACM,UAAT,GAAsBN,QAAQ,CAACM,UAAT,CAAoBC,GAApB,CAAwB,UAACc,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGF,UAAS,CAACG,CAAD,CAAvB;AAAA,KAAxB,CAAtB;AACAtB,IAAAA,QAAQ,CAACK,cAAT,GAA0BL,QAAQ,CAACK,cAAT,CAAwBE,GAAxB,CAA4B,UAACc,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGF,UAAS,CAACG,CAAD,CAAvB;AAAA,KAA5B,CAA1B;AACAtB,IAAAA,QAAQ,CAACoB,gBAAT,GAA4BD,UAA5B;AACD;;AACD,SAAOnB,QAAP;AACD,CA3BD;;AA6BA,IAAMuB,MAAM,GAAG;AACb,wUADa;AAYb,gHAZa;AAkBb;AAlBa,CAAf;AA0BA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,IAAI,EAAE,aADoB;AAE1BnC,EAAAA,EAAE,EAAFA,EAF0B;AAG1BC,EAAAA,EAAE,EAAFA,EAH0B;AAI1BgC,EAAAA,MAAM,EAANA,MAJ0B;AAK1B/B,EAAAA,WAAW,EAAXA;AAL0B,CAArB;AAQP,OAAO,IAAMkC,cAAc,GAAG;AAC5BD,EAAAA,IAAI,EAAE,kBADsB;AAE5BnC,EAAAA,EAAE,EAAFA,EAF4B;AAG5BC,EAAAA,EAAE,EAAFA,EAH4B;AAI5BgC,EAAAA,MAAM,EAANA,MAJ4B;AAK5B/B,EAAAA,WAAW,EAAEsB;AALe,CAAvB","sourcesContent":["/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  const uniforms = Number.isFinite(filterRange[0])\n    ? {\n        filter_min: filterRange[0],\n        filter_softMin: filterSoftRange[0],\n        filter_softMax: filterSoftRange[1],\n        filter_max: filterRange[1]\n      }\n    : {\n        filter_min: filterRange.map(r => r[0]),\n        filter_softMin: filterSoftRange.map(r => r[0]),\n        filter_softMax: filterSoftRange.map(r => r[1]),\n        filter_max: filterRange.map(r => r[1])\n      };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n\n  return uniforms;\n};\n\nconst getUniforms64 = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n};\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n"],"file":"shader-module.js"}