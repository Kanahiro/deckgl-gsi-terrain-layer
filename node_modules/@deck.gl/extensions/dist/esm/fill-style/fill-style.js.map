{"version":3,"sources":["../../../src/fill-style/fill-style.js"],"names":["LayerExtension","Texture2D","patternShaders","defaultProps","fillPatternEnabled","fillPatternAtlas","fillPatternMapping","fillPatternMask","getFillPattern","type","value","d","pattern","getFillPatternScale","getFillPatternOffset","DEFAULT_TEXTURE_PARAMETERS","FillStyleExtension","layer","getAttributeManager","state","pathTesselator","extension","isEnabled","modules","opts","filter","Boolean","context","attributeManager","add","fillPatternFrames","size","accessor","transform","getPatternFrame","bind","shaderAttributes","divisor","instanceFillPatternFrames","fillPatternScales","defaultValue","instanceFillPatternScales","fillPatternOffsets","instanceFillPatternOffsets","setState","emptyTexture","gl","data","Uint8Array","width","height","props","oldProps","loadPatternAtlas","call","loadPatternMapping","params","patternTexture","setModuleParameters","fillPatternTexture","fetch","image","propName","parameters","patternMapping","invalidate","setNeedsUpdate","name","def","x","y","extensionName"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAAQC,SAAR,QAAwB,eAAxB;AAGA,SAAQC,cAAR,QAA6B,gBAA7B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,kBAAkB,EAAE,IADD;AAEnBC,EAAAA,gBAAgB,EAAE,IAFC;AAGnBC,EAAAA,kBAAkB,EAAE,IAHD;AAInBC,EAAAA,eAAe,EAAE,IAJE;AAKnBC,EAAAA,cAAc,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,OAAN;AAAA;AAA3B,GALG;AAMnBC,EAAAA,mBAAmB,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GANF;AAOnBI,EAAAA,oBAAoB,EAAE;AAACL,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B;AAPH,CAArB;AAUA,IAAMK,0BAA0B,4QAAhC;;IASqBC,kB;;;;;AACnB,gCAAoC;AAAA,mFAAJ,EAAI;AAAA,4BAAvBJ,OAAuB;AAAA,QAAvBA,OAAuB,6BAAb,KAAa;;AAAA;;AAAA,6BAC5B;AAACA,MAAAA,OAAO,EAAPA;AAAD,KAD4B;AAEnC;;;;8BAESK,K,EAAO;AACf,aAAOA,KAAK,CAACC,mBAAN,MAA+B,CAACD,KAAK,CAACE,KAAN,CAAYC,cAAnD;AACD;;;+BAEUC,S,EAAW;AACpB,UAAI,CAACA,SAAS,CAACC,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B,eAAO,IAAP;AACD;;AAED,aAAO;AACLC,QAAAA,OAAO,EAAE,CAACF,SAAS,CAACG,IAAV,CAAeZ,OAAf,IAA0BV,cAA3B,EAA2CuB,MAA3C,CAAkDC,OAAlD;AADJ,OAAP;AAGD;;;oCAEeC,O,EAASN,S,EAAW;AAClC,UAAI,CAACA,SAAS,CAACC,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAMM,gBAAgB,GAAG,KAAKV,mBAAL,EAAzB;;AAEA,UAAIG,SAAS,CAACG,IAAV,CAAeZ,OAAnB,EAA4B;AAC1BgB,QAAAA,gBAAgB,CAACC,GAAjB,CAAqB;AACnBC,UAAAA,iBAAiB,EAAE;AACjBC,YAAAA,IAAI,EAAE,CADW;AAEjBC,YAAAA,QAAQ,EAAE,gBAFO;AAGjBC,YAAAA,SAAS,EAAEZ,SAAS,CAACa,eAAV,CAA0BC,IAA1B,CAA+B,IAA/B,CAHM;AAIjBC,YAAAA,gBAAgB,EAAE;AAChBN,cAAAA,iBAAiB,EAAE;AACjBO,gBAAAA,OAAO,EAAE;AADQ,eADH;AAIhBC,cAAAA,yBAAyB,EAAE;AACzBD,gBAAAA,OAAO,EAAE;AADgB;AAJX;AAJD,WADA;AAcnBE,UAAAA,iBAAiB,EAAE;AACjBR,YAAAA,IAAI,EAAE,CADW;AAEjBC,YAAAA,QAAQ,EAAE,qBAFO;AAGjBQ,YAAAA,YAAY,EAAE,CAHG;AAIjBJ,YAAAA,gBAAgB,EAAE;AAChBG,cAAAA,iBAAiB,EAAE;AACjBF,gBAAAA,OAAO,EAAE;AADQ,eADH;AAIhBI,cAAAA,yBAAyB,EAAE;AACzBJ,gBAAAA,OAAO,EAAE;AADgB;AAJX;AAJD,WAdA;AA2BnBK,UAAAA,kBAAkB,EAAE;AAClBX,YAAAA,IAAI,EAAE,CADY;AAElBC,YAAAA,QAAQ,EAAE,sBAFQ;AAGlBI,YAAAA,gBAAgB,EAAE;AAChBM,cAAAA,kBAAkB,EAAE;AAClBL,gBAAAA,OAAO,EAAE;AADS,eADJ;AAIhBM,cAAAA,0BAA0B,EAAE;AAC1BN,gBAAAA,OAAO,EAAE;AADiB;AAJZ;AAHA;AA3BD,SAArB;AAwCD;;AACD,WAAKO,QAAL,CAAc;AACZC,QAAAA,YAAY,EAAE,IAAI5C,SAAJ,CAAc,KAAK0B,OAAL,CAAamB,EAA3B,EAA+B;AAC3CC,UAAAA,IAAI,EAAE,IAAIC,UAAJ,CAAe,CAAf,CADqC;AAE3CC,UAAAA,KAAK,EAAE,CAFoC;AAG3CC,UAAAA,MAAM,EAAE;AAHmC,SAA/B;AADF,OAAd;AAOD;;;uCAE8B7B,S,EAAW;AAAA,UAA7B8B,KAA6B,SAA7BA,KAA6B;AAAA,UAAtBC,QAAsB,SAAtBA,QAAsB;;AACxC,UAAI,CAAC/B,SAAS,CAACC,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAI6B,KAAK,CAAC9C,gBAAN,IAA0B8C,KAAK,CAAC9C,gBAAN,KAA2B+C,QAAQ,CAAC/C,gBAAlE,EAAoF;AAClFgB,QAAAA,SAAS,CAACgC,gBAAV,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCH,KAAtC;AACD;;AACD,UAAIA,KAAK,CAAC7C,kBAAN,IAA4B6C,KAAK,CAAC7C,kBAAN,KAA6B8C,QAAQ,CAAC9C,kBAAtE,EAA0F;AACxFe,QAAAA,SAAS,CAACkC,kBAAV,CAA6BD,IAA7B,CAAkC,IAAlC,EAAwCH,KAAxC;AACD;AACF;;;yBAEIK,M,EAAQnC,S,EAAW;AACtB,UAAI,CAACA,SAAS,CAACC,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B;AACD;;AAHqB,UAKfmC,cALe,GAKG,KAAKtC,KALR,CAKfsC,cALe;AAMtB,WAAKC,mBAAL,CAAyB;AACvBC,QAAAA,kBAAkB,EAAEF,cAAc,IAAI,KAAKtC,KAAL,CAAW0B;AAD1B,OAAzB;AAGD;;;oCAEe;AAAA,wBACyB,KAAK1B,KAD9B;AAAA,UACPsC,cADO,eACPA,cADO;AAAA,UACSZ,YADT,eACSA,YADT;;AAEd,UAAIY,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,UAAd;AACD;;AACD,UAAIZ,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,UAAZ;AACD;AACF;;;;;;;;;;AAEuBxC,gBAAAA,gB,SAAAA,gB,EAAkBuD,K,SAAAA,K;;AACxC,oBAAI,KAAKzC,KAAL,CAAWsC,cAAf,EAA+B;AAC7B,uBAAKtC,KAAL,CAAWsC,cAAX;AACD;;AACD,qBAAKb,QAAL,CAAc;AAACa,kBAAAA,cAAc,EAAE;AAAjB,iBAAd;AACII,gBAAAA,K,GAAQxD,gB;;sBACR,OAAOwD,KAAP,KAAiB,Q;;;;;;uBACLD,KAAK,CAACC,KAAD,EAAQ;AAACC,kBAAAA,QAAQ,EAAE,kBAAX;AAA+B7C,kBAAAA,KAAK,EAAE;AAAtC,iBAAR,C;;;AAAnB4C,gBAAAA,K;;;AAEIJ,gBAAAA,c,GACJI,KAAK,YAAY5D,SAAjB,GACI4D,KADJ,GAEI,IAAI5D,SAAJ,CAAc,KAAK0B,OAAL,CAAamB,EAA3B,EAA+B;AAC7BC,kBAAAA,IAAI,EAAEc,KADuB;AAE7BE,kBAAAA,UAAU,EAAEhD;AAFiB,iBAA/B,C;AAIN,qBAAK6B,QAAL,CAAc;AAACa,kBAAAA,cAAc,EAAdA;AAAD,iBAAd;;;;;;;;;;;;;;;;;;;;;;;;;AAGwBnD,gBAAAA,kB,SAAAA,kB,EAAoBsD,K,SAAAA,K;AAC5C,qBAAKhB,QAAL,CAAc;AAACoB,kBAAAA,cAAc,EAAE;AAAjB,iBAAd;AACIA,gBAAAA,c,GAAiB1D,kB;;sBACjB,OAAO0D,cAAP,KAA0B,Q;;;;;;uBACLJ,KAAK,CAACI,cAAD,EAAiB;AAC3CF,kBAAAA,QAAQ,EAAE,oBADiC;AAE3C7C,kBAAAA,KAAK,EAAE;AAFoC,iBAAjB,C;;;AAA5B+C,gBAAAA,c;;;AAKF,qBAAKpB,QAAL,CAAc;AAACoB,kBAAAA,cAAc,EAAdA;AAAD,iBAAd;AACA,qBAAK9C,mBAAL,GAA2B+C,UAA3B,CAAsC,gBAAtC;AACA,qBAAKC,cAAL;;;;;;;;;;;;;;;;;;oCAGcC,I,EAAM;AAAA,UACbH,cADa,GACK,KAAK7C,KADV,CACb6C,cADa;AAEpB,UAAMI,GAAG,GAAGJ,cAAc,IAAIA,cAAc,CAACG,IAAD,CAA5C;AACA,aAAOC,GAAG,GAAG,CAACA,GAAG,CAACC,CAAL,EAAQD,GAAG,CAACE,CAAZ,EAAeF,GAAG,CAACnB,KAAnB,EAA0BmB,GAAG,CAAClB,MAA9B,CAAH,GAA2C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAArD;AACD;;;;EApJ6ClD,c;;SAA3BgB,kB;AAuJrBA,kBAAkB,CAACuD,aAAnB,GAAmC,oBAAnC;AACAvD,kBAAkB,CAACb,YAAnB,GAAkCA,YAAlC","sourcesContent":["import {LayerExtension} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport {patternShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {type: 'accessor', value: d => d.pattern},\n  getFillPatternScale: {type: 'accessor', value: 1},\n  getFillPatternOffset: {type: 'accessor', value: [0, 0]}\n};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nexport default class FillStyleExtension extends LayerExtension {\n  constructor({pattern = false} = {}) {\n    super({pattern});\n  }\n\n  isEnabled(layer) {\n    return layer.getAttributeManager() && !layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n\n  initializeState(context, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (extension.opts.pattern) {\n      attributeManager.add({\n        fillPatternFrames: {\n          size: 4,\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this),\n          shaderAttributes: {\n            fillPatternFrames: {\n              divisor: 0\n            },\n            instanceFillPatternFrames: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternScales: {\n          size: 1,\n          accessor: 'getFillPatternScale',\n          defaultValue: 1,\n          shaderAttributes: {\n            fillPatternScales: {\n              divisor: 0\n            },\n            instanceFillPatternScales: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternOffsets: {\n          size: 2,\n          accessor: 'getFillPatternOffset',\n          shaderAttributes: {\n            fillPatternOffsets: {\n              divisor: 0\n            },\n            instanceFillPatternOffsets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps}, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n      extension.loadPatternAtlas.call(this, props);\n    }\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      extension.loadPatternMapping.call(this, props);\n    }\n  }\n\n  draw(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const {patternTexture} = this.state;\n    this.setModuleParameters({\n      fillPatternTexture: patternTexture || this.state.emptyTexture\n    });\n  }\n\n  finalizeState() {\n    const {patternTexture, emptyTexture} = this.state;\n    if (patternTexture) {\n      patternTexture.delete();\n    }\n    if (emptyTexture) {\n      emptyTexture.delete();\n    }\n  }\n\n  async loadPatternAtlas({fillPatternAtlas, fetch}) {\n    if (this.state.patternTexture) {\n      this.state.patternTexture.delete();\n    }\n    this.setState({patternTexture: null});\n    let image = fillPatternAtlas;\n    if (typeof image === 'string') {\n      image = await fetch(image, {propName: 'fillPatternAtlas', layer: this});\n    }\n    const patternTexture =\n      image instanceof Texture2D\n        ? image\n        : new Texture2D(this.context.gl, {\n            data: image,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n    this.setState({patternTexture});\n  }\n\n  async loadPatternMapping({fillPatternMapping, fetch}) {\n    this.setState({patternMapping: null});\n    let patternMapping = fillPatternMapping;\n    if (typeof patternMapping === 'string') {\n      patternMapping = await fetch(patternMapping, {\n        propName: 'fillPatternMapping',\n        layer: this\n      });\n    }\n    this.setState({patternMapping});\n    this.getAttributeManager().invalidate('getFillPattern');\n    this.setNeedsUpdate();\n  }\n\n  getPatternFrame(name) {\n    const {patternMapping} = this.state;\n    const def = patternMapping && patternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\n\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;\n"],"file":"fill-style.js"}