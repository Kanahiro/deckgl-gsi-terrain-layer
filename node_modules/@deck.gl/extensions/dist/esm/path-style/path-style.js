import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { LayerExtension, _mergeShaders as mergeShaders } from '@deck.gl/core';
import { dashShaders, offsetShaders } from './shaders.glsl';
import { dist } from 'gl-matrix/vec3';
var defaultProps = {
  getDashArray: {
    type: 'accessor',
    value: [0, 0]
  },
  getOffset: {
    type: 'accessor',
    value: 0
  },
  dashJustified: false
};

var PathStyleExtension = function (_LayerExtension) {
  _inherits(PathStyleExtension, _LayerExtension);

  var _super = _createSuper(PathStyleExtension);

  function PathStyleExtension() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$dash = _ref.dash,
        dash = _ref$dash === void 0 ? false : _ref$dash,
        _ref$offset = _ref.offset,
        offset = _ref$offset === void 0 ? false : _ref$offset,
        _ref$highPrecisionDas = _ref.highPrecisionDash,
        highPrecisionDash = _ref$highPrecisionDas === void 0 ? false : _ref$highPrecisionDas;

    _classCallCheck(this, PathStyleExtension);

    return _super.call(this, {
      dash: dash || highPrecisionDash,
      offset: offset,
      highPrecisionDash: highPrecisionDash
    });
  }

  _createClass(PathStyleExtension, [{
    key: "isEnabled",
    value: function isEnabled(layer) {
      return layer.state.pathTesselator;
    }
  }, {
    key: "getShaders",
    value: function getShaders(extension) {
      if (!extension.isEnabled(this)) {
        return null;
      }

      var result = {};

      if (extension.opts.dash) {
        result = mergeShaders(result, dashShaders);
      }

      if (extension.opts.offset) {
        result = mergeShaders(result, offsetShaders);
      }

      return result;
    }
  }, {
    key: "initializeState",
    value: function initializeState(context, extension) {
      var attributeManager = this.getAttributeManager();

      if (!attributeManager || !extension.isEnabled(this)) {
        return;
      }

      extension.enabled = true;

      if (extension.opts.dash) {
        attributeManager.addInstanced({
          instanceDashArrays: {
            size: 2,
            accessor: 'getDashArray'
          }
        });
      }

      if (extension.opts.highPrecisionDash) {
        attributeManager.addInstanced({
          instanceDashOffsets: {
            size: 1,
            accessor: 'getPath',
            transform: extension.getDashOffsets.bind(this)
          }
        });
      }

      if (extension.opts.offset) {
        attributeManager.addInstanced({
          instanceOffsets: {
            size: 1,
            accessor: 'getOffset'
          }
        });
      }
    }
  }, {
    key: "updateState",
    value: function updateState(params, extension) {
      if (!extension.isEnabled(this)) {
        return;
      }

      var uniforms = {};

      if (extension.opts.dash) {
        uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;
      }

      this.state.model.setUniforms(uniforms);
    }
  }, {
    key: "getDashOffsets",
    value: function getDashOffsets(path) {
      var result = [0];
      var positionSize = this.props.positionFormat === 'XY' ? 2 : 3;
      var isNested = Array.isArray(path[0]);
      var geometrySize = isNested ? path.length : path.length / positionSize;
      var p;
      var prevP;

      for (var i = 0; i < geometrySize - 1; i++) {
        p = isNested ? path[i] : path.slice(i * positionSize, i * positionSize + positionSize);
        p = this.projectPosition(p);

        if (i > 0) {
          result[i] = result[i - 1] + dist(prevP, p);
        }

        prevP = p;
      }

      return result;
    }
  }]);

  return PathStyleExtension;
}(LayerExtension);

export { PathStyleExtension as default };
PathStyleExtension.extensionName = 'PathStyleExtension';
PathStyleExtension.defaultProps = defaultProps;
//# sourceMappingURL=path-style.js.map