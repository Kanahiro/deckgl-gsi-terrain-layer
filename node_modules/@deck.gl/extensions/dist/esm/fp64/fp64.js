import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { LayerExtension, COORDINATE_SYSTEM } from '@deck.gl/core';
import project64 from './project64';

var Fp64Extension = function (_LayerExtension) {
  _inherits(Fp64Extension, _LayerExtension);

  var _super = _createSuper(Fp64Extension);

  function Fp64Extension() {
    _classCallCheck(this, Fp64Extension);

    return _super.apply(this, arguments);
  }

  _createClass(Fp64Extension, [{
    key: "getShaders",
    value: function getShaders(opts) {
      var coordinateSystem = this.props.coordinateSystem;

      if (coordinateSystem !== COORDINATE_SYSTEM.LNGLAT && coordinateSystem !== COORDINATE_SYSTEM.DEFAULT) {
        throw new Error('fp64: coordinateSystem must be LNGLAT');
      }

      return {
        modules: [project64]
      };
    }
  }]);

  return Fp64Extension;
}(LayerExtension);

export { Fp64Extension as default };
Fp64Extension.extensionName = 'Fp64Extension';
//# sourceMappingURL=fp64.js.map