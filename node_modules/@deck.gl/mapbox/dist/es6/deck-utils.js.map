{"version":3,"sources":["../../src/deck-utils.js"],"names":["Deck","WebMercatorViewport","getDeckInstance","map","gl","deck","__deck","customRender","props","_customRender","deckProps","useDevicePixels","triggerRepaint","parameters","depthMask","depthTest","blendFunc","blendEquation","userData","isExternal","mapboxLayers","Set","setProps","Object","assign","width","height","viewState","getViewState","on","onMapMove","finalize","mapboxVersion","getMapboxVersion","layerManager","afterRender","addLayer","layer","add","updateLayers","removeLayer","delete","updateLayer","drawLayer","currentViewport","getViewport","_drawLayers","viewports","layers","getLayers","deckLayer","shouldDrawLayer","id","clearCanvas","lng","lat","getCenter","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","major","minor","version","split","slice","Number","useMapboxProjection","x","y","repeat","nearZMultiplier","mapboxLayerIds","Array","from","length","needsRedraw","clearRedrawFlags","layerFilter","filter","layerInstance","parent","forEach","LayerType","type","push"],"mappings":"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","sourcesContent":["import {Deck, WebMercatorViewport} from '@deck.gl/core';\n\nexport function getDeckInstance({map, gl, deck}) {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  const customRender = deck && deck.props._customRender;\n\n  const deckProps = {\n    useDevicePixels: true,\n    _customRender: () => {\n      map.triggerRepaint();\n      if (customRender) {\n        // customRender may be subscribed by DeckGL React component to update child props\n        // make sure it is still called\n        customRender();\n      }\n    },\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      blendEquation: gl.FUNC_ADD\n    },\n    userData: {\n      isExternal: false,\n      mapboxLayers: new Set()\n    }\n  };\n\n  if (deck) {\n    deck.setProps(deckProps);\n    deck.props.userData.isExternal = true;\n  } else {\n    // Using external gl context - do not set css size\n    Object.assign(deckProps, {\n      gl,\n      width: false,\n      height: false,\n      viewState: getViewState(map)\n    });\n    deck = new Deck(deckProps);\n\n    // If deck is externally provided (React use case), we use deck's viewState to\n    // drive the map.\n    // Otherwise (pure JS use case), we use the map's viewState to drive deck.\n    map.on('move', () => onMapMove(deck, map));\n    map.on('remove', () => {\n      deck.finalize();\n      map.__deck = null;\n    });\n  }\n  deck.props.userData.mapboxVersion = getMapboxVersion(map);\n  map.__deck = deck;\n  map.on('render', () => {\n    if (deck.layerManager) afterRender(deck, map);\n  });\n\n  return deck;\n}\n\nexport function addLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck, layer) {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck, map, layer) {\n  let {currentViewport} = deck.props.userData;\n  if (!currentViewport) {\n    // This is the first layer drawn in this render cycle.\n    // Generate viewport from the current map state.\n    currentViewport = getViewport(deck, map, true);\n    deck.props.userData.currentViewport = currentViewport;\n  }\n  if (!deck.layerManager) {\n    return;\n  }\n  deck._drawLayers('mapbox-repaint', {\n    viewports: [currentViewport],\n    // TODO - accept layerFilter in drawLayers' renderOptions\n    layers: getLayers(deck, deckLayer => shouldDrawLayer(layer.id, deckLayer)),\n    clearCanvas: false\n  });\n}\n\nfunction getViewState(map) {\n  const {lng, lat} = map.getCenter();\n  return {\n    longitude: lng,\n    latitude: lat,\n    zoom: map.getZoom(),\n    bearing: map.getBearing(),\n    pitch: map.getPitch()\n  };\n}\n\nfunction getMapboxVersion(map) {\n  // parse mapbox version string\n  let major = 0;\n  let minor = 0;\n  if (map.version) {\n    [major, minor] = map.version\n      .split('.')\n      .slice(0, 2)\n      .map(Number);\n  }\n  return {major, minor};\n}\n\nfunction getViewport(deck, map, useMapboxProjection = true) {\n  const {mapboxVersion} = deck.props.userData;\n\n  return new WebMercatorViewport(\n    Object.assign(\n      {\n        x: 0,\n        y: 0,\n        width: deck.width,\n        height: deck.height,\n        repeat: true\n      },\n      getViewState(map),\n      useMapboxProjection\n        ? {\n            // match mapbox's projection matrix\n            // A change of near plane was made in 1.3.0\n            // https://github.com/mapbox/mapbox-gl-js/pull/8502\n            nearZMultiplier:\n              (mapboxVersion.major === 1 && mapboxVersion.minor >= 3) || mapboxVersion.major >= 2\n                ? 0.02\n                : 1 / (deck.height || 1)\n          }\n        : {\n            // use deck.gl's own default\n            nearZMultiplier: 0.1\n          }\n    )\n  );\n}\n\nfunction afterRender(deck, map) {\n  const {mapboxLayers, isExternal} = deck.props.userData;\n\n  if (isExternal) {\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const layers = getLayers(deck, deckLayer => {\n      for (const id of mapboxLayerIds) {\n        if (shouldDrawLayer(id, deckLayer)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    if (layers.length > 0) {\n      deck._drawLayers('mapbox-repaint', {\n        viewports: [getViewport(deck, map, false)],\n        layers,\n        clearCanvas: false\n      });\n    }\n  }\n\n  // End of render cycle, clear generated viewport\n  deck.props.userData.currentViewport = null;\n}\n\nfunction onMapMove(deck, map) {\n  deck.setProps({\n    viewState: getViewState(map)\n  });\n  // Camera changed, will trigger a map repaint right after this\n  // Clear any change flag triggered by setting viewState so that deck does not request\n  // a second repaint\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction getLayers(deck, layerFilter) {\n  const layers = deck.layerManager.getLayers();\n  return layers.filter(layerFilter);\n}\n\nfunction shouldDrawLayer(id, layer) {\n  let layerInstance = layer;\n  while (layerInstance) {\n    if (layerInstance.id === id) {\n      return true;\n    }\n    layerInstance = layerInstance.parent;\n  }\n  return false;\n}\n\nfunction updateLayers(deck) {\n  if (deck.props.userData.isExternal) {\n    return;\n  }\n\n  const layers = [];\n  deck.props.userData.mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n"],"file":"deck-utils.js"}