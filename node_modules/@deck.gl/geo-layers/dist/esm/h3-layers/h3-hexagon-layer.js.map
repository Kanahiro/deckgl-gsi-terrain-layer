{"version":3,"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"names":["h3ToGeoBoundary","h3GetResolution","h3ToGeo","geoToH3","h3IsPentagon","h3Distance","edgeLength","UNITS","lerp","CompositeLayer","createIterable","ColumnLayer","PolygonLayer","UPDATE_THRESHOLD_KM","normalizeLongitudes","vertices","refLng","undefined","pt","deltaLng","scalePolygon","hexId","factor","lat","lng","actualCount","length","vertexCount","i","getHexagonCentroid","getHexagon","object","objectInfo","hexagonId","h3ToPolygon","coverage","flatten","positions","Float64Array","mergeTriggers","trigger","Object","assign","defaultProps","highPrecision","type","min","max","value","centerHexagon","x","hexagon","extruded","getLineDashArray","H3HexagonLayer","changeFlags","_shouldUseHighPrecision","propsOrDataChanged","somethingChanged","props","oldProps","dataChanged","updateTriggers","resolution","hasPentagon","hasMultipleRes","data","iterable","index","hexResolution","setState","edgeLengthKM","km","_updateVertices","context","viewport","state","centerHex","hex","latitude","longitude","distance","unitsPerMeter","distanceScales","centerLat","centerLng","projectFlat","centerX","centerY","map","p","worldPosition","_renderPolygonLayer","_renderColumnLayer","elevationScale","material","wireframe","stroked","filled","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getFillColor","getElevation","getLineColor","getLineWidth","SubLayerClass","getSubLayerClass","forwardProps","_getForwardProps","getPolygon","getSubLayerProps","id","_normalize","positionFormat","getPosition","diskResolution","radius","bind","layerName"],"mappings":"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","sourcesContent":["import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  UNITS\n} from 'h3-js';\nimport {lerp} from 'math.gl';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer} from '@deck.gl/layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\n// normalize longitudes w.r.t center (refLng), when not provided first vertex\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\n\n// scale polygon vertices w.r.t center (hexId)\nexport function scalePolygon(hexId, vertices, factor) {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n\n  // normalize with respect to center\n  normalizeLongitudes(vertices, lng);\n\n  // `h3ToGeoBoundary` returns same array object for first and last vertex (closed polygon),\n  // if so skip scaling the last vertex\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId, coverage = 1, flatten) {\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    // scale and normalize vertices w.r.t to center\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    // normalize w.r.t to start vertex\n    normalizeLongitudes(vertices);\n  }\n\n  if (flatten) {\n    const positions = new Float64Array(vertices.length * 2);\n    let i = 0;\n    for (const pt of vertices) {\n      positions[i++] = pt[0];\n      positions[i++] = pt[1];\n    }\n    return positions;\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = Object.assign({}, getHexagon, {coverage});\n  } else {\n    trigger = {getHexagon, coverage};\n  }\n  return trigger;\n}\n\nconst defaultProps = Object.assign({}, PolygonLayer.defaultProps, {\n  highPrecision: false,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  centerHexagon: null,\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true\n});\n\n// not supported\ndelete defaultProps.getLineDashArray;\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)\n    ) {\n      let resolution = -1;\n      let hasPentagon = false;\n      let hasMultipleRes = false;\n      const {iterable, objectInfo} = createIterable(props.data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexId = props.getHexagon(object, objectInfo);\n        // Take the resolution of the first hex\n        const hexResolution = h3GetResolution(hexId);\n        if (resolution < 0) resolution = hexResolution;\n        else if (resolution !== hexResolution) {\n          hasMultipleRes = true;\n          break;\n        }\n        if (h3IsPentagon(hexId)) {\n          hasPentagon = true;\n          break;\n        }\n      }\n      this.setState({\n        resolution,\n        edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n        hasMultipleRes,\n        hasPentagon\n      });\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _shouldUseHighPrecision() {\n    const {resolution, hasPentagon, hasMultipleRes} = this.state;\n    return (\n      this.props.highPrecision ||\n      hasMultipleRes ||\n      hasPentagon ||\n      (resolution >= 0 && resolution <= 5)\n    );\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex =\n      this.props.centerHexagon || geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (centerHex === hex) {\n      return;\n    }\n    if (centerHex) {\n      const distance = h3Distance(centerHex, hex);\n      // h3Distance returns a negative number if the distance could not be computed\n      // due to the two indexes very far apart or on opposite sides of a pentagon.\n      if (distance >= 0 && distance * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n    }\n\n    const {unitsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      worldPosition[0] = (worldPosition[0] - centerX) / unitsPerMeter[0];\n      worldPosition[1] = (worldPosition[1] - centerY) / unitsPerMeter[1];\n      return worldPosition;\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      updateTriggers: {\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {data, getHexagon, updateTriggers, coverage} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId, coverage, true);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"],"file":"h3-hexagon-layer.js"}