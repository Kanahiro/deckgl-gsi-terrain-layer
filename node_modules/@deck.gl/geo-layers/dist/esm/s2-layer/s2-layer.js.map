{"version":3,"sources":["../../../src/s2-layer/s2-layer.js"],"names":["CompositeLayer","PolygonLayer","getS2Polygon","defaultProps","Object","assign","getS2Token","type","value","d","token","S2Layer","props","data","elevationScale","extruded","wireframe","filled","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","getLineDashArray","updateTriggers","material","CellLayer","getSubLayerClass","getSubLayerProps","id","_normalize","positionFormat","getPolygon","x","objectInfo","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps = Object.assign(\n  {\n    getS2Token: {type: 'accessor', value: d => d.token}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class S2Layer extends CompositeLayer {\n  renderLayers() {\n    // Layer prop\n    const {data, getS2Token} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth,\n        getLineDashArray\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n      }\n    );\n  }\n}\n\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\n"],"file":"s2-layer.js"}