{"version":3,"sources":["../../../src/s2-layer/s2-utils.js"],"names":["toHilbertQuadkey","FromHilbertQuadKey","IJToST","STToUV","FaceUVToXYZ","XYZToLngLat","Long","getIdFromToken","token","paddedToken","padEnd","fromString","MAX_RESOLUTION","getGeoBounds","face","ij","level","offsets","resolution","Math","max","ceil","pow","result","Float64Array","ptIndex","i","offset","slice","nextOffset","stepI","stepJ","j","st","uv","xyz","lngLat","getS2QuadKey","indexOf","toString","getS2Polygon","key","s2cell"],"mappings":"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","sourcesContent":["// s2-geometry is a pure JavaScript port of Google/Niantic's S2 Geometry library\n// which is perfect since it works in the browser.\nimport {\n  toHilbertQuadkey,\n  FromHilbertQuadKey,\n  IJToST,\n  STToUV,\n  FaceUVToXYZ,\n  XYZToLngLat\n} from './s2-geometry';\nimport Long from 'long';\n\n/**\n * Given an S2 token this function convert the token to 64 bit id\n   https://github.com/google/s2-geometry-library-java/blob/c04b68bf3197a9c34082327eeb3aec7ab7c85da1/src/com/google/common/geometry/S2CellId.java#L439\n * */\nfunction getIdFromToken(token) {\n  // pad token with zeros to make the length 16\n  const paddedToken = token.padEnd(16, '0');\n  return Long.fromString(paddedToken, 16);\n}\n\nconst MAX_RESOLUTION = 100;\n\n/* Adapted from s2-geometry's S2Cell.getCornerLatLngs */\nfunction getGeoBounds({face, ij, level}) {\n  const offsets = [[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]];\n\n  // The S2 cell edge is curved: http://s2geometry.io/\n  // This is more prominent at lower levels\n  // resolution is the number of segments to generate per edge.\n  // We exponentially reduce resolution as level increases so it doesn't affect perf\n  // when there are a large number of cells\n  const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION * Math.pow(2, -level)));\n  const result = new Float64Array(4 * resolution * 2 + 2);\n  let ptIndex = 0;\n\n  for (let i = 0; i < 4; i++) {\n    const offset = offsets[i].slice(0);\n    const nextOffset = offsets[i + 1];\n    const stepI = (nextOffset[0] - offset[0]) / resolution;\n    const stepJ = (nextOffset[1] - offset[1]) / resolution;\n\n    for (let j = 0; j < resolution; j++) {\n      offset[0] += stepI;\n      offset[1] += stepJ;\n      // Cell can be represented by coordinates IJ, ST, UV, XYZ\n      // http://s2geometry.io/devguide/s2cell_hierarchy#coordinate-systems\n      const st = IJToST(ij, level, offset);\n      const uv = STToUV(st);\n      const xyz = FaceUVToXYZ(face, uv);\n      const lngLat = XYZToLngLat(xyz);\n\n      result[ptIndex++] = lngLat[0];\n      result[ptIndex++] = lngLat[1];\n    }\n  }\n  // close the loop\n  result[ptIndex++] = result[0];\n  result[ptIndex++] = result[1];\n  return result;\n}\n\nexport function getS2QuadKey(token) {\n  if (typeof token === 'string') {\n    if (token.indexOf('/') > 0) {\n      // is Hilbert quad key\n      return token;\n    }\n    // is S2 token\n    token = getIdFromToken(token);\n  }\n  // is Long id\n  return toHilbertQuadkey(token.toString());\n}\n\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param {*} cell - This can be an S2 key or token\n * @return {Array} - a simple polygon in array format: [[lng, lat], ...]\n *   - each coordinate is an array [lng, lat]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2Polygon(token) {\n  const key = getS2QuadKey(token);\n  const s2cell = FromHilbertQuadKey(key);\n\n  return getGeoBounds(s2cell);\n}\n"],"file":"s2-utils.js"}