{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["Vector3","Geometry","COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","SimpleMeshLayer","log","load","Tileset3D","TILE_TYPE","Tiles3DLoader","scratchOffset","defaultProps","getPointColor","pointSize","data","loadOptions","loader","onTilesetLoad","tileset3d","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","Tile3DLayer","props","removed","state","layerMap","changeFlags","somethingChanged","oldProps","_loadTileset","viewportChanged","_updateTileset","info","sourceLayer","layerId","id","substr","substring","length","tileId","indexOf","object","tilesetUrl","options","preload","preloadOptions","Object","assign","tilesetJson","_onTileLoad","bind","_onTileUnload","onTileLoadFail","setState","setNeedsUpdate","context","timeline","viewport","frameNumber","update","tilesetChanged","content","type","POINTCLOUD","_createPointCloudTileLayer","SCENEGRAPH","_create3DModelTileLayer","MESH","_createSimpleMeshLayer","Error","attributes","pointCount","constantRGBA","cartographicOrigin","modelMatrix","positions","normals","colors","SubLayerClass","getSubLayerClass","getSubLayerProps","header","vertexCount","POSITION","NORMAL","COLOR_0","coordinateSystem","METER_OFFSETS","coordinateOrigin","getColor","gltf","instances","_lighting","scenegraph","getTransformMatrix","instance","getPosition","texture","texCoords","Float32Array","value","i","copy","subarray","set","geometry","drawMode","mesh","tiles","map","layer","selected","_create3DTileLayer","visible","clone","filter","Boolean","layerName"],"mappings":"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","sourcesContent":["import {Vector3} from 'math.gl';\nimport GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer, SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {log} from '@deck.gl/core';\n\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst scratchOffset = new Vector3();\n\nconst defaultProps = {\n  getPointColor: [0, 0, 0],\n  pointSize: 1.0,\n\n  data: null,\n  loadOptions: {},\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: tileset3d => {},\n  onTileLoad: tileHeader => {},\n  onTileUnload: tileHeader => {},\n  onTileError: (tile, message, url) => {}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {tileset3d} = this.state;\n      this._updateTileset(tileset3d);\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    const {layerMap} = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n    if (layerId) {\n      // layerId: this.id-[scenegraph|pointcloud]-tileId\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  async _loadTileset(tilesetUrl) {\n    const {loader, loadOptions} = this.props;\n    const options = {...loadOptions};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileLoadFail: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(tileset3d);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  _onTileLoad(tileHeader) {\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(this.state.tileset3d);\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tileHeader) {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n    const frameNumber = tileset3d.update(viewport);\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n    if (tilesetChanged) {\n      this.setState({frameNumber});\n    }\n  }\n\n  _create3DTileLayer(tileHeader) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._createPointCloudTileLayer(tileHeader);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._create3DModelTileLayer(tileHeader);\n      case TILE_TYPE.MESH:\n        return this._createSimpleMeshLayer(tileHeader);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _createPointCloudTileLayer(tileHeader) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        data: {\n          header: {\n            vertexCount: pointCount\n          },\n          attributes: {\n            POSITION: positions,\n            NORMAL: normals,\n            COLOR_0: colors\n          }\n        },\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  _create3DModelTileLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        data: instances || [{}],\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: instance => [0, 0, 0]\n      }\n    );\n  }\n\n  _createSimpleMeshLayer(tileHeader) {\n    const content = tileHeader.content;\n    const {attributes, modelMatrix, cartographicOrigin, texture} = content;\n    const {normals, texCoords} = attributes;\n    const positions = new Float32Array(attributes.positions.value.length);\n    for (let i = 0; i < positions.length; i += 3) {\n      scratchOffset.copy(attributes.positions.value.subarray(i, i + 3));\n      positions.set(scratchOffset, i);\n    }\n\n    const geometry = new Geometry({\n      drawMode: GL.TRIANGLES,\n      attributes: {\n        positions,\n        normals,\n        texCoords\n      }\n    });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        mesh: geometry,\n        data: [{}],\n        getPosition: [0, 0, 0],\n        getColor: [255, 255, 255],\n        texture,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS\n      }\n    );\n  }\n\n  renderLayers() {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    return tileset3d.tiles\n      .map(tile => {\n        let layer = layerMap[tile.id] && layerMap[tile.id].layer;\n        // render selected tiles\n        if (tile.selected) {\n          // create layer\n          if (!layer) {\n            layer = this._create3DTileLayer(tile);\n            layerMap[tile.id] = {layer, tile};\n          }\n          // update layer visibility\n          if (layer && layer.props && !layer.props.visible) {\n            // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n            layer = layer.clone({visible: true});\n            layerMap[tile.id].layer = layer;\n          }\n          return layer;\n        }\n\n        // hide non-selected tiles\n        if (layer && layer.props && layer.props.visible) {\n          // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n          layer = layer.clone({visible: false});\n          layerMap[tile.id].layer = layer;\n        }\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}