"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.STRATEGY_DEFAULT = exports.STRATEGY_REPLACE = exports.STRATEGY_NEVER = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _tile2dHeader = _interopRequireDefault(require("./tile-2d-header"));

var _utils = require("./utils");

var _loaderUtils = require("@loaders.gl/loader-utils");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var TILE_STATE_UNKNOWN = 0;
var TILE_STATE_VISIBLE = 1;
var TILE_STATE_PLACEHOLDER = 3;
var TILE_STATE_HIDDEN = 4;
var TILE_STATE_SELECTED = 5;
var STRATEGY_NEVER = 'never';
exports.STRATEGY_NEVER = STRATEGY_NEVER;
var STRATEGY_REPLACE = 'no-overlap';
exports.STRATEGY_REPLACE = STRATEGY_REPLACE;
var STRATEGY_DEFAULT = 'best-available';
exports.STRATEGY_DEFAULT = STRATEGY_DEFAULT;
var DEFAULT_CACHE_SCALE = 5;

var Tileset2D = function () {
  function Tileset2D(opts) {
    var _this = this;

    (0, _classCallCheck2["default"])(this, Tileset2D);
    this.opts = opts;
    this._getTileData = opts.getTileData;
    this.onTileError = opts.onTileError;

    this.onTileLoad = function (tile) {
      opts.onTileLoad(tile);

      if (_this.opts.maxCacheByteSize) {
        _this._cacheByteSize += tile.byteLength;

        _this._resizeCache();
      }
    };

    this.onTileUnload = opts.onTileUnload;
    this._requestScheduler = new _loaderUtils.RequestScheduler({
      maxRequests: opts.maxRequests,
      throttleRequests: opts.maxRequests > 0
    });
    this._cache = new Map();
    this._tiles = [];
    this._dirty = false;
    this._cacheByteSize = 0;
    this._viewport = null;
    this._selectedTiles = null;
    this._frameNumber = 0;
    this.setOptions(opts);
  }

  (0, _createClass2["default"])(Tileset2D, [{
    key: "setOptions",
    value: function setOptions(opts) {
      Object.assign(this.opts, opts);

      if (Number.isFinite(opts.maxZoom)) {
        this._maxZoom = Math.floor(opts.maxZoom);
      }

      if (Number.isFinite(opts.minZoom)) {
        this._minZoom = Math.ceil(opts.minZoom);
      }
    }
  }, {
    key: "update",
    value: function update(viewport) {
      var _this2 = this;

      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          zRange = _ref.zRange;

      if (!viewport.equals(this._viewport)) {
        this._viewport = viewport;
        var tileIndices = this.getTileIndices({
          viewport: viewport,
          maxZoom: this._maxZoom,
          minZoom: this._minZoom,
          zRange: zRange
        });
        this._selectedTiles = tileIndices.map(function (index) {
          return _this2._getTile(index, true);
        });

        if (this._dirty) {
          this._rebuildTree();
        }
      }

      var changed = this.updateTileStates();

      if (this._dirty) {
        this._resizeCache();
      }

      if (changed) {
        this._frameNumber++;
      }

      return this._frameNumber;
    }
  }, {
    key: "getTileIndices",
    value: function getTileIndices(_ref2) {
      var viewport = _ref2.viewport,
          maxZoom = _ref2.maxZoom,
          minZoom = _ref2.minZoom,
          zRange = _ref2.zRange;
      var _this$opts = this.opts,
          tileSize = _this$opts.tileSize,
          extent = _this$opts.extent;
      return (0, _utils.getTileIndices)({
        viewport: viewport,
        maxZoom: maxZoom,
        minZoom: minZoom,
        zRange: zRange,
        tileSize: tileSize,
        extent: extent
      });
    }
  }, {
    key: "getTileMetadata",
    value: function getTileMetadata(_ref3) {
      var x = _ref3.x,
          y = _ref3.y,
          z = _ref3.z;
      return {
        bbox: (0, _utils.tileToBoundingBox)(this._viewport, x, y, z)
      };
    }
  }, {
    key: "getParentIndex",
    value: function getParentIndex(tileIndex) {
      tileIndex.x = Math.floor(tileIndex.x / 2);
      tileIndex.y = Math.floor(tileIndex.y / 2);
      tileIndex.z -= 1;
      return tileIndex;
    }
  }, {
    key: "updateTileStates",
    value: function updateTileStates() {
      this._updateTileStates(this.selectedTiles);

      var maxRequests = this.opts.maxRequests;
      var abortCandidates = [];
      var ongoingRequestCount = 0;
      var changed = false;

      var _iterator = _createForOfIteratorHelper(this._cache.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _tile = _step.value;
          var isVisible = Boolean(_tile.state & TILE_STATE_VISIBLE);

          if (_tile.isVisible !== isVisible) {
            changed = true;
            _tile.isVisible = isVisible;
          }

          _tile.isSelected = _tile.state === TILE_STATE_SELECTED;

          if (_tile.isLoading) {
            ongoingRequestCount++;

            if (!_tile.isSelected) {
              abortCandidates.push(_tile);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (maxRequests > 0) {
        while (ongoingRequestCount > maxRequests && abortCandidates.length > 0) {
          var tile = abortCandidates.shift();
          tile.abort();
          ongoingRequestCount--;
        }
      }

      return changed;
    }
  }, {
    key: "_rebuildTree",
    value: function _rebuildTree() {
      var _cache = this._cache;

      var _iterator2 = _createForOfIteratorHelper(_cache.values()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var tile = _step2.value;
          tile.parent = null;
          tile.children.length = 0;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = _createForOfIteratorHelper(_cache.values()),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _tile2 = _step3.value;

          var parent = this._getNearestAncestor(_tile2.x, _tile2.y, _tile2.z);

          _tile2.parent = parent;

          if (parent) {
            parent.children.push(_tile2);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "_updateTileStates",
    value: function _updateTileStates(selectedTiles) {
      var _cache = this._cache;
      var refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;

      var _iterator4 = _createForOfIteratorHelper(_cache.values()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var tile = _step4.value;
          tile.state = TILE_STATE_UNKNOWN;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var _iterator5 = _createForOfIteratorHelper(selectedTiles),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _tile3 = _step5.value;
          _tile3.state = TILE_STATE_SELECTED;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      if (refinementStrategy === STRATEGY_NEVER) {
        return;
      }

      var _iterator6 = _createForOfIteratorHelper(selectedTiles),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _tile4 = _step6.value;
          getPlaceholderInAncestors(_tile4, refinementStrategy);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var _iterator7 = _createForOfIteratorHelper(selectedTiles),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _tile5 = _step7.value;

          if (needsPlaceholder(_tile5)) {
            getPlaceholderInChildren(_tile5);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "_resizeCache",
    value: function _resizeCache() {
      var _cache = this._cache,
          opts = this.opts;
      var maxCacheSize = opts.maxCacheSize || (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);
      var maxCacheByteSize = opts.maxCacheByteSize || Infinity;
      var overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;

      if (overflown) {
        var _iterator8 = _createForOfIteratorHelper(_cache),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _step8$value = (0, _slicedToArray2["default"])(_step8.value, 2),
                tileId = _step8$value[0],
                tile = _step8$value[1];

            if (!tile.isVisible) {
              this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;

              _cache["delete"](tileId);

              this.onTileUnload(tile);
            }

            if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {
              break;
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        this._rebuildTree();

        this._dirty = true;
      }

      if (this._dirty) {
        this._tiles = Array.from(this._cache.values()).sort(function (t1, t2) {
          return t1.z - t2.z;
        });
        this._dirty = false;
      }
    }
  }, {
    key: "_getTile",
    value: function _getTile(_ref4, create) {
      var x = _ref4.x,
          y = _ref4.y,
          z = _ref4.z;
      var tileId = "".concat(x, ",").concat(y, ",").concat(z);

      var tile = this._cache.get(tileId);

      if (!tile && create) {
        tile = new _tile2dHeader["default"]({
          x: x,
          y: y,
          z: z,
          onTileLoad: this.onTileLoad,
          onTileError: this.onTileError
        });
        Object.assign(tile, this.getTileMetadata(tile));
        tile.loadData(this._getTileData, this._requestScheduler);

        this._cache.set(tileId, tile);

        this._dirty = true;
      } else if (tile && tile.isCancelled && !tile.isLoading) {
        tile.loadData(this._getTileData, this._requestScheduler);
      }

      return tile;
    }
  }, {
    key: "_getNearestAncestor",
    value: function _getNearestAncestor(x, y, z) {
      var _this$_minZoom = this._minZoom,
          _minZoom = _this$_minZoom === void 0 ? 0 : _this$_minZoom;

      var index = {
        x: x,
        y: y,
        z: z
      };

      while (index.z > _minZoom) {
        index = this.getParentIndex(index);

        var parent = this._getTile(index);

        if (parent) {
          return parent;
        }
      }

      return null;
    }
  }, {
    key: "tiles",
    get: function get() {
      return this._tiles;
    }
  }, {
    key: "selectedTiles",
    get: function get() {
      return this._selectedTiles;
    }
  }, {
    key: "isLoaded",
    get: function get() {
      return this._selectedTiles.every(function (tile) {
        return tile.isLoaded;
      });
    }
  }]);
  return Tileset2D;
}();

exports["default"] = Tileset2D;

function needsPlaceholder(tile) {
  var t = tile;

  while (t) {
    if (t.state & TILE_STATE_VISIBLE === 0) {
      return true;
    }

    if (t.isLoaded) {
      return false;
    }

    t = t.parent;
  }

  return true;
}

function getPlaceholderInAncestors(tile, refinementStrategy) {
  var parent;
  var state = TILE_STATE_PLACEHOLDER;

  while (parent = tile.parent) {
    if (tile.isLoaded) {
      state = TILE_STATE_HIDDEN;

      if (refinementStrategy === STRATEGY_DEFAULT) {
        return;
      }
    }

    parent.state = Math.max(parent.state, state);
    tile = parent;
  }
}

function getPlaceholderInChildren(tile) {
  var _iterator9 = _createForOfIteratorHelper(tile.children),
      _step9;

  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var child = _step9.value;
      child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);

      if (!child.isLoaded) {
        getPlaceholderInChildren(child);
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
}
//# sourceMappingURL=tileset-2d.js.map