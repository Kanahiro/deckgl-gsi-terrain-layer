{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["Vector3","Geometry","COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","SimpleMeshLayer","log","load","Tileset3D","TILE_TYPE","Tiles3DLoader","scratchOffset","defaultProps","getPointColor","pointSize","data","loadOptions","loader","onTilesetLoad","tileset3d","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","Tile3DLayer","initializeState","props","removed","state","layerMap","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","_loadTileset","viewportChanged","_updateTileset","getPickingInfo","info","sourceLayer","layerId","id","substr","substring","length","tileId","indexOf","object","tilesetUrl","options","preload","preloadOptions","Object","assign","tilesetJson","_onTileLoad","bind","_onTileUnload","onTileLoadFail","setState","setNeedsUpdate","timeline","viewport","context","frameNumber","update","tilesetChanged","_create3DTileLayer","content","type","POINTCLOUD","_createPointCloudTileLayer","SCENEGRAPH","_create3DModelTileLayer","MESH","_createSimpleMeshLayer","Error","attributes","pointCount","constantRGBA","cartographicOrigin","modelMatrix","positions","normals","colors","SubLayerClass","getSubLayerClass","getSubLayerProps","header","vertexCount","POSITION","NORMAL","COLOR_0","coordinateSystem","METER_OFFSETS","coordinateOrigin","getColor","gltf","instances","_lighting","scenegraph","getTransformMatrix","instance","getPosition","texture","texCoords","Float32Array","value","i","copy","subarray","set","geometry","drawMode","mesh","renderLayers","tiles","map","layer","selected","visible","clone","filter","Boolean","layerName"],"mappings":"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","sourcesContent":["import {Vector3} from 'math.gl';\nimport GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer, SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {log} from '@deck.gl/core';\n\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst scratchOffset = new Vector3();\n\nconst defaultProps = {\n  getPointColor: [0, 0, 0],\n  pointSize: 1.0,\n\n  data: null,\n  loadOptions: {},\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: tileset3d => {},\n  onTileLoad: tileHeader => {},\n  onTileUnload: tileHeader => {},\n  onTileError: (tile, message, url) => {}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {tileset3d} = this.state;\n      this._updateTileset(tileset3d);\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    const {layerMap} = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n    if (layerId) {\n      // layerId: this.id-[scenegraph|pointcloud]-tileId\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  async _loadTileset(tilesetUrl) {\n    const {loader, loadOptions} = this.props;\n    const options = {...loadOptions};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileLoadFail: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(tileset3d);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  _onTileLoad(tileHeader) {\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(this.state.tileset3d);\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tileHeader) {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n    const frameNumber = tileset3d.update(viewport);\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n    if (tilesetChanged) {\n      this.setState({frameNumber});\n    }\n  }\n\n  _create3DTileLayer(tileHeader) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._createPointCloudTileLayer(tileHeader);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._create3DModelTileLayer(tileHeader);\n      case TILE_TYPE.MESH:\n        return this._createSimpleMeshLayer(tileHeader);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _createPointCloudTileLayer(tileHeader) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        data: {\n          header: {\n            vertexCount: pointCount\n          },\n          attributes: {\n            POSITION: positions,\n            NORMAL: normals,\n            COLOR_0: colors\n          }\n        },\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  _create3DModelTileLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        data: instances || [{}],\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: instance => [0, 0, 0]\n      }\n    );\n  }\n\n  _createSimpleMeshLayer(tileHeader) {\n    const content = tileHeader.content;\n    const {attributes, modelMatrix, cartographicOrigin, texture} = content;\n    const {normals, texCoords} = attributes;\n    const positions = new Float32Array(attributes.positions.value.length);\n    for (let i = 0; i < positions.length; i += 3) {\n      scratchOffset.copy(attributes.positions.value.subarray(i, i + 3));\n      positions.set(scratchOffset, i);\n    }\n\n    const geometry = new Geometry({\n      drawMode: GL.TRIANGLES,\n      attributes: {\n        positions,\n        normals,\n        texCoords\n      }\n    });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        mesh: geometry,\n        data: [{}],\n        getPosition: [0, 0, 0],\n        getColor: [255, 255, 255],\n        texture,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS\n      }\n    );\n  }\n\n  renderLayers() {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    return tileset3d.tiles\n      .map(tile => {\n        let layer = layerMap[tile.id] && layerMap[tile.id].layer;\n        // render selected tiles\n        if (tile.selected) {\n          // create layer\n          if (!layer) {\n            layer = this._create3DTileLayer(tile);\n            layerMap[tile.id] = {layer, tile};\n          }\n          // update layer visibility\n          if (layer && layer.props && !layer.props.visible) {\n            // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n            layer = layer.clone({visible: true});\n            layerMap[tile.id].layer = layer;\n          }\n          return layer;\n        }\n\n        // hide non-selected tiles\n        if (layer && layer.props && layer.props.visible) {\n          // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n          layer = layer.clone({visible: false});\n          layerMap[tile.id].layer = layer;\n        }\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}