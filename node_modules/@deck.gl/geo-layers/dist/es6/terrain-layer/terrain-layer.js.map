{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.js"],"names":["CompositeLayer","SimpleMeshLayer","WebMercatorViewport","COORDINATE_SYSTEM","load","TerrainLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","elevationData","texture","meshMaxError","type","value","bounds","optional","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","updateState","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","options","getTiledTerrainData","tile","dataUrl","textureUrl","bbox","z","viewport","longitude","west","east","latitude","north","south","zoom","bottomLeft","projectFlat","topRight","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","data","mesh","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","length","every","x","zRange","ranges","filter","Boolean","map","arr","header","boundingBox","bound","minZ","Math","min","maxZ","max","renderLayers","tileSize","maxZoom","minZoom","extent","maxRequests","getSubLayerProps","id","getTileData","bind","updateTriggers","_instanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {WebMercatorViewport, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {TerrainLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: urlType,\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, workerUrl}) {\n    if (!elevationData) {\n      return null;\n    }\n    const options = {\n      terrain: {\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    if (workerUrl !== null) {\n      options.terrain.workerUrl = workerUrl;\n    }\n    return load(elevationData, TerrainLoader, options);\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, texture, elevationDecoder, meshMaxError, workerUrl} = this.props;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, z} = tile;\n    const viewport = new WebMercatorViewport({\n      longitude: (bbox.west + bbox.east) / 2,\n      latitude: (bbox.north + bbox.south) / 2,\n      zoom: z\n    });\n    const bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n    const topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      workerUrl\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        load(textureUrl).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(data) {\n    if (!data || data.length === 0 || data.every(x => !x)) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = data.filter(Boolean).map(arr => {\n      const bounds = arr[0].header.boundingBox;\n      return bounds.map(bound => bound[2]);\n    });\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"],"file":"terrain-layer.js"}