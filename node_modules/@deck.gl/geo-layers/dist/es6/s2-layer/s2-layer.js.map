{"version":3,"sources":["../../../src/s2-layer/s2-layer.js"],"names":["CompositeLayer","PolygonLayer","getS2Polygon","defaultProps","Object","assign","getS2Token","type","value","d","token","S2Layer","renderLayers","data","props","elevationScale","extruded","wireframe","filled","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","getLineDashArray","updateTriggers","material","CellLayer","getSubLayerClass","getSubLayerProps","id","_normalize","positionFormat","getPolygon","x","objectInfo","layerName"],"mappings":"AAoBA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AAEA,SAAQC,YAAR,QAA2B,YAA3B;AAEA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CACnB;AACEC,EAAAA,UAAU,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEC,CAAC,IAAIA,CAAC,CAACC;AAAjC;AADd,CADmB,EAInBT,YAAY,CAACE,YAJM,CAArB;AAOA,eAAe,MAAMQ,OAAN,SAAsBX,cAAtB,CAAqC;AAClDY,EAAAA,YAAY,GAAG;AAEb,UAAM;AAACC,MAAAA,IAAD;AAAOP,MAAAA;AAAP,QAAqB,KAAKQ,KAAhC;AAGA,UAAM;AACJC,MAAAA,cADI;AAEJC,MAAAA,QAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,MAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA,cANI;AAOJC,MAAAA,cAPI;AAQJC,MAAAA,kBARI;AASJC,MAAAA,kBATI;AAUJC,MAAAA,gBAVI;AAWJC,MAAAA,cAXI;AAYJC,MAAAA,iBAZI;AAaJC,MAAAA,YAbI;AAcJC,MAAAA,YAdI;AAeJC,MAAAA,YAfI;AAgBJC,MAAAA,YAhBI;AAiBJC,MAAAA;AAjBI,QAkBF,KAAKjB,KAlBT;AAqBA,UAAM;AAACkB,MAAAA,cAAD;AAAiBC,MAAAA;AAAjB,QAA6B,KAAKnB,KAAxC;AAGA,UAAMoB,SAAS,GAAG,KAAKC,gBAAL,CAAsB,MAAtB,EAA8BlC,YAA9B,CAAlB;AACA,WAAO,IAAIiC,SAAJ,CACL;AACEhB,MAAAA,MADF;AAEED,MAAAA,SAFF;AAIED,MAAAA,QAJF;AAKED,MAAAA,cALF;AAOEI,MAAAA,OAPF;AAQEC,MAAAA,cARF;AASEC,MAAAA,cATF;AAUEC,MAAAA,kBAVF;AAWEC,MAAAA,kBAXF;AAYEC,MAAAA,gBAZF;AAaEC,MAAAA,cAbF;AAcEC,MAAAA,iBAdF;AAgBEO,MAAAA,QAhBF;AAkBEN,MAAAA,YAlBF;AAmBEC,MAAAA,YAnBF;AAoBEC,MAAAA,YApBF;AAqBEC,MAAAA,YArBF;AAsBEC,MAAAA;AAtBF,KADK,EAyBL,KAAKK,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE,MADgB;AAEpBL,MAAAA,cAAc,EAAE;AACdL,QAAAA,YAAY,EAAEK,cAAc,CAACL,YADf;AAEdC,QAAAA,YAAY,EAAEI,cAAc,CAACJ,YAFf;AAGdC,QAAAA,YAAY,EAAEG,cAAc,CAACH,YAHf;AAIdC,QAAAA,YAAY,EAAEE,cAAc,CAACF,YAJf;AAKdC,QAAAA,gBAAgB,EAAEC,cAAc,CAACD;AALnB;AAFI,KAAtB,CAzBK,EAmCL;AACElB,MAAAA,IADF;AAEEyB,MAAAA,UAAU,EAAE,KAFd;AAGEC,MAAAA,cAAc,EAAE,IAHlB;AAIEC,MAAAA,UAAU,EAAE,CAACC,CAAD,EAAIC,UAAJ,KAAmBxC,YAAY,CAACI,UAAU,CAACmC,CAAD,EAAIC,UAAJ,CAAX;AAJ7C,KAnCK,CAAP;AA0CD;;AAzEiD;AA4EpD/B,OAAO,CAACgC,SAAR,GAAoB,SAApB;AACAhC,OAAO,CAACR,YAAR,GAAuBA,YAAvB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps = Object.assign(\n  {\n    getS2Token: {type: 'accessor', value: d => d.token}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class S2Layer extends CompositeLayer {\n  renderLayers() {\n    // Layer prop\n    const {data, getS2Token} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth,\n        getLineDashArray\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n      }\n    );\n  }\n}\n\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\n"],"file":"s2-layer.js"}