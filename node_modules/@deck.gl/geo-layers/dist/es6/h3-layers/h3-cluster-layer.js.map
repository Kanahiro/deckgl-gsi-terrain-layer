{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["h3SetToMultiPolygon","CompositeLayer","createIterable","PolygonLayer","defaultProps","Object","assign","getHexagons","type","value","d","hexagons","H3ClusterLayer","updateState","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","getSubLayerRow","setState","renderLayers","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","SubLayerClass","getSubLayerClass","getSubLayerAccessor","getSubLayerProps","id","state","getPolygon","layerName"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = Object.assign(\n  {\n    getHexagons: {type: 'accessor', value: d => d.hexagons}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"],"file":"h3-cluster-layer.js"}