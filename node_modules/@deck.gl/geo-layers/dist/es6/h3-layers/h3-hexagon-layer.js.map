{"version":3,"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"names":["h3ToGeoBoundary","h3GetResolution","h3ToGeo","geoToH3","h3IsPentagon","h3Distance","edgeLength","UNITS","lerp","CompositeLayer","createIterable","ColumnLayer","PolygonLayer","UPDATE_THRESHOLD_KM","normalizeLongitudes","vertices","refLng","undefined","pt","deltaLng","scalePolygon","hexId","factor","lat","lng","actualCount","length","vertexCount","i","getHexagonCentroid","getHexagon","object","objectInfo","hexagonId","h3ToPolygon","coverage","flatten","positions","Float64Array","mergeTriggers","trigger","Object","assign","defaultProps","highPrecision","type","min","max","value","centerHexagon","x","hexagon","extruded","getLineDashArray","H3HexagonLayer","shouldUpdateState","changeFlags","_shouldUseHighPrecision","propsOrDataChanged","somethingChanged","updateState","props","oldProps","dataChanged","updateTriggers","resolution","hasPentagon","hasMultipleRes","iterable","data","index","hexResolution","setState","edgeLengthKM","km","_updateVertices","context","viewport","state","centerHex","hex","latitude","longitude","distance","unitsPerMeter","distanceScales","centerLat","centerLng","centerX","centerY","projectFlat","map","p","worldPosition","renderLayers","_renderPolygonLayer","_renderColumnLayer","_getForwardProps","elevationScale","material","wireframe","stroked","filled","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getFillColor","getElevation","getLineColor","getLineWidth","SubLayerClass","getSubLayerClass","forwardProps","getPolygon","getSubLayerProps","id","_normalize","positionFormat","getPosition","diskResolution","radius","bind","layerName"],"mappings":"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","sourcesContent":["import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  UNITS\n} from 'h3-js';\nimport {lerp} from 'math.gl';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer} from '@deck.gl/layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\n// normalize longitudes w.r.t center (refLng), when not provided first vertex\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\n\n// scale polygon vertices w.r.t center (hexId)\nexport function scalePolygon(hexId, vertices, factor) {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n\n  // normalize with respect to center\n  normalizeLongitudes(vertices, lng);\n\n  // `h3ToGeoBoundary` returns same array object for first and last vertex (closed polygon),\n  // if so skip scaling the last vertex\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId, coverage = 1, flatten) {\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    // scale and normalize vertices w.r.t to center\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    // normalize w.r.t to start vertex\n    normalizeLongitudes(vertices);\n  }\n\n  if (flatten) {\n    const positions = new Float64Array(vertices.length * 2);\n    let i = 0;\n    for (const pt of vertices) {\n      positions[i++] = pt[0];\n      positions[i++] = pt[1];\n    }\n    return positions;\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = Object.assign({}, getHexagon, {coverage});\n  } else {\n    trigger = {getHexagon, coverage};\n  }\n  return trigger;\n}\n\nconst defaultProps = Object.assign({}, PolygonLayer.defaultProps, {\n  highPrecision: false,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  centerHexagon: null,\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true\n});\n\n// not supported\ndelete defaultProps.getLineDashArray;\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)\n    ) {\n      let resolution = -1;\n      let hasPentagon = false;\n      let hasMultipleRes = false;\n      const {iterable, objectInfo} = createIterable(props.data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexId = props.getHexagon(object, objectInfo);\n        // Take the resolution of the first hex\n        const hexResolution = h3GetResolution(hexId);\n        if (resolution < 0) resolution = hexResolution;\n        else if (resolution !== hexResolution) {\n          hasMultipleRes = true;\n          break;\n        }\n        if (h3IsPentagon(hexId)) {\n          hasPentagon = true;\n          break;\n        }\n      }\n      this.setState({\n        resolution,\n        edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n        hasMultipleRes,\n        hasPentagon\n      });\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _shouldUseHighPrecision() {\n    const {resolution, hasPentagon, hasMultipleRes} = this.state;\n    return (\n      this.props.highPrecision ||\n      hasMultipleRes ||\n      hasPentagon ||\n      (resolution >= 0 && resolution <= 5)\n    );\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex =\n      this.props.centerHexagon || geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (centerHex === hex) {\n      return;\n    }\n    if (centerHex) {\n      const distance = h3Distance(centerHex, hex);\n      // h3Distance returns a negative number if the distance could not be computed\n      // due to the two indexes very far apart or on opposite sides of a pentagon.\n      if (distance >= 0 && distance * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n    }\n\n    const {unitsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      worldPosition[0] = (worldPosition[0] - centerX) / unitsPerMeter[0];\n      worldPosition[1] = (worldPosition[1] - centerY) / unitsPerMeter[1];\n      return worldPosition;\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      updateTriggers: {\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {data, getHexagon, updateTriggers, coverage} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId, coverage, true);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"],"file":"h3-hexagon-layer.js"}