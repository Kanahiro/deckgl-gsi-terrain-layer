{"version":3,"sources":["../../src/utils.js"],"names":["replaceInRange","data","getIndex","dataRange","replace","startRow","endRow","Infinity","count","length","replaceStart","replaceEnd","i","row","index","dataLengthChanged","endChunk","slice"],"mappings":";;;;;;;AAIO,SAASA,cAAT,OAA8D;AAAA,MAArCC,IAAqC,QAArCA,IAAqC;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,MAArBC,SAAqB,QAArBA,SAAqB;AAAA,MAAVC,OAAU,QAAVA,OAAU;AAAA,4BACzBD,SADyB,CAC5DE,QAD4D;AAAA,MAC5DA,QAD4D,oCACjD,CADiD;AAAA,0BACzBF,SADyB,CAC9CG,MAD8C;AAAA,MAC9CA,MAD8C,kCACrCC,QADqC;AAEnE,MAAMC,KAAK,GAAGP,IAAI,CAACQ,MAAnB;AACA,MAAIC,YAAY,GAAGF,KAAnB;AACA,MAAIG,UAAU,GAAGH,KAAjB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2BI,CAAC,EAA5B,EAAgC;AAC9B,QAAMC,GAAG,GAAGX,QAAQ,CAACD,IAAI,CAACW,CAAD,CAAL,CAApB;;AACA,QAAIF,YAAY,GAAGE,CAAf,IAAoBC,GAAG,IAAIR,QAA/B,EAAyC;AACvCK,MAAAA,YAAY,GAAGE,CAAf;AACD;;AACD,QAAIC,GAAG,IAAIP,MAAX,EAAmB;AACjBK,MAAAA,UAAU,GAAGC,CAAb;AACA;AACD;AACF;;AACD,MAAIE,KAAK,GAAGJ,YAAZ;AACA,MAAMK,iBAAiB,GAAGJ,UAAU,GAAGD,YAAb,KAA8BN,OAAO,CAACK,MAAhE;AAEA,MAAMO,QAAQ,GAAGD,iBAAiB,IAAId,IAAI,CAACgB,KAAL,CAAWN,UAAX,CAAtC;;AAEA,OAAK,IAAIC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGR,OAAO,CAACK,MAA5B,EAAoCG,EAAC,EAArC,EAAyC;AACvCX,IAAAA,IAAI,CAACa,KAAK,EAAN,CAAJ,GAAgBV,OAAO,CAACQ,EAAD,CAAvB;AACD;;AACD,MAAIG,iBAAJ,EAAuB;AAErB,SAAK,IAAIH,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGI,QAAQ,CAACP,MAA7B,EAAqCG,GAAC,EAAtC,EAA0C;AACxCX,MAAAA,IAAI,CAACa,KAAK,EAAN,CAAJ,GAAgBE,QAAQ,CAACJ,GAAD,CAAxB;AACD;;AAEDX,IAAAA,IAAI,CAACQ,MAAL,GAAcK,KAAd;AACD;;AAED,SAAO;AACLT,IAAAA,QAAQ,EAAEK,YADL;AAELJ,IAAAA,MAAM,EAAEI,YAAY,GAAGN,OAAO,CAACK;AAF1B,GAAP;AAID","sourcesContent":["// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({data, getIndex, dataRange, replace}) {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged && data.slice(replaceEnd);\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (dataLengthChanged) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n"],"file":"utils.js"}