{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","vs","fs","modules","project32","gouraudLighting","picking","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","props","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","oldProps","changeFlags","regenerateModels","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","_updateGeometry","geometry","ColumnGeometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","edgeDistance","cos","PI","Model","Object","assign","getShaders","id","isInstanced","getGeometry","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","uniforms","viewport","widthMultiplier","metersPerPixel","setUniforms","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","draw","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels = changeFlags.extensionsChanged;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: 2,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        isInstanced: true\n      })\n    );\n  }\n\n  _updateGeometry({diskResolution, vertices}) {\n    const geometry = this.getGeometry(diskResolution, vertices);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    const widthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    model.setUniforms(\n      Object.assign({}, uniforms, {\n        radius,\n        angle: (angle / 180) * Math.PI,\n        offset,\n        extruded,\n        coverage,\n        elevationScale,\n        edgeDistance,\n        widthScale: lineWidthScale * widthMultiplier,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      })\n    );\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"],"file":"column-layer.js"}