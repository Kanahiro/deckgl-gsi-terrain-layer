{"version":3,"sources":["../../../src/column-layer/column-geometry.js"],"names":["ColumnGeometry","props","id","tesselateColumn","indices","attributes","Geometry","radius","height","nradial","vertices","log","assert","length","vertsAroundEdge","numVertices","stepAngle","Math","PI","Uint16Array","positions","Float32Array","normals","i","j","a","vertex","nextVertex","sin","cos","k","v","floor","sign","index","POSITION","size","value","NORMAL"],"mappings":"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","sourcesContent":["import {log} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props) {\n  const {radius, height = 1, nradial = 10, vertices} = props;\n  log.assert(!vertices || vertices.length >= nradial);\n\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = vertsAroundEdge * 3; // top, side top edge, side bottom edge\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(nradial * 3 * 2); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  for (let j = 0; j < vertsAroundEdge; j++) {\n    const a = j * stepAngle;\n    const vertex = vertices && vertices[j % nradial];\n    const nextVertex = vertices && vertices[(j + 1) % nradial];\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    for (let k = 0; k < 2; k++) {\n      positions[i + 0] = vertex ? vertex[0] : cos * radius;\n      positions[i + 1] = vertex ? vertex[1] : sin * radius;\n      positions[i + 2] = (1 / 2 - k) * height;\n\n      normals[i + 0] = vertex ? nextVertex[0] - vertex[0] : cos;\n      normals[i + 1] = vertex ? nextVertex[1] - vertex[1] : sin;\n\n      i += 3;\n    }\n  }\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = 0; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign((j % 2) - 0.5);\n    const a = v * stepAngle;\n    const vertex = vertices && vertices[(v + nradial) % nradial];\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertex ? vertex[0] : cos * radius;\n    positions[i + 1] = vertex ? vertex[1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  let index = 0;\n  for (let j = 0; j < nradial; j++) {\n    // top loop\n    indices[index++] = j * 2 + 0;\n    indices[index++] = j * 2 + 2;\n    // side vertical\n    indices[index++] = j * 2 + 0;\n    indices[index++] = j * 2 + 1;\n    // bottom loop\n    indices[index++] = j * 2 + 1;\n    indices[index++] = j * 2 + 3;\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n"],"file":"column-geometry.js"}