{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.js"],"names":["getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_CLAMP_TO_EDGE","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","LRUCache","VALID_PROPS","getNewChars","key","characterSet","cachedFontAtlas","get","newChars","cachedMapping","mapping","cachedCharSet","Object","keys","Set","Array","forEach","char","has","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","textAlign","FontAtlasManager","gl","props","buffer","sdf","cutoff","radius","_key","_texture","Texture2D","prop","oldKey","_getKey","_updateTexture","fontAtlas","_generateFontAtlas","set","canvas","width","height","resize","setImageData","parameters","generateMipmap","document","createElement","getContext","assign","getFontWidth","measureText","fontHeight","maxCanvasWidth","xOffset","yOffset","canvasHeight","getImageData","putImageData","tinySDF","TinySDF","size","draw","x","y","fillText"],"mappings":"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","sourcesContent":["/* global document */\n\nimport {Texture2D} from '@luma.gl/core';\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {buildMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 2;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 3;\n\nconst GL_TEXTURE_WRAP_S = 0x2802;\nconst GL_TEXTURE_WRAP_T = 0x2803;\nconst GL_CLAMP_TO_EDGE = 0x812f;\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nconst cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport default class FontAtlasManager {\n  constructor(gl) {\n    this.gl = gl;\n\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._texture = new Texture2D(this.gl);\n  }\n\n  finalize() {\n    this._texture.delete();\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  get mapping() {\n    const data = cache.get(this._key);\n    return data && data.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._updateTexture(cachedFontAtlas);\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._updateTexture(fontAtlas);\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _updateTexture({data: canvas, width, height}) {\n    // resize texture\n    if (this._texture.width !== width || this._texture.height !== height) {\n      this._texture.resize({width, height});\n    }\n\n    // update image data\n    this._texture.setImageData({\n      data: canvas,\n      width,\n      height,\n      parameters: {\n        [GL_TEXTURE_WRAP_S]: GL_CLAMP_TO_EDGE,\n        [GL_TEXTURE_WRAP_T]: GL_CLAMP_TO_EDGE\n      }\n    });\n\n    // this is required step after texture data changed\n    this._texture.generateMipmap();\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping(\n      Object.assign(\n        {\n          getFontWidth: char => ctx.measureText(char).width,\n          fontHeight: fontSize * HEIGHT_SCALE,\n          buffer,\n          characterSet,\n          maxCanvasWidth: MAX_CANVAS_WIDTH\n        },\n        cachedFontAtlas && {\n          mapping: cachedFontAtlas.mapping,\n          xOffset: cachedFontAtlas.xOffset,\n          yOffset: cachedFontAtlas.yOffset\n        }\n      )\n    );\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y - buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {gl, fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${gl} ${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${gl} ${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"],"file":"font-atlas-manager.js"}