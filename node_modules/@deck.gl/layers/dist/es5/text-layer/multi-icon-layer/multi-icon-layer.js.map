{"version":3,"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.js"],"names":["DEFAULT_GAMMA","DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","backgroundColor","type","value","optional","getIconOffsets","x","offsets","alphaCutoff","MultiIconLayer","Object","assign","inject","fs","attributeManager","getAttributeManager","addInstanced","instanceOffsets","size","accessor","instancePickingColors","object","index","target","encodePickingColor","updateParams","oldProps","props","Array","isArray","map","c","slice","setState","uniforms","sdf","state","shouldDrawBackground","buffer","gamma","Boolean","icons","from","icon","IconLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\n// TODO expose as layer properties\nconst DEFAULT_GAMMA = 0.2;\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\nconst defaultProps = {\n  backgroundColor: {type: 'color', value: null, optional: true},\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0\n};\n\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return Object.assign({}, super.getShaders(), {\n      inject: {\n        'vs:#decl': `\n  uniform float gamma;\n  varying float vGamma;\n`,\n        'vs:#main-end': `\n  vGamma = gamma / (sizeScale * iconSize.y);\n`\n      },\n      fs\n    });\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    const {oldProps, props} = updateParams;\n\n    if (props.backgroundColor !== oldProps.backgroundColor) {\n      const backgroundColor = Array.isArray(props.backgroundColor)\n        ? props.backgroundColor.map(c => c / 255.0).slice(0, 3)\n        : null;\n      this.setState({backgroundColor});\n    }\n  }\n\n  draw({uniforms}) {\n    const {sdf} = this.props;\n    const {backgroundColor} = this.state;\n    const shouldDrawBackground = Array.isArray(backgroundColor);\n\n    super.draw({\n      uniforms: Object.assign({}, uniforms, {\n        // Refer the following doc about gamma and buffer\n        // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n        buffer: DEFAULT_BUFFER,\n        gamma: DEFAULT_GAMMA,\n        sdf: Boolean(sdf),\n        backgroundColor: backgroundColor || [0, 0, 0],\n        shouldDrawBackground\n      })\n    });\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n}\n\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;\n"],"file":"multi-icon-layer.js"}