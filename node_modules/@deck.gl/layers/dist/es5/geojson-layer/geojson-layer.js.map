{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusUnits","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getElevation","material","getCoordinates","f","geometry","coordinates","GeoJsonLayer","state","features","props","getLineDashArray","log","removed","changeFlags","dataChanged","data","wrapFeature","getSubLayerRow","bind","Array","isArray","oldFeatures","newFeatures","featuresDiff","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","setState","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","lineDashJustified","updateTriggers","PolygonFillLayer","getSubLayerClass","SolidPolygonLayer","PolygonStrokeLayer","PathLayer","LineStringsLayer","PointsLayer","ScatterplotLayer","polygonFillLayer","shouldRenderSubLayer","_dataDiff","getSubLayerAccessor","getPolygon","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusUnits","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","highlightedObjectIndex","_getHighlightedIndex","isFinite","findIndex","d","CompositeLayer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;AAoBA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAMnBC,EAAAA,cAAc,EAAE,QANG;AAOnBC,EAAAA,cAAc,EAAE,CAPG;AAQnBC,EAAAA,kBAAkB,EAAE,CARD;AASnBC,EAAAA,kBAAkB,EAAEC,MAAM,CAACC,gBATR;AAUnBC,EAAAA,gBAAgB,EAAE,KAVC;AAWnBC,EAAAA,cAAc,EAAE,CAXG;AAanBC,EAAAA,cAAc,EAAE,CAbG;AAenBC,EAAAA,gBAAgB,EAAE,QAfC;AAgBnBC,EAAAA,gBAAgB,EAAE,CAhBC;AAiBnBC,EAAAA,oBAAoB,EAAE,CAjBH;AAkBnBC,EAAAA,oBAAoB,EAAER,MAAM,CAACC,gBAlBV;AAqBnBQ,EAAAA,YAAY,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEtB;AAA1B,GArBK;AAuBnBuB,EAAAA,YAAY,EAAE;AAACF,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAErB;AAA1B,GAvBK;AAyBnBuB,EAAAA,SAAS,EAAE;AAACH,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAzBQ;AA2BnBG,EAAAA,YAAY,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GA3BK;AA6BnBI,EAAAA,YAAY,EAAE;AAACL,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GA7BK;AA+BnBK,EAAAA,QAAQ,EAAE;AA/BS,CAArB;;AAkCA,SAASC,cAAT,CAAwBC,CAAxB,EAA2B;AACzB,SAAOA,CAAC,CAACC,QAAF,CAAWC,WAAlB;AACD;;IAEoBC,Y;;;;;;;;;;;;sCACD;AAChB,WAAKC,KAAL,GAAa;AACXC,QAAAA,QAAQ,EAAE;AADC,OAAb;;AAIA,UAAI,KAAKC,KAAL,CAAWC,gBAAf,EAAiC;AAC/BC,kBAAIC,OAAJ,CAAY,kBAAZ,EAAgC,oBAAhC;AACD;AACF;;;sCAEiC;AAAA,UAArBH,KAAqB,QAArBA,KAAqB;AAAA,UAAdI,WAAc,QAAdA,WAAc;;AAChC,UAAI,CAACA,WAAW,CAACC,WAAjB,EAA8B;AAC5B;AACD;;AACD,UAAMN,QAAQ,GAAG,iCAAmBC,KAAK,CAACM,IAAzB,CAAjB;AACA,UAAMC,WAAW,GAAG,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAApB;;AAEA,UAAIC,KAAK,CAACC,OAAN,CAAcP,WAAW,CAACC,WAA1B,CAAJ,EAA4C;AAC1C,YAAMO,WAAW,GAAG,KAAKd,KAAL,CAAWC,QAA/B;AACA,YAAMc,WAAW,GAAG,EAApB;AACA,YAAMC,YAAY,GAAG,EAArB;;AACA,aAAK,IAAMC,GAAX,IAAkBH,WAAlB,EAA+B;AAC7BC,UAAAA,WAAW,CAACE,GAAD,CAAX,GAAmBH,WAAW,CAACG,GAAD,CAAX,CAAiBC,KAAjB,EAAnB;AACAF,UAAAA,YAAY,CAACC,GAAD,CAAZ,GAAoB,EAApB;AACD;;AAPyC,mDASlBX,WAAW,CAACC,WATM;AAAA;;AAAA;AAS1C,8DAAiD;AAAA,gBAAtCY,SAAsC;AAC/C,gBAAMC,eAAe,GAAG,sCAAwBnB,QAAxB,EAAkCQ,WAAlC,EAA+CU,SAA/C,CAAxB;;AACA,iBAAK,IAAMF,IAAX,IAAkBH,WAAlB,EAA+B;AAC7BE,cAAAA,YAAY,CAACC,IAAD,CAAZ,CAAkBI,IAAlB,CACE,2BAAe;AACbb,gBAAAA,IAAI,EAAEO,WAAW,CAACE,IAAD,CADJ;AAEbK,gBAAAA,QAAQ,EAAE,kBAAA1B,CAAC;AAAA,yBAAIA,CAAC,CAAC2B,QAAF,CAAWC,KAAf;AAAA,iBAFE;AAGbL,gBAAAA,SAAS,EAATA,SAHa;AAIbM,gBAAAA,OAAO,EAAEL,eAAe,CAACH,IAAD;AAJX,eAAf,CADF;AAQD;AACF;AArByC;AAAA;AAAA;AAAA;AAAA;;AAsB1C,aAAKS,QAAL,CAAc;AAACzB,UAAAA,QAAQ,EAAEc,WAAX;AAAwBC,UAAAA,YAAY,EAAZA;AAAxB,SAAd;AACD,OAvBD,MAuBO;AACL,aAAKU,QAAL,CAAc;AACZzB,UAAAA,QAAQ,EAAE,sCAAwBA,QAAxB,EAAkCQ,WAAlC,CADE;AAEZO,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF;;;mCAGc;AAAA,wBACoB,KAAKhB,KADzB;AAAA,UACNC,QADM,eACNA,QADM;AAAA,UACIe,YADJ,eACIA,YADJ;AAAA,UAENW,aAFM,GAEkE1B,QAFlE,CAEN0B,aAFM;AAAA,UAESC,YAFT,GAEkE3B,QAFlE,CAES2B,YAFT;AAAA,UAEuBC,eAFvB,GAEkE5B,QAFlE,CAEuB4B,eAFvB;AAAA,UAEwCC,sBAFxC,GAEkE7B,QAFlE,CAEwC6B,sBAFxC;AAAA,wBAKyD,KAAK5B,KAL9D;AAAA,UAKNhC,OALM,eAKNA,OALM;AAAA,UAKGC,MALH,eAKGA,MALH;AAAA,UAKWC,QALX,eAKWA,QALX;AAAA,UAKqBC,SALrB,eAKqBA,SALrB;AAAA,UAKgCqB,QALhC,eAKgCA,QALhC;AAAA,UAK0CqC,WAL1C,eAK0CA,WAL1C;AAAA,yBAqBT,KAAK7B,KArBI;AAAA,UASX5B,cATW,gBASXA,cATW;AAAA,UAUXC,cAVW,gBAUXA,cAVW;AAAA,UAWXC,kBAXW,gBAWXA,kBAXW;AAAA,UAYXC,kBAZW,gBAYXA,kBAZW;AAAA,UAaXG,gBAbW,gBAaXA,gBAbW;AAAA,UAcXC,cAdW,gBAcXA,cAdW;AAAA,UAeXE,gBAfW,gBAeXA,gBAfW;AAAA,UAgBXC,gBAhBW,gBAgBXA,gBAhBW;AAAA,UAiBXC,oBAjBW,gBAiBXA,oBAjBW;AAAA,UAkBXC,oBAlBW,gBAkBXA,oBAlBW;AAAA,UAmBXJ,cAnBW,gBAmBXA,cAnBW;AAAA,UAoBXkD,iBApBW,gBAoBXA,iBApBW;AAAA,yBAgCT,KAAK9B,KAhCI;AAAA,UAyBXf,YAzBW,gBAyBXA,YAzBW;AAAA,UA0BXG,YA1BW,gBA0BXA,YA1BW;AAAA,UA2BXC,SA3BW,gBA2BXA,SA3BW;AAAA,UA4BXC,YA5BW,gBA4BXA,YA5BW;AAAA,UA6BXW,gBA7BW,gBA6BXA,gBA7BW;AAAA,UA8BXV,YA9BW,gBA8BXA,YA9BW;AAAA,UA+BXwC,cA/BW,gBA+BXA,cA/BW;AAkCb,UAAMC,gBAAgB,GAAG,KAAKC,gBAAL,CAAsB,eAAtB,EAAuCC,6BAAvC,CAAzB;AACA,UAAMC,kBAAkB,GAAG,KAAKF,gBAAL,CAAsB,iBAAtB,EAAyCG,qBAAzC,CAA3B;AACA,UAAMC,gBAAgB,GAAG,KAAKJ,gBAAL,CAAsB,cAAtB,EAAsCG,qBAAtC,CAAzB;AACA,UAAME,WAAW,GAAG,KAAKL,gBAAL,CAAsB,QAAtB,EAAgCM,4BAAhC,CAApB;AAGA,UAAMC,gBAAgB,GACpB,KAAKC,oBAAL,CAA0B,eAA1B,EAA2Cd,eAA3C,KACA,IAAIK,gBAAJ,CACE;AACEU,QAAAA,SAAS,EAAE5B,YAAY,CAACa,eAAb,IAAiC;AAAA,iBAAMb,YAAY,CAACa,eAAnB;AAAA,SAD9C;AAGEzD,QAAAA,QAAQ,EAARA,QAHF;AAIEU,QAAAA,cAAc,EAAdA,cAJF;AAKEX,QAAAA,MAAM,EAANA,MALF;AAMEE,QAAAA,SAAS,EAATA,SANF;AAOEqB,QAAAA,QAAQ,EAARA,QAPF;AAQED,QAAAA,YAAY,EAAE,KAAKoD,mBAAL,CAAyBpD,YAAzB,CARhB;AASEH,QAAAA,YAAY,EAAE,KAAKuD,mBAAL,CAAyBvD,YAAzB,CAThB;AAUEH,QAAAA,YAAY,EAAE,KAAK0D,mBAAL,CACZzE,QAAQ,IAAIC,SAAZ,GAAwBc,YAAxB,GAAuCpB,gBAD3B,CAVhB;AAcEgE,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1Be,UAAAA,UAAU,EAAEf,WAAW,CAAClC,QADE;AAE1BJ,UAAAA,YAAY,EAAEsC,WAAW,CAACtC,YAFA;AAG1BH,UAAAA,YAAY,EAAEyC,WAAW,CAACzC,YAHA;AAI1BH,UAAAA,YAAY,EAAE4C,WAAW,CAAC5C;AAJA;AAd9B,OADF,EAsBE,KAAK4D,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,eADgB;AAEpBf,QAAAA,cAAc,EAAE;AACdxC,UAAAA,YAAY,EAAEwC,cAAc,CAACxC,YADf;AAEdH,UAAAA,YAAY,EAAE2C,cAAc,CAAC3C,YAFf;AAKd2D,UAAAA,UAAU,EAAE7E,QAAQ,IAAIC,SALV;AAMdc,UAAAA,YAAY,EAAE8C,cAAc,CAAC9C;AANf;AAFI,OAAtB,CAtBF,EAiCE;AACEqB,QAAAA,IAAI,EAAEqB,eADR;AAEEiB,QAAAA,UAAU,EAAEnD;AAFd,OAjCF,CAFF;AAyCA,UAAMuD,gBAAgB,GACpB,CAAC9E,QAAD,IACAF,OADA,IAEA,KAAKyE,oBAAL,CAA0B,iBAA1B,EAA6Cb,sBAA7C,CAFA,IAGA,IAAIO,kBAAJ,CACE;AACEO,QAAAA,SAAS,EACP5B,YAAY,CAACc,sBAAb,IAAwC;AAAA,iBAAMd,YAAY,CAACc,sBAAnB;AAAA,SAF5C;AAIEqB,QAAAA,UAAU,EAAE7E,cAJd;AAKE8E,QAAAA,UAAU,EAAE7E,cALd;AAME8E,QAAAA,cAAc,EAAE7E,kBANlB;AAOE8E,QAAAA,cAAc,EAAE7E,kBAPlB;AAQE8E,QAAAA,OAAO,EAAE3E,gBARX;AASE4E,QAAAA,UAAU,EAAE3E,cATd;AAUE4E,QAAAA,aAAa,EAAEzB,iBAVjB;AAYE0B,QAAAA,QAAQ,EAAE,KAAKb,mBAAL,CAAyB1D,YAAzB,CAZZ;AAaEwE,QAAAA,QAAQ,EAAE,KAAKd,mBAAL,CAAyBrD,YAAzB,CAbZ;AAcEoE,QAAAA,YAAY,EAAE,KAAKf,mBAAL,CAAyB1C,gBAAzB,CAdhB;AAgBE4B,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1B8B,UAAAA,OAAO,EAAE9B,WAAW,CAAClC,QADK;AAE1B6D,UAAAA,QAAQ,EAAE3B,WAAW,CAAC5C,YAFI;AAG1BwE,UAAAA,QAAQ,EAAE5B,WAAW,CAACvC;AAHI;AAhB9B,OADF,EAuBE,KAAKuD,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,iBADgB;AAEpBf,QAAAA,cAAc,EAAE;AACdyB,UAAAA,QAAQ,EAAEzB,cAAc,CAAC9C,YADX;AAEdwE,UAAAA,QAAQ,EAAE1B,cAAc,CAACzC,YAFX;AAGdoE,UAAAA,YAAY,EAAE3B,cAAc,CAAC9B;AAHf;AAFI,OAAtB,CAvBF,EA+BE;AACEK,QAAAA,IAAI,EAAEsB,sBADR;AAEE+B,QAAAA,OAAO,EAAElE;AAFX,OA/BF,CAJF;AAyCA,UAAMmE,SAAS,GACb,KAAKnB,oBAAL,CAA0B,aAA1B,EAAyCf,YAAzC,KACA,IAAIW,gBAAJ,CACE;AACEK,QAAAA,SAAS,EAAE5B,YAAY,CAACY,YAAb,IAA8B;AAAA,iBAAMZ,YAAY,CAACY,YAAnB;AAAA,SAD3C;AAGEuB,QAAAA,UAAU,EAAE7E,cAHd;AAIE8E,QAAAA,UAAU,EAAE7E,cAJd;AAKE8E,QAAAA,cAAc,EAAE7E,kBALlB;AAME8E,QAAAA,cAAc,EAAE7E,kBANlB;AAOE8E,QAAAA,OAAO,EAAE3E,gBAPX;AAQE4E,QAAAA,UAAU,EAAE3E,cARd;AASE4E,QAAAA,aAAa,EAAEzB,iBATjB;AAWE0B,QAAAA,QAAQ,EAAE,KAAKb,mBAAL,CAAyB1D,YAAzB,CAXZ;AAYEwE,QAAAA,QAAQ,EAAE,KAAKd,mBAAL,CAAyBrD,YAAzB,CAZZ;AAaEoE,QAAAA,YAAY,EAAE,KAAKf,mBAAL,CAAyB1C,gBAAzB,CAbhB;AAeE4B,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1B8B,UAAAA,OAAO,EAAE9B,WAAW,CAAClC,QADK;AAE1B6D,UAAAA,QAAQ,EAAE3B,WAAW,CAAC5C,YAFI;AAG1BwE,UAAAA,QAAQ,EAAE5B,WAAW,CAACvC;AAHI;AAf9B,OADF,EAsBE,KAAKuD,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,cADgB;AAEpBf,QAAAA,cAAc,EAAE;AACdyB,UAAAA,QAAQ,EAAEzB,cAAc,CAAC9C,YADX;AAEdwE,UAAAA,QAAQ,EAAE1B,cAAc,CAACzC,YAFX;AAGdoE,UAAAA,YAAY,EAAE3B,cAAc,CAAC9B;AAHf;AAFI,OAAtB,CAtBF,EA8BE;AACEK,QAAAA,IAAI,EAAEoB,YADR;AAEEiC,QAAAA,OAAO,EAAElE;AAFX,OA9BF,CAFF;AAsCA,UAAMoE,UAAU,GACd,KAAKpB,oBAAL,CAA0B,QAA1B,EAAoChB,aAApC,KACA,IAAIa,WAAJ,CACE;AACEI,QAAAA,SAAS,EAAE5B,YAAY,CAACW,aAAb,IAA+B;AAAA,iBAAMX,YAAY,CAACW,aAAnB;AAAA,SAD5C;AAGEzD,QAAAA,OAAO,EAAPA,OAHF;AAIEC,QAAAA,MAAM,EAANA,MAJF;AAKE6F,QAAAA,WAAW,EAAEjF,gBALf;AAMEkF,QAAAA,WAAW,EAAEjF,gBANf;AAOEkF,QAAAA,eAAe,EAAEjF,oBAPnB;AAQEkF,QAAAA,eAAe,EAAEjF,oBARnB;AASEZ,QAAAA,cAAc,EAAdA,cATF;AAUEC,QAAAA,cAAc,EAAdA,cAVF;AAWEC,QAAAA,kBAAkB,EAAlBA,kBAXF;AAYEC,QAAAA,kBAAkB,EAAlBA,kBAZF;AAcEa,QAAAA,YAAY,EAAE,KAAKuD,mBAAL,CAAyBvD,YAAzB,CAdhB;AAeEH,QAAAA,YAAY,EAAE,KAAK0D,mBAAL,CAAyB1D,YAAzB,CAfhB;AAgBEI,QAAAA,SAAS,EAAE,KAAKsD,mBAAL,CAAyBtD,SAAzB,CAhBb;AAiBEC,QAAAA,YAAY,EAAE,KAAKqD,mBAAL,CAAyBrD,YAAzB,CAjBhB;AAmBEuC,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1BqC,UAAAA,WAAW,EAAErC,WAAW,CAAClC,QADC;AAE1BP,UAAAA,YAAY,EAAEyC,WAAW,CAACzC,YAFA;AAG1BH,UAAAA,YAAY,EAAE4C,WAAW,CAAC5C,YAHA;AAI1BI,UAAAA,SAAS,EAAEwC,WAAW,CAACxC,SAJG;AAK1BC,UAAAA,YAAY,EAAEuC,WAAW,CAACvC;AALA;AAnB9B,OADF,EA4BE,KAAKuD,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,QADgB;AAEpBf,QAAAA,cAAc,EAAE;AACd3C,UAAAA,YAAY,EAAE2C,cAAc,CAAC3C,YADf;AAEdH,UAAAA,YAAY,EAAE8C,cAAc,CAAC9C,YAFf;AAGdI,UAAAA,SAAS,EAAE0C,cAAc,CAAC1C,SAHZ;AAIdC,UAAAA,YAAY,EAAEyC,cAAc,CAACzC;AAJf;AAFI,OAAtB,CA5BF,EAqCE;AACEgB,QAAAA,IAAI,EAAEmB,aADR;AAEEyC,QAAAA,WAAW,EAAEzE,cAFf;AAGE0E,QAAAA,sBAAsB,EAAE,KAAKC,oBAAL,CAA0B3C,aAA1B;AAH1B,OArCF,CAFF;AA8CA,aAAO,CAEL,CAACvD,QAAD,IAAasE,gBAFR,EAGLQ,gBAHK,EAILY,SAJK,EAKLC,UALK,EAOL3F,QAAQ,IAAIsE,gBAPP,CAAP;AASD;;;yCAGoBlC,I,EAAM;AAAA,UAClB6D,sBADkB,GACQ,KAAKnE,KADb,CAClBmE,sBADkB;AAEzB,aAAO3F,MAAM,CAAC6F,QAAP,CAAgBF,sBAAhB,IACH7D,IAAI,CAACgE,SAAL,CAAe,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAClD,QAAF,CAAWC,KAAX,KAAqB6C,sBAAzB;AAAA,OAAhB,CADG,GAEH,IAFJ;AAGD;;;EAjRuCK,oB;;;AAoR1C3E,YAAY,CAAC4E,SAAb,GAAyB,cAAzB;AACA5E,YAAY,CAAC9B,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusUnits: 'meters',\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      const newFeatures = {};\n      const featuresDiff = {};\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n      this.setState({features: newFeatures, featuresDiff});\n    } else {\n      this.setState({\n        features: separateGeojsonFeatures(features, wrapFeature),\n        featuresDiff: {}\n      });\n    }\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features, featuresDiff} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusUnits,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          _dataDiff: featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures),\n\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(\n            extruded && wireframe ? getLineColor : defaultLineColor\n          ),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          _dataDiff:\n            featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          _dataDiff: featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          _dataDiff: featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures),\n\n          stroked,\n          filled,\n          radiusUnits: pointRadiusUnits,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(pointFeatures)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n\n  _getHighlightedIndex(data) {\n    const {highlightedObjectIndex} = this.props;\n    return Number.isFinite(highlightedObjectIndex)\n      ? data.findIndex(d => d.__source.index === highlightedObjectIndex)\n      : null;\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}