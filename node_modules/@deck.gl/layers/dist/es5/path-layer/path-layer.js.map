{"version":3,"sources":["../../../src/path-layer/path-layer.js"],"names":["DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","rounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","vs","fs","modules","project32","picking","noAlloc","attributeManager","getAttributeManager","addInstanced","positions","size","vertexOffset","fp64","use64bitPositions","transition","accessor","update","calculatePositions","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","normalized","instancePickingColors","index","target","encodePickingColor","__source","setState","pathTesselator","PathTesselator","getDashArray","extensions","log","removed","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","buffers","data","attributes","updateGeometry","geometryBuffer","normalize","loop","getGeometry","positionFormat","wrapLongitude","resolution","context","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","gl","model","_getModel","params","info","find","d","uniforms","widthMultiplier","metersPerPixel","setUniforms","Object","assign","jointType","draw","SEGMENT_INDICES","SEGMENT_POSITIONS","Model","getShaders","id","geometry","Geometry","drawMode","indices","Uint16Array","Float32Array","isInstanced","attribute","get","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  rounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    if (data[0] && data[0].__source) {\n      // data is wrapped\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      rounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          jointType: Number(rounded),\n          billboard,\n          widthScale: widthScale * widthMultiplier,\n          miterLimit,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"],"file":"path-layer.js"}