{"version":3,"sources":["../../../src/line-layer/line-layer.js"],"names":["DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getColor","getWidth","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","LineLayer","vs","fs","modules","project32","picking","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceWidths","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","uniforms","viewport","widthMultiplier","metersPerPixel","setUniforms","Object","assign","draw","positions","Model","getShaders","id","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\nexport default class LineLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels} = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          widthScale: widthScale * widthMultiplier,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n}\n\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;\n"],"file":"line-layer.js"}