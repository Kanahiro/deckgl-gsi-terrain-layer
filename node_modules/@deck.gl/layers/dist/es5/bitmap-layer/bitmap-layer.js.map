{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["DEFAULT_TEXTURE_PARAMETERS","defaultProps","image","type","value","async","bounds","compare","desaturate","min","max","transparentColor","tintColor","BitmapLayer","vs","fs","modules","project32","picking","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","props","oldProps","changeFlags","extensionsChanged","gl","context","model","setState","_getModel","invalidateAll","loadTexture","oldMesh","_createMesh","setVertexCount","vertexCount","key","invalidate","bitmapTexture","normalizedBounds","Number","isFinite","viewport","resolution","Model","Object","assign","getShaders","id","geometry","Geometry","drawMode","isInstanced","opts","uniforms","HTMLVideoElement","readyState","HAVE_METADATA","sizeChanged","width","videoWidth","height","videoHeight","resize","mipmaps","setSubImageData","data","parameters","generateMipmap","setUniforms","map","x","slice","draw","Texture2D","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global HTMLVideoElement */\nimport GL from '@luma.gl/constants';\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  image: {type: 'object', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image !== oldProps.image) {\n      this.loadTexture(props.image);\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh});\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n  }\n\n  _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          vertexCount: 6\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {bitmapTexture, model} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    // Update video frame\n    if (\n      bitmapTexture &&\n      image instanceof HTMLVideoElement &&\n      image.readyState > HTMLVideoElement.HAVE_METADATA\n    ) {\n      const sizeChanged =\n        bitmapTexture.width !== image.videoWidth || bitmapTexture.height !== image.videoHeight;\n      if (sizeChanged) {\n        // note clears image and mipmaps when resizing\n        bitmapTexture.resize({width: image.videoWidth, height: image.videoHeight, mipmaps: true});\n        bitmapTexture.setSubImageData({\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      } else {\n        bitmapTexture.setSubImageData({\n          data: image\n        });\n      }\n\n      bitmapTexture.generateMipmap();\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture,\n            desaturate,\n            transparentColor: transparentColor.map(x => x / 255),\n            tintColor: tintColor.slice(0, 3).map(x => x / 255)\n          })\n        )\n        .draw();\n    }\n  }\n\n  loadTexture(image) {\n    const {gl} = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({bitmapTexture: image});\n    } else if (image instanceof HTMLVideoElement) {\n      // Initialize an empty texture while we wait for the video to load\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          width: 1,\n          height: 1,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n          mipmaps: false\n        })\n      });\n    } else if (image) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        })\n      });\n    }\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}