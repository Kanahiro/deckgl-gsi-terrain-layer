{"version":3,"sources":["../../../src/path-layer/path-tesselator.js"],"names":["Tesselator","normalizePath","START_CAP","END_CAP","INVALID","PathTesselator","constructor","opts","attributes","positions","size","padding","initialize","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","getGeometryFromBuffer","buffer","normalize","normalizeGeometry","path","positionSize","resolution","wrapLongitude","get","attributeName","getGeometrySize","Array","isArray","subPath","numPoints","getPathLength","isClosed","updateGeometryAttributes","context","geometrySize","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","i","ptIndex","getPointOnPath","length","index","target","loop","lastPointIndex"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (Array.isArray(path[0])) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && Array.isArray(path[0])) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  /* Utilities */\n  // Returns the number of points in the path\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  // Returns a point on the path at the specified index\n  getPointOnPath(path, index, target = []) {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n"],"file":"path-tesselator.js"}