{"version":3,"sources":["../../../src/icon-layer/icon-manager.js"],"names":["Texture2D","copyToTexture","cloneTextureFrom","ImageLoader","load","createIterable","log","DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","width","height","canvas","clearRect","drawImage","getIconId","icon","id","url","resizeTexture","gl","texture","oldWidth","oldHeight","newTexture","targetY","delete","buildRowMapping","mapping","columns","yOffset","i","length","xOffset","Object","assign","x","y","buildMapping","icons","buffer","rowHeight","canvasWidth","push","max","canvasHeight","getDiffIcons","data","getIcon","cachedIcons","iterable","objectInfo","object","index","Error","IconManager","constructor","onUpdate","_loadOptions","_getIcon","_texture","_externalTexture","_mapping","_pendingCount","_autoPacking","_xOffset","_yOffset","_rowHeight","_buffer","_canvasWidth","_canvasHeight","_canvas","finalize","getTexture","getIconMapping","setProps","loadOptions","autoPacking","iconAtlas","iconMapping","undefined","_updateIconAtlas","document","createElement","_updateAutoPacking","isLoaded","setParameters","parameters","values","_loadIcons","getContext","then","setSubImageData","generateMipmap","catch","error","finally"],"mappings":"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","sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture, cloneTextureFrom} from '@luma.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\nimport {createIterable, log} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(gl, texture, width, height) {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = cloneTextureFrom(texture, {width, height});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = Object.assign({}, icon, {\n      x: xOffset,\n      y: yOffset\n    });\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n * @param icons {Array<Object>} list of icons, each icon requires url, width, height\n * @param buffer {Number} add buffer to the right and bottom side of the image\n * @param xOffset {Number} right position of last icon in old mapping\n * @param yOffset {Number} top position in last icon in old mapping\n * @param rowHeight {Number} rowHeight of the last icon's row\n * @param canvasWidth {Number} max width of canvas\n * @param mapping {object} old mapping\n * @returns {{mapping: {'/icon/1': {url, width, height, ...}},, canvasHeight: {Number}}}\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}) {\n  let columns = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = icon;\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  constructor(\n    gl,\n    {\n      onUpdate = noop // notify IconLayer when icon texture update\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n\n    // load options used for loading images\n    this._loadOptions = null;\n    this._getIcon = null;\n\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n    // count of pending requests to fetch icons\n    this._pendingCount = 0;\n\n    this._autoPacking = false;\n\n    // internal props used when autoPacking applied\n    // right position of last icon\n    this._xOffset = 0;\n    // top position of last icon\n    this._yOffset = 0;\n    this._rowHeight = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  finalize() {\n    if (this._texture) {\n      this._texture.delete();\n    }\n  }\n\n  getTexture() {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon) {\n    const id = this._autoPacking ? getIconId(icon) : icon;\n    return this._mapping[id] || {};\n  }\n\n  setProps({loadOptions, autoPacking, iconAtlas, iconMapping, data, getIcon}) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (getIcon) {\n      this._getIcon = getIcon;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._updateIconAtlas(iconAtlas);\n    }\n\n    if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._updateAutoPacking(data);\n    }\n  }\n\n  get isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  _updateIconAtlas(iconAtlas) {\n    if (this._texture) {\n      this._texture.delete();\n      this._texture = null;\n    }\n    if (iconAtlas instanceof Texture2D) {\n      iconAtlas.setParameters(DEFAULT_TEXTURE_PARAMETERS);\n\n      this._externalTexture = iconAtlas;\n      this.onUpdate();\n    } else if (iconAtlas) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      this._texture = new Texture2D(this.gl, {\n        data: iconAtlas,\n        parameters: DEFAULT_TEXTURE_PARAMETERS\n      });\n      this.onUpdate();\n    }\n  }\n\n  _updateAutoPacking(data) {\n    const icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this.gl,\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._loadIcons(icons);\n    }\n  }\n\n  _loadIcons(icons) {\n    const ctx = this._canvas.getContext('2d');\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n          const {x, y, width, height} = this._mapping[id];\n\n          const data = resizeImage(ctx, imageData, width, height);\n\n          this._texture.setSubImageData({\n            data,\n            x,\n            y,\n            width,\n            height\n          });\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          log.error(error)();\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"],"file":"icon-manager.js"}