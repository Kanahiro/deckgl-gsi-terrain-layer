{"version":3,"sources":["../../../src/text-layer/text-layer.js"],"names":["CompositeLayer","createIterable","MultiIconLayer","FontAtlasManager","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_RADIUS","DEFAULT_CUTOFF","transformParagraph","getTextFromBuffer","DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","radius","cutoff","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","FONT_SETTINGS_PROPS","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","backgroundColor","type","value","optional","characterSet","fontFamily","fontWeight","lineHeight","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","TextLayer","initializeState","state","styleVersion","fontAtlasManager","context","gl","updateState","props","oldProps","changeFlags","fontChanged","_fontChanged","_updateFontAtlas","styleChanged","textChanged","dataChanged","updateTriggersChanged","all","_updateText","setState","finalizeState","finalize","getPickingInfo","info","Object","assign","object","index","data","setProps","setNeedsRedraw","oldFontSettings","some","prop","textBuffer","attributes","startIndices","numInstances","texts","characterCount","ArrayBuffer","isView","length","_","iterable","objectInfo","push","getIconOffsets","iconMapping","mapping","paragraph","characters","size","width","height","anchorX","anchorY","offsets","Array","rowWidth","y","rowOffset","renderLayers","scale","texture","_dataDiff","transitions","updateTriggers","bind","SubLayerClass","getSubLayerClass","iconAtlas","getSubLayerProps","id","getIcon","layerName"],"mappings":";;;;;;AAoBA,SAAQA,cAAR,EAAwBC,cAAxB,QAA6C,eAA7C;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,gBAAP,IACEC,gBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,cAPF,QAQO,sBARP;AASA,SAAQC,kBAAR,EAA4BC,iBAA5B,QAAoD,SAApD;AAEA,MAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,QAAQ,EAAEP,iBADkB;AAE5BQ,EAAAA,MAAM,EAAEP,cAFoB;AAG5BQ,EAAAA,GAAG,EAAE,KAHuB;AAI5BC,EAAAA,MAAM,EAAER,cAJoB;AAK5BS,EAAAA,MAAM,EAAER;AALoB,CAA9B;AAQA,MAAMS,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,CADW;AAElBC,EAAAA,MAAM,EAAE,CAFU;AAGlBC,EAAAA,GAAG,EAAE,CAAC;AAHY,CAApB;AAMA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,GAAG,EAAE,CADoB;AAEzBC,EAAAA,MAAM,EAAE,CAFiB;AAGzBC,EAAAA,MAAM,EAAE,CAAC;AAHgB,CAA3B;AAMA,MAAMC,aAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAtB;AAEA,MAAMC,mBAAmB,GAAG,GAA5B;AAEA,MAAMC,mBAAmB,GAAG,CAAC,UAAD,EAAa,QAAb,EAAuB,KAAvB,EAA8B,QAA9B,EAAwC,QAAxC,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,SAAS,EAAE,CAFQ;AAGnBC,EAAAA,SAAS,EAAE,QAHQ;AAInBC,EAAAA,aAAa,EAAE,CAJI;AAKnBC,EAAAA,aAAa,EAAEC,MAAM,CAACC,gBALH;AAMnBC,EAAAA,eAAe,EAAE;AAACC,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,IAAvB;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GANE;AAQnBC,EAAAA,YAAY,EAAEtC,gBARK;AASnBuC,EAAAA,UAAU,EAAEtC,mBATO;AAUnBuC,EAAAA,UAAU,EAAEtC,mBAVO;AAWnBuC,EAAAA,UAAU,EAAEjB,mBAXO;AAYnBkB,EAAAA,YAAY,EAAE,EAZK;AAenBC,EAAAA,SAAS,EAAE,YAfQ;AAgBnBC,EAAAA,QAAQ,EAAE;AAACT,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,CAAC;AAAzB,GAhBS;AAkBnBS,EAAAA,OAAO,EAAE;AAACV,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEU,CAAC,IAAIA,CAAC,CAACC;AAAjC,GAlBU;AAmBnBC,EAAAA,WAAW,EAAE;AAACb,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEU,CAAC,IAAIA,CAAC,CAACG;AAAjC,GAnBM;AAoBnBC,EAAAA,QAAQ,EAAE;AAACf,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEb;AAA1B,GApBS;AAqBnB4B,EAAAA,OAAO,EAAE;AAAChB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GArBU;AAsBnBgB,EAAAA,QAAQ,EAAE;AAACjB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAtBS;AAuBnBiB,EAAAA,aAAa,EAAE;AAAClB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAvBI;AAwBnBkB,EAAAA,oBAAoB,EAAE;AAACnB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAxBH;AAyBnBmB,EAAAA,cAAc,EAAE;AAACpB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B;AAzBG,CAArB;AA4BA,eAAe,MAAMoB,SAAN,SAAwB5D,cAAxB,CAAuC;AACpD6D,EAAAA,eAAe,GAAG;AAChB,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,CADH;AAEXC,MAAAA,gBAAgB,EAAE,IAAI7D,gBAAJ,CAAqB,KAAK8D,OAAL,CAAaC,EAAlC;AAFP,KAAb;AAID;;AAGDC,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAD,EAAiC;AAC1C,UAAMC,WAAW,GAAG,KAAKC,YAAL,CAAkBH,QAAlB,EAA4BD,KAA5B,CAApB;;AAEA,QAAIG,WAAJ,EAAiB;AACf,WAAKE,gBAAL,CAAsBJ,QAAtB,EAAgCD,KAAhC;AACD;;AAED,UAAMM,YAAY,GAChBH,WAAW,IACXH,KAAK,CAACvB,UAAN,KAAqBwB,QAAQ,CAACxB,UAD9B,IAEAuB,KAAK,CAACrB,SAAN,KAAoBsB,QAAQ,CAACtB,SAF7B,IAGAqB,KAAK,CAACpB,QAAN,KAAmBqB,QAAQ,CAACrB,QAJ9B;AAMA,UAAM2B,WAAW,GACfL,WAAW,CAACM,WAAZ,IACCN,WAAW,CAACO,qBAAZ,KACEP,WAAW,CAACO,qBAAZ,CAAkCC,GAAlC,IAAyCR,WAAW,CAACO,qBAAZ,CAAkC5B,OAD7E,CAFH;;AAKA,QAAI0B,WAAJ,EAAiB;AACf,WAAKI,WAAL;AACD;;AACD,QAAIL,YAAJ,EAAkB;AAChB,WAAKM,QAAL,CAAc;AACZjB,QAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAAX,GAA0B;AAD5B,OAAd;AAGD;AACF;;AAEDkB,EAAAA,aAAa,GAAG;AACd,UAAMA,aAAN;AAEA,SAAKnB,KAAL,CAAWE,gBAAX,CAA4BkB,QAA5B;AACD;;AAEDC,EAAAA,cAAc,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAS;AAGrB,WAAOC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoB;AAEzBG,MAAAA,MAAM,EAAEH,IAAI,CAACI,KAAL,IAAc,CAAd,GAAkB,KAAKpB,KAAL,CAAWqB,IAAX,CAAgBL,IAAI,CAACI,KAArB,CAAlB,GAAgD;AAF/B,KAApB,CAAP;AAID;;AAEDf,EAAAA,gBAAgB,CAACJ,QAAD,EAAWD,KAAX,EAAkB;AAChC,UAAM;AAAC1B,MAAAA,YAAD;AAAeI,MAAAA,YAAf;AAA6BH,MAAAA,UAA7B;AAAyCC,MAAAA;AAAzC,QAAuDwB,KAA7D;AAGA,UAAM;AAACJ,MAAAA;AAAD,QAAqB,KAAKF,KAAhC;AACAE,IAAAA,gBAAgB,CAAC0B,QAAjB,CACEL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzE,qBAAlB,EAAyCiC,YAAzC,EAAuD;AACrDJ,MAAAA,YADqD;AAErDC,MAAAA,UAFqD;AAGrDC,MAAAA;AAHqD,KAAvD,CADF;AAQA,SAAK+C,cAAL,CAAoB,IAApB;AACD;;AAEDnB,EAAAA,YAAY,CAACH,QAAD,EAAWD,KAAX,EAAkB;AAC5B,QACEC,QAAQ,CAAC1B,UAAT,KAAwByB,KAAK,CAACzB,UAA9B,IACA0B,QAAQ,CAAC3B,YAAT,KAA0B0B,KAAK,CAAC1B,YADhC,IAEA2B,QAAQ,CAACzB,UAAT,KAAwBwB,KAAK,CAACxB,UAHhC,EAIE;AACA,aAAO,IAAP;AACD;;AAED,QAAIyB,QAAQ,CAACvB,YAAT,KAA0BsB,KAAK,CAACtB,YAApC,EAAkD;AAChD,aAAO,KAAP;AACD;;AAED,UAAM8C,eAAe,GAAGvB,QAAQ,CAACvB,YAAT,IAAyB,EAAjD;AACA,UAAMA,YAAY,GAAGsB,KAAK,CAACtB,YAAN,IAAsB,EAA3C;AAEA,WAAOjB,mBAAmB,CAACgE,IAApB,CAAyBC,IAAI,IAAIF,eAAe,CAACE,IAAD,CAAf,KAA0BhD,YAAY,CAACgD,IAAD,CAAvE,CAAP;AACD;;AAIDf,EAAAA,WAAW,GAAG;AACZ,UAAM;AAACU,MAAAA;AAAD,QAAS,KAAKrB,KAApB;AACA,UAAM2B,UAAU,GAAGN,IAAI,CAACO,UAAL,IAAmBP,IAAI,CAACO,UAAL,CAAgB/C,OAAtD;AACA,QAAI;AAACA,MAAAA;AAAD,QAAY,KAAKmB,KAArB;AACA,QAAI;AAAC6B,MAAAA;AAAD,QAAiBR,IAArB;AACA,QAAIS,YAAJ;;AAEA,QAAIH,UAAU,IAAIE,YAAlB,EAAgC;AAC9B,YAAM;AAACE,QAAAA,KAAD;AAAQC,QAAAA;AAAR,UAA0BxF,iBAAiB,iCAC3CyF,WAAW,CAACC,MAAZ,CAAmBP,UAAnB,IAAiC;AAACvD,QAAAA,KAAK,EAAEuD;AAAR,OAAjC,GAAuDA,UADZ;AAE/CQ,QAAAA,MAAM,EAAEd,IAAI,CAACc,MAFkC;AAG/CN,QAAAA;AAH+C,SAAjD;AAKAC,MAAAA,YAAY,GAAGE,cAAf;;AACAnD,MAAAA,OAAO,GAAG,CAACuD,CAAD,EAAI;AAAChB,QAAAA;AAAD,OAAJ,KAAgBW,KAAK,CAACX,KAAD,CAA/B;AACD,KARD,MAQO;AACL,YAAM;AAACiB,QAAAA,QAAD;AAAWC,QAAAA;AAAX,UAAyBzG,cAAc,CAACwF,IAAD,CAA7C;AACAQ,MAAAA,YAAY,GAAG,CAAC,CAAD,CAAf;AACAC,MAAAA,YAAY,GAAG,CAAf;;AAEA,WAAK,MAAMX,MAAX,IAAqBkB,QAArB,EAA+B;AAC7BC,QAAAA,UAAU,CAAClB,KAAX;AACA,cAAMrC,IAAI,GAAGF,OAAO,CAACsC,MAAD,EAASmB,UAAT,CAAP,IAA+B,EAA5C;AACAR,QAAAA,YAAY,IAAI/C,IAAI,CAACoD,MAArB;AACAN,QAAAA,YAAY,CAACU,IAAb,CAAkBT,YAAlB;AACD;AACF;;AAED,SAAKlB,QAAL,CAAc;AAAC/B,MAAAA,OAAD;AAAUgD,MAAAA,YAAV;AAAwBC,MAAAA;AAAxB,KAAd;AACD;;AAGDU,EAAAA,cAAc,CAACrB,MAAD,EAASmB,UAAT,EAAqB;AACjC,UAAMG,WAAW,GAAG,KAAK/C,KAAL,CAAWE,gBAAX,CAA4B8C,OAAhD;AACA,UAAM;AAAC7D,MAAAA;AAAD,QAAY,KAAKa,KAAvB;AACA,UAAM;AAACf,MAAAA,SAAD;AAAYC,MAAAA,QAAZ;AAAsBH,MAAAA,UAAtB;AAAkCY,MAAAA,aAAlC;AAAiDC,MAAAA;AAAjD,QAAyE,KAAKU,KAApF;AAEA,UAAM2C,SAAS,GAAG9D,OAAO,CAACsC,MAAD,EAASmB,UAAT,CAAP,IAA+B,EAAjD;AACA,UAAM;AACJM,MAAAA,UADI;AAEJC,MAAAA,IAAI,EAAE,CAACC,KAAD,EAAQC,MAAR;AAFF,QAGFxG,kBAAkB,CAACoG,SAAD,EAAYlE,UAAZ,EAAwBE,SAAxB,EAAmCC,QAAnC,EAA6C6D,WAA7C,CAHtB;AAIA,UAAMO,OAAO,GACXjG,WAAW,CACT,OAAOsC,aAAP,KAAyB,UAAzB,GAAsCA,aAAa,CAAC8B,MAAD,EAASmB,UAAT,CAAnD,GAA0EjD,aADjE,CADb;AAIA,UAAM4D,OAAO,GACX9F,kBAAkB,CAChB,OAAOmC,oBAAP,KAAgC,UAAhC,GACIA,oBAAoB,CAAC6B,MAAD,EAASmB,UAAT,CADxB,GAEIhD,oBAHY,CADpB;AAOA,UAAM4D,OAAO,GAAG,IAAIC,KAAJ,CAAUR,SAAS,CAACR,MAAV,GAAmB,CAA7B,CAAhB;AACA,QAAIf,KAAK,GAAG,CAAZ;;AAEA,SAAK,MAAM;AAACgC,MAAAA,QAAD;AAAWtE,MAAAA,CAAX;AAAcuE,MAAAA;AAAd,KAAX,IAA+BT,UAA/B,EAA2C;AAGzC,YAAMU,SAAS,GAAI,CAAC,IAAIN,OAAL,KAAiBF,KAAK,GAAGM,QAAzB,CAAD,GAAuC,CAAzD;AACAF,MAAAA,OAAO,CAAC9B,KAAK,EAAN,CAAP,GAAoB,CAAC4B,OAAO,GAAG,CAAX,IAAgBF,KAAjB,GAA0B,CAA1B,GAA8BQ,SAA9B,GAA0CxE,CAA7D;AACAoE,MAAAA,OAAO,CAAC9B,KAAK,EAAN,CAAP,GAAoB,CAAC6B,OAAO,GAAG,CAAX,IAAgBF,MAAjB,GAA2B,CAA3B,GAA+BM,CAAlD;AACD;;AACD,WAAOH,OAAP;AACD;;AAEDK,EAAAA,YAAY,GAAG;AACb,UAAM;AACJ1B,MAAAA,YADI;AAEJC,MAAAA,YAFI;AAGJjD,MAAAA,OAHI;AAIJe,MAAAA,gBAAgB,EAAE;AAAC4D,QAAAA,KAAD;AAAQC,QAAAA,OAAR;AAAiBf,QAAAA;AAAjB,OAJd;AAKJ/C,MAAAA;AALI,QAMF,KAAKD,KANT;AAQA,UAAM;AACJ2B,MAAAA,IADI;AAEJqC,MAAAA,SAFI;AAGJxF,MAAAA,eAHI;AAIJc,MAAAA,WAJI;AAKJE,MAAAA,QALI;AAMJC,MAAAA,OANI;AAOJC,MAAAA,QAPI;AAQJG,MAAAA,cARI;AASJ5B,MAAAA,SATI;AAUJe,MAAAA,YAVI;AAWJd,MAAAA,SAXI;AAYJC,MAAAA,SAZI;AAaJC,MAAAA,aAbI;AAcJC,MAAAA,aAdI;AAeJ4F,MAAAA,WAfI;AAgBJC,MAAAA;AAhBI,QAiBF,KAAK5D,KAjBT;AAmBA,UAAMwC,cAAc,GAAG,KAAKA,cAAL,CAAoBqB,IAApB,CAAyB,IAAzB,CAAvB;AAEA,UAAMC,aAAa,GAAG,KAAKC,gBAAL,CAAsB,YAAtB,EAAoCjI,cAApC,CAAtB;AAEA,WAAO,IAAIgI,aAAJ,CACL;AACElH,MAAAA,GAAG,EAAE8B,YAAY,CAAC9B,GADpB;AAEEoH,MAAAA,SAAS,EAAEP,OAFb;AAGEhB,MAAAA,WAAW,EAAEC,OAHf;AAIExE,MAAAA,eAJF;AAMEc,MAAAA,WANF;AAOEE,MAAAA,QAPF;AAQEC,MAAAA,OARF;AASEC,MAAAA,QATF;AAUEG,MAAAA,cAVF;AAYE5B,MAAAA,SAZF;AAaEC,MAAAA,SAAS,EAAEA,SAAS,GAAG4F,KAbzB;AAcE3F,MAAAA,SAdF;AAeEC,MAAAA,aAAa,EAAEA,aAAa,GAAG0F,KAfjC;AAgBEzF,MAAAA,aAAa,EAAEA,aAAa,GAAGyF,KAhBjC;AAkBEG,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1B3E,QAAAA,WAAW,EAAE2E,WAAW,CAAC3E,WADC;AAE1BI,QAAAA,QAAQ,EAAEuE,WAAW,CAACvE,QAFI;AAG1BF,QAAAA,QAAQ,EAAEyE,WAAW,CAACzE,QAHI;AAI1BC,QAAAA,OAAO,EAAEwE,WAAW,CAACxE,OAJK;AAK1BI,QAAAA,cAAc,EAAEqE,cAAc,CAACrE;AALL;AAlB9B,KADK,EA2BL,KAAK0E,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE,YADgB;AAEpBN,MAAAA,cAAc,EAAE;AACdO,QAAAA,OAAO,EAAEP,cAAc,CAAC/E,OADV;AAEdG,QAAAA,WAAW,EAAE4E,cAAc,CAAC5E,WAFd;AAGdI,QAAAA,QAAQ,EAAEwE,cAAc,CAACxE,QAHX;AAIdF,QAAAA,QAAQ,EAAE0E,cAAc,CAAC1E,QAJX;AAKdC,QAAAA,OAAO,EAAEyE,cAAc,CAACzE,OALV;AAMdI,QAAAA,cAAc,EAAEqE,cAAc,CAACrE,cANjB;AAOdiD,QAAAA,cAAc,EAAE;AACd3D,UAAAA,OAAO,EAAE+E,cAAc,CAAC/E,OADV;AAEdQ,UAAAA,aAAa,EAAEuE,cAAc,CAACvE,aAFhB;AAGdC,UAAAA,oBAAoB,EAAEsE,cAAc,CAACtE,oBAHvB;AAIdK,UAAAA;AAJc;AAPF;AAFI,KAAtB,CA3BK,EA4CL;AACE0B,MAAAA,IADF;AAEEqC,MAAAA,SAFF;AAGE7B,MAAAA,YAHF;AAIEC,MAAAA,YAJF;AAKEU,MAAAA,cALF;AAME2B,MAAAA,OAAO,EAAEtF;AANX,KA5CK,CAAP;AAqDD;;AAhPmD;AAmPtDW,SAAS,CAAC4E,SAAV,GAAsB,WAAtB;AACA5E,SAAS,CAAC9B,YAAV,GAAyBA,YAAzB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_CHAR_SET,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_WEIGHT,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_BUFFER,\n  DEFAULT_RADIUS,\n  DEFAULT_CUTOFF\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF\n};\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  backgroundColor: {type: 'color', value: null, optional: true},\n\n  characterSet: DEFAULT_CHAR_SET,\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'word-break',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]}\n};\n\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager(this.context.gl)\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState({props, oldProps, changeFlags}) {\n    const fontChanged = this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n\n    if (textChanged) {\n      this._updateText();\n    }\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the font atlas manager\n    this.state.fontAtlasManager.finalize();\n  }\n\n  getPickingInfo({info}) {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    return Object.assign(info, {\n      // override object with original data\n      object: info.index >= 0 ? this.props.data[info.index] : null\n    });\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {characterSet, fontSettings, fontFamily, fontWeight} = props;\n\n    // generate test characterSet\n    const {fontAtlasManager} = this.state;\n    fontAtlasManager.setProps(\n      Object.assign({}, DEFAULT_FONT_SETTINGS, fontSettings, {\n        characterSet,\n        fontFamily,\n        fontWeight\n      })\n    );\n\n    this.setNeedsRedraw(true);\n  }\n\n  _fontChanged(oldProps, props) {\n    if (\n      oldProps.fontFamily !== props.fontFamily ||\n      oldProps.characterSet !== props.characterSet ||\n      oldProps.fontWeight !== props.fontWeight\n    ) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  // Text strings are variable width objects\n  // Returns the index at the start of each string (every character is rendered by one instance)\n  _updateText() {\n    const {data} = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {getText} = this.props;\n    let {startIndices} = data;\n    let numInstances;\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        length: data.length,\n        startIndices\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const text = getText(object, objectInfo) || '';\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({getText, startIndices, numInstances});\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      characters,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const offsets = new Array(paragraph.length * 2);\n    let index = 0;\n\n    for (const {rowWidth, x, y} of characters) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth)) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x;\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y;\n    }\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      backgroundColor,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      fontSettings,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const getIconOffsets = this.getIconOffsets.bind(this);\n\n    const SubLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n\n    return new SubLayerClass(\n      {\n        sdf: fontSettings.sdf,\n        iconAtlas: texture,\n        iconMapping: mapping,\n        backgroundColor,\n\n        getPosition,\n        getColor,\n        getSize,\n        getAngle,\n        getPixelOffset,\n\n        billboard,\n        sizeScale: sizeScale * scale,\n        sizeUnits,\n        sizeMinPixels: sizeMinPixels * scale,\n        sizeMaxPixels: sizeMaxPixels * scale,\n\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getColor: transitions.getColor,\n          getSize: transitions.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset\n        }\n      },\n      this.getSubLayerProps({\n        id: 'characters',\n        updateTriggers: {\n          getIcon: updateTriggers.getText,\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getColor: updateTriggers.getColor,\n          getSize: updateTriggers.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getIconOffsets: {\n            getText: updateTriggers.getText,\n            getTextAnchor: updateTriggers.getTextAnchor,\n            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n            styleVersion\n          }\n        }\n      }),\n      {\n        data,\n        _dataDiff,\n        startIndices,\n        numInstances,\n        getIconOffsets,\n        getIcon: getText\n      }\n    );\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"],"file":"text-layer.js"}