{"version":3,"sources":["../../../src/text-layer/lru-cache.js"],"names":["LRUCache","constructor","limit","clear","_cache","_order","get","key","value","_deleteOrder","_appendOrder","set","Object","keys","length","delete","_deleteCache","index","findIndex","o","splice","push"],"mappings":"AAOA,eAAe,MAAMA,QAAN,CAAe;AAC5BC,EAAAA,WAAW,CAACC,KAAK,GAAG,CAAT,EAAY;AACrB,SAAKA,KAAL,GAAaA,KAAb;AAEA,SAAKC,KAAL;AACD;;AAEDA,EAAAA,KAAK,GAAG;AACN,SAAKC,MAAL,GAAc,EAAd;AAEA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAM;AACP,UAAMC,KAAK,GAAG,KAAKJ,MAAL,CAAYG,GAAZ,CAAd;;AACA,QAAIC,KAAJ,EAAW;AAET,WAAKC,YAAL,CAAkBF,GAAlB;;AACA,WAAKG,YAAL,CAAkBH,GAAlB;AACD;;AACD,WAAOC,KAAP;AACD;;AAEDG,EAAAA,GAAG,CAACJ,GAAD,EAAMC,KAAN,EAAa;AACd,QAAI,CAAC,KAAKJ,MAAL,CAAYG,GAAZ,CAAL,EAAuB;AAErB,UAAIK,MAAM,CAACC,IAAP,CAAY,KAAKT,MAAjB,EAAyBU,MAAzB,KAAoC,KAAKZ,KAA7C,EAAoD;AAClD,aAAKa,MAAL,CAAY,KAAKV,MAAL,CAAY,CAAZ,CAAZ;AACD;;AAED,WAAKD,MAAL,CAAYG,GAAZ,IAAmBC,KAAnB;;AACA,WAAKE,YAAL,CAAkBH,GAAlB;AACD,KARD,MAQO;AAEL,WAAKQ,MAAL,CAAYR,GAAZ;AAEA,WAAKH,MAAL,CAAYG,GAAZ,IAAmBC,KAAnB;;AACA,WAAKE,YAAL,CAAkBH,GAAlB;AACD;AACF;;AAEDQ,EAAAA,MAAM,CAACR,GAAD,EAAM;AACV,UAAMC,KAAK,GAAG,KAAKJ,MAAL,CAAYG,GAAZ,CAAd;;AACA,QAAIC,KAAJ,EAAW;AACT,WAAKQ,YAAL,CAAkBT,GAAlB;;AACA,WAAKE,YAAL,CAAkBF,GAAlB;AACD;AACF;;AAEDS,EAAAA,YAAY,CAACT,GAAD,EAAM;AAChB,WAAO,KAAKH,MAAL,CAAYG,GAAZ,CAAP;AACD;;AAEDE,EAAAA,YAAY,CAACF,GAAD,EAAM;AAChB,UAAMU,KAAK,GAAG,KAAKZ,MAAL,CAAYa,SAAZ,CAAsBC,CAAC,IAAIA,CAAC,KAAKZ,GAAjC,CAAd;;AACA,QAAIU,KAAK,IAAI,CAAb,EAAgB;AACd,WAAKZ,MAAL,CAAYe,MAAZ,CAAmBH,KAAnB,EAA0B,CAA1B;AACD;AACF;;AAEDP,EAAAA,YAAY,CAACH,GAAD,EAAM;AAChB,SAAKF,MAAL,CAAYgB,IAAZ,CAAiBd,GAAjB;AACD;;AA9D2B","sourcesContent":["/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache {\n  constructor(limit = 5) {\n    this.limit = limit;\n\n    this.clear();\n  }\n\n  clear() {\n    this._cache = {};\n    // access/update order, first item is oldest, last item is newest\n    this._order = [];\n  }\n\n  get(key) {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key, value) {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key) {\n    const value = this._cache[key];\n    if (value) {\n      this._deleteCache(key);\n      this._deleteOrder(key);\n    }\n  }\n\n  _deleteCache(key) {\n    delete this._cache[key];\n  }\n\n  _deleteOrder(key) {\n    const index = this._order.findIndex(o => o === key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  _appendOrder(key) {\n    this._order.push(key);\n  }\n}\n"],"file":"lru-cache.js"}