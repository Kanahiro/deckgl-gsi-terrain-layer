{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","project32","picking","Model","Geometry","Texture2D","createMesh","vs","fs","DEFAULT_TEXTURE_PARAMETERS","defaultProps","image","type","value","async","bounds","compare","desaturate","min","max","transparentColor","tintColor","BitmapLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","model","delete","setState","_getModel","invalidateAll","loadTexture","oldMesh","_createMesh","setVertexCount","vertexCount","key","invalidate","finalizeState","bitmapTexture","normalizedBounds","Number","isFinite","viewport","resolution","Object","assign","id","geometry","drawMode","isInstanced","draw","opts","uniforms","HTMLVideoElement","readyState","HAVE_METADATA","sizeChanged","width","videoWidth","height","videoHeight","resize","mipmaps","setSubImageData","data","parameters","generateMipmap","setUniforms","map","x","slice","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global HTMLVideoElement */\nimport GL from '@luma.gl/constants';\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  image: {type: 'object', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image !== oldProps.image) {\n      this.loadTexture(props.image);\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh});\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n  }\n\n  _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          vertexCount: 6\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {bitmapTexture, model} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    // Update video frame\n    if (\n      bitmapTexture &&\n      image instanceof HTMLVideoElement &&\n      image.readyState > HTMLVideoElement.HAVE_METADATA\n    ) {\n      const sizeChanged =\n        bitmapTexture.width !== image.videoWidth || bitmapTexture.height !== image.videoHeight;\n      if (sizeChanged) {\n        // note clears image and mipmaps when resizing\n        bitmapTexture.resize({width: image.videoWidth, height: image.videoHeight, mipmaps: true});\n        bitmapTexture.setSubImageData({\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      } else {\n        bitmapTexture.setSubImageData({\n          data: image\n        });\n      }\n\n      bitmapTexture.generateMipmap();\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture,\n            desaturate,\n            transparentColor: transparentColor.map(x => x / 255),\n            tintColor: tintColor.slice(0, 3).map(x => x / 255)\n          })\n        )\n        .draw();\n    }\n  }\n\n  loadTexture(image) {\n    const {gl} = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({bitmapTexture: image});\n    } else if (image instanceof HTMLVideoElement) {\n      // Initialize an empty texture while we wait for the video to load\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          width: 1,\n          height: 1,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n          mipmaps: false\n        })\n      });\n    } else if (image) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        })\n      });\n    }\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}