{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["Layer","project32","gouraudLighting","picking","Model","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","props","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","oldProps","changeFlags","regenerateModels","extensionsChanged","gl","context","state","model","delete","setState","_getModel","invalidateAll","_updateGeometry","getGeometry","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","edgeDistance","cos","PI","Object","assign","id","isInstanced","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","uniforms","viewport","widthMultiplier","metersPerPixel","setUniforms","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels = changeFlags.extensionsChanged;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: 2,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        isInstanced: true\n      })\n    );\n  }\n\n  _updateGeometry({diskResolution, vertices}) {\n    const geometry = this.getGeometry(diskResolution, vertices);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    const widthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    model.setUniforms(\n      Object.assign({}, uniforms, {\n        radius,\n        angle: (angle / 180) * Math.PI,\n        offset,\n        extruded,\n        coverage,\n        elevationScale,\n        edgeDistance,\n        widthScale: lineWidthScale * widthMultiplier,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      })\n    );\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"],"file":"column-layer.js"}