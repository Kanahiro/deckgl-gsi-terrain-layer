{"version":3,"sources":["../../../src/path-layer/path-tesselator.js"],"names":["Tesselator","normalizePath","START_CAP","END_CAP","INVALID","PathTesselator","opts","attributes","positions","size","padding","initialize","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","buffer","normalize","path","positionSize","resolution","wrapLongitude","attributeName","Array","isArray","subPath","getGeometrySize","numPoints","getPathLength","isClosed","context","geometrySize","updateGeometryAttributes","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","i","ptIndex","getPointOnPath","length","index","target","loop","lastPointIndex"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (Array.isArray(path[0])) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && Array.isArray(path[0])) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  /* Utilities */\n  // Returns the number of points in the path\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  // Returns a point on the path at the specified index\n  getPointOnPath(path, index, target = []) {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n"],"file":"path-tesselator.js"}