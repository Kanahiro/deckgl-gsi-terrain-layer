{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","state","paths","props","getLineDashArray","removed","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}