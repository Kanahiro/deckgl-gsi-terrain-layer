{"version":3,"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"names":["Layer","project32","picking","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","id","modules","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","uniforms","viewport","pointRadiusMultiplier","metersPerPixel","lineWidthMultiplier","setUniforms","draw","positions","Object","assign","getShaders","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders(id) {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    const pointRadiusMultiplier = radiusUnits === 'pixels' ? viewport.metersPerPixel : 1;\n    const lineWidthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        radiusScale: radiusScale * pointRadiusMultiplier,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthScale: lineWidthScale * lineWidthMultiplier,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(\n      gl,\n      Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            positions: {size: 3, value: new Float32Array(positions)}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"],"file":"scatterplot-layer.js"}