{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","vs","defines","modules","context","gl","viewport","coordinateSystem","props","isGeospatial","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","preproject","projectFlat","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","alias","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","__source","instancePickingColors","params","info","data","find","d","uniforms","state","topModel","sideModel","renderUniforms","Object","assign","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","draw","setVertexCount","vertexCount","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","wrapLongitude","resolution","startIndices","vertexStarts","id","shaders","getShaders","NON_INSTANCED_MODEL","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  _normalize: true,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(vs) {\n    return super.getShaders({\n      vs,\n      fs,\n      defines: {},\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    if (data[0] && data[0].__source) {\n      // data is wrapped\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders(vsTop);\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(\n        gl,\n        Object.assign({}, shaders, {\n          id: `${id}-top`,\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsSide), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        })\n      );\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}